import { ArgumentsHost, ContextType, HttpException, HttpServer } from '@nestjs/common';
import { BaseExceptionFilter, HttpAdapterHost } from '@nestjs/core';
import { Prisma } from '@prisma/client';
export declare type GqlContextType = 'graphql' | ContextType;
export type ErrorCodesStatusMapping = {
    [key: string]: number;
};
export declare class PrismaClientExceptionFilter extends BaseExceptionFilter {
    private errorCodesStatusMapping;
    constructor(applicationRef?: HttpServer, errorCodesStatusMapping?: ErrorCodesStatusMapping | null);
    catch(exception: Prisma.PrismaClientKnownRequestError, host: ArgumentsHost): void | Prisma.PrismaClientKnownRequestError | HttpException;
    private catchClientKnownRequestError;
    private exceptionShortMessage;
}
export declare function providePrismaClientExceptionFilter(errorCodesStatusMapping?: ErrorCodesStatusMapping): {
    provide: string;
    useFactory: ({ httpAdapter }: HttpAdapterHost) => PrismaClientExceptionFilter;
    inject: (typeof HttpAdapterHost)[];
};
