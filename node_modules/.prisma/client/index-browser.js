
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.2.0
 * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
 */
Prisma.prismaVersion = {
  client: "5.2.0",
  engine: "2804dc98259d2ea960602aca6b8e7fdc03c1758f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.FCMTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  nationality: 'nationality',
  Role: 'Role',
  nif: 'nif',
  phone: 'phone',
  birthday: 'birthday',
  FatherName: 'FatherName',
  MotherName: 'MotherName',
  type: 'type',
  gender: 'gender',
  BI: 'BI',
  neigbhod: 'neigbhod',
  city: 'city',
  municipality: 'municipality',
  avatar: 'avatar',
  addressComplement: 'addressComplement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  doctorId: 'doctorId',
  appoitmentID: 'appoitmentID',
  rate: 'rate',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ClinicRatingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clinicId: 'clinicId',
  rate: 'rate',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ServicesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  institutionId: 'institutionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SpecialityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  number: 'number',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PatientCardScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  clinicId: 'clinicId',
  qrCode: 'qrCode',
  cardNumber: 'cardNumber',
  status: 'status',
  issuedOn: 'issuedOn',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.QrcodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  patientId: 'patientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  specialty: 'specialty',
  bio: 'bio',
  registrationNumber: 'registrationNumber',
  institutionId: 'institutionId',
  isOnVacation: 'isOnVacation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FavoritesScalarFieldEnum = {
  id: 'id',
  pacientId: 'pacientId',
  doctorId: 'doctorId',
  institutionId: 'institutionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.InstitutionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  clinicLatitude: 'clinicLatitude',
  cliniclongitude: 'cliniclongitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.DoctorInstitutionScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  institutionId: 'institutionId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  institutionId: 'institutionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  institutionId: 'institutionId',
  consultationTypeId: 'consultationTypeId',
  doctorId: 'doctorId',
  symptomDescription: 'symptomDescription',
  isUrgent: 'isUrgent',
  date: 'date',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ConsultationTypeScalarFieldEnum = {
  id: 'id',
  description: 'description',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  content: 'content',
  doctor_id: 'doctor_id',
  patient_id: 'patient_id',
  institution_id: 'institution_id',
  appointmentId: 'appointmentId',
  read: 'read',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.WeeklyScheduleScalarFieldEnum = {
  id: 'id',
  doctorId: 'doctorId',
  institutionId: 'institutionId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  interval: 'interval',
  dailyWorkingHours: 'dailyWorkingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MedicalHistoryScalarFieldEnum = {
  id: 'id',
  AppointmentId: 'AppointmentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PasswordConfirmationCodeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  code: 'code',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MedicalReportScalarFieldEnum = {
  id: 'id',
  institutionId: 'institutionId',
  doctorId: 'doctorId',
  patientId: 'patientId',
  AppointmentId: 'AppointmentId',
  medicalEvaluation: 'medicalEvaluation',
  bloodPressure: 'bloodPressure',
  height: 'height',
  weight: 'weight',
  pulse: 'pulse',
  temperature: 'temperature',
  otherPhysicalParams: 'otherPhysicalParams',
  diagnosis: 'diagnosis',
  treatmentPlan: 'treatmentPlan',
  recommendations: 'recommendations',
  orientations: 'orientations',
  observations: 'observations',
  symptomsDescription: 'symptomsDescription',
  additionalObservation: 'additionalObservation',
  date: 'date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RoleType = exports.$Enums.RoleType = {
  PATIENT: 'PATIENT',
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  SUPERADMIN: 'SUPERADMIN',
  CLINIC: 'CLINIC'
};

exports.permissions = exports.$Enums.permissions = {
  READONLY: 'READONLY',
  WRITE: 'WRITE'
};

exports.CardStatus = exports.$Enums.CardStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  ATIVATED: 'ATIVATED',
  DISNABLE: 'DISNABLE'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  CANCELED: 'CANCELED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  FINESHED: 'FINESHED'
};

exports.TypeNotification = exports.$Enums.TypeNotification = {
  APPOINTMENT: 'APPOINTMENT',
  CARD_CHANGESTATUS: 'CARD_CHANGESTATUS',
  MEDICAL_REPORT: 'MEDICAL_REPORT'
};

exports.Prisma.ModelName = {
  FCMToken: 'FCMToken',
  User: 'User',
  Rating: 'Rating',
  ClinicRating: 'ClinicRating',
  Services: 'Services',
  Speciality: 'Speciality',
  UserPermission: 'UserPermission',
  Patient: 'Patient',
  PatientCard: 'PatientCard',
  Qrcode: 'Qrcode',
  Doctor: 'Doctor',
  Favorites: 'Favorites',
  Institution: 'Institution',
  DoctorInstitution: 'DoctorInstitution',
  Admin: 'Admin',
  Appointment: 'Appointment',
  ConsultationType: 'ConsultationType',
  Notification: 'Notification',
  WeeklySchedule: 'WeeklySchedule',
  MedicalHistory: 'MedicalHistory',
  PasswordConfirmationCode: 'PasswordConfirmationCode',
  MedicalReport: 'MedicalReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
