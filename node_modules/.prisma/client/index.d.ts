
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model FCMToken
 * 
 */
export type FCMToken = $Result.DefaultSelection<Prisma.$FCMTokenPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Rating
 * 
 */
export type Rating = $Result.DefaultSelection<Prisma.$RatingPayload>
/**
 * Model ClinicRating
 * 
 */
export type ClinicRating = $Result.DefaultSelection<Prisma.$ClinicRatingPayload>
/**
 * Model Services
 * 
 */
export type Services = $Result.DefaultSelection<Prisma.$ServicesPayload>
/**
 * Model Speciality
 * 
 */
export type Speciality = $Result.DefaultSelection<Prisma.$SpecialityPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model PatientCard
 * 
 */
export type PatientCard = $Result.DefaultSelection<Prisma.$PatientCardPayload>
/**
 * Model Qrcode
 * 
 */
export type Qrcode = $Result.DefaultSelection<Prisma.$QrcodePayload>
/**
 * Model Doctor
 * 
 */
export type Doctor = $Result.DefaultSelection<Prisma.$DoctorPayload>
/**
 * Model Favorites
 * 
 */
export type Favorites = $Result.DefaultSelection<Prisma.$FavoritesPayload>
/**
 * Model Institution
 * 
 */
export type Institution = $Result.DefaultSelection<Prisma.$InstitutionPayload>
/**
 * Model DoctorInstitution
 * 
 */
export type DoctorInstitution = $Result.DefaultSelection<Prisma.$DoctorInstitutionPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model ConsultationType
 * 
 */
export type ConsultationType = $Result.DefaultSelection<Prisma.$ConsultationTypePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model WeeklySchedule
 * 
 */
export type WeeklySchedule = $Result.DefaultSelection<Prisma.$WeeklySchedulePayload>
/**
 * Model MedicalHistory
 * 
 */
export type MedicalHistory = $Result.DefaultSelection<Prisma.$MedicalHistoryPayload>
/**
 * Model PasswordConfirmationCode
 * 
 */
export type PasswordConfirmationCode = $Result.DefaultSelection<Prisma.$PasswordConfirmationCodePayload>
/**
 * Model MedicalReport
 * 
 */
export type MedicalReport = $Result.DefaultSelection<Prisma.$MedicalReportPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const RoleType: {
  PATIENT: 'PATIENT',
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  SUPERADMIN: 'SUPERADMIN',
  CLINIC: 'CLINIC'
};

export type RoleType = (typeof RoleType)[keyof typeof RoleType]


export const permissions: {
  READONLY: 'READONLY',
  WRITE: 'WRITE'
};

export type permissions = (typeof permissions)[keyof typeof permissions]


export const CardStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  ATIVATED: 'ATIVATED',
  DISNABLE: 'DISNABLE'
};

export type CardStatus = (typeof CardStatus)[keyof typeof CardStatus]


export const AppointmentStatus: {
  PENDING: 'PENDING',
  CANCELED: 'CANCELED',
  CONFIRMED: 'CONFIRMED',
  IN_PROGRESS: 'IN_PROGRESS',
  FINESHED: 'FINESHED'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const TypeNotification: {
  APPOINTMENT: 'APPOINTMENT',
  CARD_CHANGESTATUS: 'CARD_CHANGESTATUS',
  MEDICAL_REPORT: 'MEDICAL_REPORT'
};

export type TypeNotification = (typeof TypeNotification)[keyof typeof TypeNotification]

}

export type RoleType = $Enums.RoleType

export const RoleType: typeof $Enums.RoleType

export type permissions = $Enums.permissions

export const permissions: typeof $Enums.permissions

export type CardStatus = $Enums.CardStatus

export const CardStatus: typeof $Enums.CardStatus

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type TypeNotification = $Enums.TypeNotification

export const TypeNotification: typeof $Enums.TypeNotification

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more FCMTokens
 * const fCMTokens = await prisma.fCMToken.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more FCMTokens
   * const fCMTokens = await prisma.fCMToken.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.fCMToken`: Exposes CRUD operations for the **FCMToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FCMTokens
    * const fCMTokens = await prisma.fCMToken.findMany()
    * ```
    */
  get fCMToken(): Prisma.FCMTokenDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.rating`: Exposes CRUD operations for the **Rating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ratings
    * const ratings = await prisma.rating.findMany()
    * ```
    */
  get rating(): Prisma.RatingDelegate<ExtArgs>;

  /**
   * `prisma.clinicRating`: Exposes CRUD operations for the **ClinicRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClinicRatings
    * const clinicRatings = await prisma.clinicRating.findMany()
    * ```
    */
  get clinicRating(): Prisma.ClinicRatingDelegate<ExtArgs>;

  /**
   * `prisma.services`: Exposes CRUD operations for the **Services** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.services.findMany()
    * ```
    */
  get services(): Prisma.ServicesDelegate<ExtArgs>;

  /**
   * `prisma.speciality`: Exposes CRUD operations for the **Speciality** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Specialities
    * const specialities = await prisma.speciality.findMany()
    * ```
    */
  get speciality(): Prisma.SpecialityDelegate<ExtArgs>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs>;

  /**
   * `prisma.patientCard`: Exposes CRUD operations for the **PatientCard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientCards
    * const patientCards = await prisma.patientCard.findMany()
    * ```
    */
  get patientCard(): Prisma.PatientCardDelegate<ExtArgs>;

  /**
   * `prisma.qrcode`: Exposes CRUD operations for the **Qrcode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Qrcodes
    * const qrcodes = await prisma.qrcode.findMany()
    * ```
    */
  get qrcode(): Prisma.QrcodeDelegate<ExtArgs>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<ExtArgs>;

  /**
   * `prisma.favorites`: Exposes CRUD operations for the **Favorites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorites
    * const favorites = await prisma.favorites.findMany()
    * ```
    */
  get favorites(): Prisma.FavoritesDelegate<ExtArgs>;

  /**
   * `prisma.institution`: Exposes CRUD operations for the **Institution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institutions
    * const institutions = await prisma.institution.findMany()
    * ```
    */
  get institution(): Prisma.InstitutionDelegate<ExtArgs>;

  /**
   * `prisma.doctorInstitution`: Exposes CRUD operations for the **DoctorInstitution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoctorInstitutions
    * const doctorInstitutions = await prisma.doctorInstitution.findMany()
    * ```
    */
  get doctorInstitution(): Prisma.DoctorInstitutionDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs>;

  /**
   * `prisma.consultationType`: Exposes CRUD operations for the **ConsultationType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsultationTypes
    * const consultationTypes = await prisma.consultationType.findMany()
    * ```
    */
  get consultationType(): Prisma.ConsultationTypeDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.weeklySchedule`: Exposes CRUD operations for the **WeeklySchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WeeklySchedules
    * const weeklySchedules = await prisma.weeklySchedule.findMany()
    * ```
    */
  get weeklySchedule(): Prisma.WeeklyScheduleDelegate<ExtArgs>;

  /**
   * `prisma.medicalHistory`: Exposes CRUD operations for the **MedicalHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalHistories
    * const medicalHistories = await prisma.medicalHistory.findMany()
    * ```
    */
  get medicalHistory(): Prisma.MedicalHistoryDelegate<ExtArgs>;

  /**
   * `prisma.passwordConfirmationCode`: Exposes CRUD operations for the **PasswordConfirmationCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PasswordConfirmationCodes
    * const passwordConfirmationCodes = await prisma.passwordConfirmationCode.findMany()
    * ```
    */
  get passwordConfirmationCode(): Prisma.PasswordConfirmationCodeDelegate<ExtArgs>;

  /**
   * `prisma.medicalReport`: Exposes CRUD operations for the **MedicalReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalReports
    * const medicalReports = await prisma.medicalReport.findMany()
    * ```
    */
  get medicalReport(): Prisma.MedicalReportDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    FCMToken: 'FCMToken',
    User: 'User',
    Rating: 'Rating',
    ClinicRating: 'ClinicRating',
    Services: 'Services',
    Speciality: 'Speciality',
    UserPermission: 'UserPermission',
    Patient: 'Patient',
    PatientCard: 'PatientCard',
    Qrcode: 'Qrcode',
    Doctor: 'Doctor',
    Favorites: 'Favorites',
    Institution: 'Institution',
    DoctorInstitution: 'DoctorInstitution',
    Admin: 'Admin',
    Appointment: 'Appointment',
    ConsultationType: 'ConsultationType',
    Notification: 'Notification',
    WeeklySchedule: 'WeeklySchedule',
    MedicalHistory: 'MedicalHistory',
    PasswordConfirmationCode: 'PasswordConfirmationCode',
    MedicalReport: 'MedicalReport'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'fCMToken' | 'user' | 'rating' | 'clinicRating' | 'services' | 'speciality' | 'userPermission' | 'patient' | 'patientCard' | 'qrcode' | 'doctor' | 'favorites' | 'institution' | 'doctorInstitution' | 'admin' | 'appointment' | 'consultationType' | 'notification' | 'weeklySchedule' | 'medicalHistory' | 'passwordConfirmationCode' | 'medicalReport'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      FCMToken: {
        payload: Prisma.$FCMTokenPayload<ExtArgs>
        fields: Prisma.FCMTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FCMTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FCMTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>
          }
          findFirst: {
            args: Prisma.FCMTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FCMTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>
          }
          findMany: {
            args: Prisma.FCMTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>[]
          }
          create: {
            args: Prisma.FCMTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>
          }
          createMany: {
            args: Prisma.FCMTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FCMTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>
          }
          update: {
            args: Prisma.FCMTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>
          }
          deleteMany: {
            args: Prisma.FCMTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FCMTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FCMTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FCMTokenPayload>
          }
          aggregate: {
            args: Prisma.FCMTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFCMToken>
          }
          groupBy: {
            args: Prisma.FCMTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FCMTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.FCMTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<FCMTokenCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Rating: {
        payload: Prisma.$RatingPayload<ExtArgs>
        fields: Prisma.RatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RatingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RatingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findFirst: {
            args: Prisma.RatingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RatingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          findMany: {
            args: Prisma.RatingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>[]
          }
          create: {
            args: Prisma.RatingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          createMany: {
            args: Prisma.RatingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RatingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          update: {
            args: Prisma.RatingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          deleteMany: {
            args: Prisma.RatingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RatingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RatingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RatingPayload>
          }
          aggregate: {
            args: Prisma.RatingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRating>
          }
          groupBy: {
            args: Prisma.RatingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.RatingCountArgs<ExtArgs>,
            result: $Utils.Optional<RatingCountAggregateOutputType> | number
          }
        }
      }
      ClinicRating: {
        payload: Prisma.$ClinicRatingPayload<ExtArgs>
        fields: Prisma.ClinicRatingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClinicRatingFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClinicRatingFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>
          }
          findFirst: {
            args: Prisma.ClinicRatingFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClinicRatingFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>
          }
          findMany: {
            args: Prisma.ClinicRatingFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>[]
          }
          create: {
            args: Prisma.ClinicRatingCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>
          }
          createMany: {
            args: Prisma.ClinicRatingCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ClinicRatingDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>
          }
          update: {
            args: Prisma.ClinicRatingUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>
          }
          deleteMany: {
            args: Prisma.ClinicRatingDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClinicRatingUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClinicRatingUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClinicRatingPayload>
          }
          aggregate: {
            args: Prisma.ClinicRatingAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClinicRating>
          }
          groupBy: {
            args: Prisma.ClinicRatingGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClinicRatingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClinicRatingCountArgs<ExtArgs>,
            result: $Utils.Optional<ClinicRatingCountAggregateOutputType> | number
          }
        }
      }
      Services: {
        payload: Prisma.$ServicesPayload<ExtArgs>
        fields: Prisma.ServicesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServicesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServicesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          findFirst: {
            args: Prisma.ServicesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServicesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          findMany: {
            args: Prisma.ServicesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>[]
          }
          create: {
            args: Prisma.ServicesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          createMany: {
            args: Prisma.ServicesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ServicesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          update: {
            args: Prisma.ServicesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          deleteMany: {
            args: Prisma.ServicesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ServicesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ServicesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ServicesPayload>
          }
          aggregate: {
            args: Prisma.ServicesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateServices>
          }
          groupBy: {
            args: Prisma.ServicesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ServicesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServicesCountArgs<ExtArgs>,
            result: $Utils.Optional<ServicesCountAggregateOutputType> | number
          }
        }
      }
      Speciality: {
        payload: Prisma.$SpecialityPayload<ExtArgs>
        fields: Prisma.SpecialityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SpecialityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SpecialityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>
          }
          findFirst: {
            args: Prisma.SpecialityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SpecialityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>
          }
          findMany: {
            args: Prisma.SpecialityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>[]
          }
          create: {
            args: Prisma.SpecialityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>
          }
          createMany: {
            args: Prisma.SpecialityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SpecialityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>
          }
          update: {
            args: Prisma.SpecialityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>
          }
          deleteMany: {
            args: Prisma.SpecialityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SpecialityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SpecialityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SpecialityPayload>
          }
          aggregate: {
            args: Prisma.SpecialityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSpeciality>
          }
          groupBy: {
            args: Prisma.SpecialityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SpecialityGroupByOutputType>[]
          }
          count: {
            args: Prisma.SpecialityCountArgs<ExtArgs>,
            result: $Utils.Optional<SpecialityCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>,
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      PatientCard: {
        payload: Prisma.$PatientCardPayload<ExtArgs>
        fields: Prisma.PatientCardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientCardFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientCardFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>
          }
          findFirst: {
            args: Prisma.PatientCardFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientCardFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>
          }
          findMany: {
            args: Prisma.PatientCardFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>[]
          }
          create: {
            args: Prisma.PatientCardCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>
          }
          createMany: {
            args: Prisma.PatientCardCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PatientCardDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>
          }
          update: {
            args: Prisma.PatientCardUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>
          }
          deleteMany: {
            args: Prisma.PatientCardDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PatientCardUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PatientCardUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PatientCardPayload>
          }
          aggregate: {
            args: Prisma.PatientCardAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatientCard>
          }
          groupBy: {
            args: Prisma.PatientCardGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientCardGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCardCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientCardCountAggregateOutputType> | number
          }
        }
      }
      Qrcode: {
        payload: Prisma.$QrcodePayload<ExtArgs>
        fields: Prisma.QrcodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QrcodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QrcodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>
          }
          findFirst: {
            args: Prisma.QrcodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QrcodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>
          }
          findMany: {
            args: Prisma.QrcodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>[]
          }
          create: {
            args: Prisma.QrcodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>
          }
          createMany: {
            args: Prisma.QrcodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.QrcodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>
          }
          update: {
            args: Prisma.QrcodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>
          }
          deleteMany: {
            args: Prisma.QrcodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.QrcodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.QrcodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$QrcodePayload>
          }
          aggregate: {
            args: Prisma.QrcodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateQrcode>
          }
          groupBy: {
            args: Prisma.QrcodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<QrcodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.QrcodeCountArgs<ExtArgs>,
            result: $Utils.Optional<QrcodeCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: Prisma.$DoctorPayload<ExtArgs>
        fields: Prisma.DoctorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>,
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      Favorites: {
        payload: Prisma.$FavoritesPayload<ExtArgs>
        fields: Prisma.FavoritesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavoritesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavoritesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>
          }
          findFirst: {
            args: Prisma.FavoritesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavoritesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>
          }
          findMany: {
            args: Prisma.FavoritesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>[]
          }
          create: {
            args: Prisma.FavoritesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>
          }
          createMany: {
            args: Prisma.FavoritesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavoritesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>
          }
          update: {
            args: Prisma.FavoritesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>
          }
          deleteMany: {
            args: Prisma.FavoritesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavoritesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavoritesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavoritesPayload>
          }
          aggregate: {
            args: Prisma.FavoritesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavorites>
          }
          groupBy: {
            args: Prisma.FavoritesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavoritesGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavoritesCountArgs<ExtArgs>,
            result: $Utils.Optional<FavoritesCountAggregateOutputType> | number
          }
        }
      }
      Institution: {
        payload: Prisma.$InstitutionPayload<ExtArgs>
        fields: Prisma.InstitutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstitutionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstitutionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          findFirst: {
            args: Prisma.InstitutionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstitutionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          findMany: {
            args: Prisma.InstitutionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>[]
          }
          create: {
            args: Prisma.InstitutionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          createMany: {
            args: Prisma.InstitutionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InstitutionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          update: {
            args: Prisma.InstitutionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          deleteMany: {
            args: Prisma.InstitutionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InstitutionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InstitutionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InstitutionPayload>
          }
          aggregate: {
            args: Prisma.InstitutionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInstitution>
          }
          groupBy: {
            args: Prisma.InstitutionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InstitutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstitutionCountArgs<ExtArgs>,
            result: $Utils.Optional<InstitutionCountAggregateOutputType> | number
          }
        }
      }
      DoctorInstitution: {
        payload: Prisma.$DoctorInstitutionPayload<ExtArgs>
        fields: Prisma.DoctorInstitutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoctorInstitutionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorInstitutionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>
          }
          findFirst: {
            args: Prisma.DoctorInstitutionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorInstitutionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>
          }
          findMany: {
            args: Prisma.DoctorInstitutionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>[]
          }
          create: {
            args: Prisma.DoctorInstitutionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>
          }
          createMany: {
            args: Prisma.DoctorInstitutionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoctorInstitutionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>
          }
          update: {
            args: Prisma.DoctorInstitutionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>
          }
          deleteMany: {
            args: Prisma.DoctorInstitutionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorInstitutionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoctorInstitutionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoctorInstitutionPayload>
          }
          aggregate: {
            args: Prisma.DoctorInstitutionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctorInstitution>
          }
          groupBy: {
            args: Prisma.DoctorInstitutionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoctorInstitutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorInstitutionCountArgs<ExtArgs>,
            result: $Utils.Optional<DoctorInstitutionCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>,
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      ConsultationType: {
        payload: Prisma.$ConsultationTypePayload<ExtArgs>
        fields: Prisma.ConsultationTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsultationTypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsultationTypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>
          }
          findFirst: {
            args: Prisma.ConsultationTypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsultationTypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>
          }
          findMany: {
            args: Prisma.ConsultationTypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>[]
          }
          create: {
            args: Prisma.ConsultationTypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>
          }
          createMany: {
            args: Prisma.ConsultationTypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ConsultationTypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>
          }
          update: {
            args: Prisma.ConsultationTypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>
          }
          deleteMany: {
            args: Prisma.ConsultationTypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ConsultationTypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ConsultationTypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ConsultationTypePayload>
          }
          aggregate: {
            args: Prisma.ConsultationTypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateConsultationType>
          }
          groupBy: {
            args: Prisma.ConsultationTypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ConsultationTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsultationTypeCountArgs<ExtArgs>,
            result: $Utils.Optional<ConsultationTypeCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      WeeklySchedule: {
        payload: Prisma.$WeeklySchedulePayload<ExtArgs>
        fields: Prisma.WeeklyScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WeeklyScheduleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          findFirst: {
            args: Prisma.WeeklyScheduleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WeeklyScheduleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          findMany: {
            args: Prisma.WeeklyScheduleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>[]
          }
          create: {
            args: Prisma.WeeklyScheduleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          createMany: {
            args: Prisma.WeeklyScheduleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WeeklyScheduleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          update: {
            args: Prisma.WeeklyScheduleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          deleteMany: {
            args: Prisma.WeeklyScheduleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WeeklyScheduleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WeeklyScheduleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WeeklySchedulePayload>
          }
          aggregate: {
            args: Prisma.WeeklyScheduleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWeeklySchedule>
          }
          groupBy: {
            args: Prisma.WeeklyScheduleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WeeklyScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.WeeklyScheduleCountArgs<ExtArgs>,
            result: $Utils.Optional<WeeklyScheduleCountAggregateOutputType> | number
          }
        }
      }
      MedicalHistory: {
        payload: Prisma.$MedicalHistoryPayload<ExtArgs>
        fields: Prisma.MedicalHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>
          }
          findFirst: {
            args: Prisma.MedicalHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>
          }
          findMany: {
            args: Prisma.MedicalHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>[]
          }
          create: {
            args: Prisma.MedicalHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>
          }
          createMany: {
            args: Prisma.MedicalHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MedicalHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>
          }
          update: {
            args: Prisma.MedicalHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>
          }
          deleteMany: {
            args: Prisma.MedicalHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MedicalHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalHistoryPayload>
          }
          aggregate: {
            args: Prisma.MedicalHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedicalHistory>
          }
          groupBy: {
            args: Prisma.MedicalHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MedicalHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<MedicalHistoryCountAggregateOutputType> | number
          }
        }
      }
      PasswordConfirmationCode: {
        payload: Prisma.$PasswordConfirmationCodePayload<ExtArgs>
        fields: Prisma.PasswordConfirmationCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PasswordConfirmationCodeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PasswordConfirmationCodeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>
          }
          findFirst: {
            args: Prisma.PasswordConfirmationCodeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PasswordConfirmationCodeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>
          }
          findMany: {
            args: Prisma.PasswordConfirmationCodeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>[]
          }
          create: {
            args: Prisma.PasswordConfirmationCodeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>
          }
          createMany: {
            args: Prisma.PasswordConfirmationCodeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PasswordConfirmationCodeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>
          }
          update: {
            args: Prisma.PasswordConfirmationCodeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>
          }
          deleteMany: {
            args: Prisma.PasswordConfirmationCodeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PasswordConfirmationCodeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PasswordConfirmationCodeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PasswordConfirmationCodePayload>
          }
          aggregate: {
            args: Prisma.PasswordConfirmationCodeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePasswordConfirmationCode>
          }
          groupBy: {
            args: Prisma.PasswordConfirmationCodeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PasswordConfirmationCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PasswordConfirmationCodeCountArgs<ExtArgs>,
            result: $Utils.Optional<PasswordConfirmationCodeCountAggregateOutputType> | number
          }
        }
      }
      MedicalReport: {
        payload: Prisma.$MedicalReportPayload<ExtArgs>
        fields: Prisma.MedicalReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicalReportFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalReportFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>
          }
          findFirst: {
            args: Prisma.MedicalReportFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalReportFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>
          }
          findMany: {
            args: Prisma.MedicalReportFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>[]
          }
          create: {
            args: Prisma.MedicalReportCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>
          }
          createMany: {
            args: Prisma.MedicalReportCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MedicalReportDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>
          }
          update: {
            args: Prisma.MedicalReportUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>
          }
          deleteMany: {
            args: Prisma.MedicalReportDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalReportUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MedicalReportUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MedicalReportPayload>
          }
          aggregate: {
            args: Prisma.MedicalReportAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedicalReport>
          }
          groupBy: {
            args: Prisma.MedicalReportGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MedicalReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalReportCountArgs<ExtArgs>,
            result: $Utils.Optional<MedicalReportCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    UserPermission: number
    Patient: number
    Doctor: number
    Institution: number
    Admin: number
    Rating: number
    ClinicRating: number
    PasswordConfirmationCode: number
    FCMToken: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    UserPermission?: boolean | UserCountOutputTypeCountUserPermissionArgs
    Patient?: boolean | UserCountOutputTypeCountPatientArgs
    Doctor?: boolean | UserCountOutputTypeCountDoctorArgs
    Institution?: boolean | UserCountOutputTypeCountInstitutionArgs
    Admin?: boolean | UserCountOutputTypeCountAdminArgs
    Rating?: boolean | UserCountOutputTypeCountRatingArgs
    ClinicRating?: boolean | UserCountOutputTypeCountClinicRatingArgs
    PasswordConfirmationCode?: boolean | UserCountOutputTypeCountPasswordConfirmationCodeArgs
    FCMToken?: boolean | UserCountOutputTypeCountFCMTokenArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountInstitutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdminArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountClinicRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClinicRatingWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPasswordConfirmationCodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PasswordConfirmationCodeWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFCMTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FCMTokenWhereInput
  }



  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    Appointment: number
    Notification: number
    Qrcode: number
    Favorites: number
    medicalReport: number
    patientCard: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Appointment?: boolean | PatientCountOutputTypeCountAppointmentArgs
    Notification?: boolean | PatientCountOutputTypeCountNotificationArgs
    Qrcode?: boolean | PatientCountOutputTypeCountQrcodeArgs
    Favorites?: boolean | PatientCountOutputTypeCountFavoritesArgs
    medicalReport?: boolean | PatientCountOutputTypeCountMedicalReportArgs
    patientCard?: boolean | PatientCountOutputTypeCountPatientCardArgs
  }

  // Custom InputTypes

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountQrcodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QrcodeWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoritesWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalReportWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPatientCardArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientCardWhereInput
  }



  /**
   * Count Type DoctorCountOutputType
   */

  export type DoctorCountOutputType = {
    WeeklySchedule: number
    Consultation: number
    rating: number
    institution: number
    Notification: number
    Favorites: number
    medicalReport: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    WeeklySchedule?: boolean | DoctorCountOutputTypeCountWeeklyScheduleArgs
    Consultation?: boolean | DoctorCountOutputTypeCountConsultationArgs
    rating?: boolean | DoctorCountOutputTypeCountRatingArgs
    institution?: boolean | DoctorCountOutputTypeCountInstitutionArgs
    Notification?: boolean | DoctorCountOutputTypeCountNotificationArgs
    Favorites?: boolean | DoctorCountOutputTypeCountFavoritesArgs
    medicalReport?: boolean | DoctorCountOutputTypeCountMedicalReportArgs
  }

  // Custom InputTypes

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountWeeklyScheduleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountConsultationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountInstitutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorInstitutionWhereInput
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoritesWhereInput
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountMedicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalReportWhereInput
  }



  /**
   * Count Type InstitutionCountOutputType
   */

  export type InstitutionCountOutputType = {
    Admin: number
    Consultation: number
    service: number
    WeeklySchedule: number
    Doctor: number
    ClinicRating: number
    Notification: number
    Favorites: number
    medicalReport: number
  }

  export type InstitutionCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Admin?: boolean | InstitutionCountOutputTypeCountAdminArgs
    Consultation?: boolean | InstitutionCountOutputTypeCountConsultationArgs
    service?: boolean | InstitutionCountOutputTypeCountServiceArgs
    WeeklySchedule?: boolean | InstitutionCountOutputTypeCountWeeklyScheduleArgs
    Doctor?: boolean | InstitutionCountOutputTypeCountDoctorArgs
    ClinicRating?: boolean | InstitutionCountOutputTypeCountClinicRatingArgs
    Notification?: boolean | InstitutionCountOutputTypeCountNotificationArgs
    Favorites?: boolean | InstitutionCountOutputTypeCountFavoritesArgs
    medicalReport?: boolean | InstitutionCountOutputTypeCountMedicalReportArgs
  }

  // Custom InputTypes

  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstitutionCountOutputType
     */
    select?: InstitutionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountAdminArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountConsultationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountServiceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServicesWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountWeeklyScheduleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountDoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorInstitutionWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountClinicRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClinicRatingWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountFavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoritesWhereInput
  }


  /**
   * InstitutionCountOutputType without action
   */
  export type InstitutionCountOutputTypeCountMedicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalReportWhereInput
  }



  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    medicalHistories: number
    medicalReport: number
    Rating: number
    Notification: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    medicalHistories?: boolean | AppointmentCountOutputTypeCountMedicalHistoriesArgs
    medicalReport?: boolean | AppointmentCountOutputTypeCountMedicalReportArgs
    Rating?: boolean | AppointmentCountOutputTypeCountRatingArgs
    Notification?: boolean | AppointmentCountOutputTypeCountNotificationArgs
  }

  // Custom InputTypes

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountMedicalHistoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalHistoryWhereInput
  }


  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountMedicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalReportWhereInput
  }


  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
  }


  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }



  /**
   * Count Type ConsultationTypeCountOutputType
   */

  export type ConsultationTypeCountOutputType = {
    Consultation: number
  }

  export type ConsultationTypeCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Consultation?: boolean | ConsultationTypeCountOutputTypeCountConsultationArgs
  }

  // Custom InputTypes

  /**
   * ConsultationTypeCountOutputType without action
   */
  export type ConsultationTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationTypeCountOutputType
     */
    select?: ConsultationTypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ConsultationTypeCountOutputType without action
   */
  export type ConsultationTypeCountOutputTypeCountConsultationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }



  /**
   * Models
   */

  /**
   * Model FCMToken
   */

  export type AggregateFCMToken = {
    _count: FCMTokenCountAggregateOutputType | null
    _min: FCMTokenMinAggregateOutputType | null
    _max: FCMTokenMaxAggregateOutputType | null
  }

  export type FCMTokenMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
  }

  export type FCMTokenMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
  }

  export type FCMTokenCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    _all: number
  }


  export type FCMTokenMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
  }

  export type FCMTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
  }

  export type FCMTokenCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    _all?: true
  }

  export type FCMTokenAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FCMToken to aggregate.
     */
    where?: FCMTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FCMTokens to fetch.
     */
    orderBy?: FCMTokenOrderByWithRelationInput | FCMTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FCMTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FCMTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FCMTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FCMTokens
    **/
    _count?: true | FCMTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FCMTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FCMTokenMaxAggregateInputType
  }

  export type GetFCMTokenAggregateType<T extends FCMTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateFCMToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFCMToken[P]>
      : GetScalarType<T[P], AggregateFCMToken[P]>
  }




  export type FCMTokenGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FCMTokenWhereInput
    orderBy?: FCMTokenOrderByWithAggregationInput | FCMTokenOrderByWithAggregationInput[]
    by: FCMTokenScalarFieldEnum[] | FCMTokenScalarFieldEnum
    having?: FCMTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FCMTokenCountAggregateInputType | true
    _min?: FCMTokenMinAggregateInputType
    _max?: FCMTokenMaxAggregateInputType
  }

  export type FCMTokenGroupByOutputType = {
    id: string
    userId: string
    token: string
    _count: FCMTokenCountAggregateOutputType | null
    _min: FCMTokenMinAggregateOutputType | null
    _max: FCMTokenMaxAggregateOutputType | null
  }

  type GetFCMTokenGroupByPayload<T extends FCMTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FCMTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FCMTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FCMTokenGroupByOutputType[P]>
            : GetScalarType<T[P], FCMTokenGroupByOutputType[P]>
        }
      >
    >


  export type FCMTokenSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fCMToken"]>

  export type FCMTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
  }

  export type FCMTokenInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $FCMTokenPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "FCMToken"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      token: string
    }, ExtArgs["result"]["fCMToken"]>
    composites: {}
  }


  type FCMTokenGetPayload<S extends boolean | null | undefined | FCMTokenDefaultArgs> = $Result.GetResult<Prisma.$FCMTokenPayload, S>

  type FCMTokenCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FCMTokenFindManyArgs, 'select' | 'include'> & {
      select?: FCMTokenCountAggregateInputType | true
    }

  export interface FCMTokenDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FCMToken'], meta: { name: 'FCMToken' } }
    /**
     * Find zero or one FCMToken that matches the filter.
     * @param {FCMTokenFindUniqueArgs} args - Arguments to find a FCMToken
     * @example
     * // Get one FCMToken
     * const fCMToken = await prisma.fCMToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FCMTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FCMTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FCMToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FCMTokenFindUniqueOrThrowArgs} args - Arguments to find a FCMToken
     * @example
     * // Get one FCMToken
     * const fCMToken = await prisma.fCMToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FCMTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FCMTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FCMToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenFindFirstArgs} args - Arguments to find a FCMToken
     * @example
     * // Get one FCMToken
     * const fCMToken = await prisma.fCMToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FCMTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FCMTokenFindFirstArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FCMToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenFindFirstOrThrowArgs} args - Arguments to find a FCMToken
     * @example
     * // Get one FCMToken
     * const fCMToken = await prisma.fCMToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FCMTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FCMTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FCMTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FCMTokens
     * const fCMTokens = await prisma.fCMToken.findMany()
     * 
     * // Get first 10 FCMTokens
     * const fCMTokens = await prisma.fCMToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fCMTokenWithIdOnly = await prisma.fCMToken.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FCMTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FCMTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FCMToken.
     * @param {FCMTokenCreateArgs} args - Arguments to create a FCMToken.
     * @example
     * // Create one FCMToken
     * const FCMToken = await prisma.fCMToken.create({
     *   data: {
     *     // ... data to create a FCMToken
     *   }
     * })
     * 
    **/
    create<T extends FCMTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FCMTokenCreateArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FCMTokens.
     *     @param {FCMTokenCreateManyArgs} args - Arguments to create many FCMTokens.
     *     @example
     *     // Create many FCMTokens
     *     const fCMToken = await prisma.fCMToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FCMTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FCMTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FCMToken.
     * @param {FCMTokenDeleteArgs} args - Arguments to delete one FCMToken.
     * @example
     * // Delete one FCMToken
     * const FCMToken = await prisma.fCMToken.delete({
     *   where: {
     *     // ... filter to delete one FCMToken
     *   }
     * })
     * 
    **/
    delete<T extends FCMTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FCMTokenDeleteArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FCMToken.
     * @param {FCMTokenUpdateArgs} args - Arguments to update one FCMToken.
     * @example
     * // Update one FCMToken
     * const fCMToken = await prisma.fCMToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FCMTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FCMTokenUpdateArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FCMTokens.
     * @param {FCMTokenDeleteManyArgs} args - Arguments to filter FCMTokens to delete.
     * @example
     * // Delete a few FCMTokens
     * const { count } = await prisma.fCMToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FCMTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FCMTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FCMTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FCMTokens
     * const fCMToken = await prisma.fCMToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FCMTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FCMTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FCMToken.
     * @param {FCMTokenUpsertArgs} args - Arguments to update or create a FCMToken.
     * @example
     * // Update or create a FCMToken
     * const fCMToken = await prisma.fCMToken.upsert({
     *   create: {
     *     // ... data to create a FCMToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FCMToken we want to update
     *   }
     * })
    **/
    upsert<T extends FCMTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FCMTokenUpsertArgs<ExtArgs>>
    ): Prisma__FCMTokenClient<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FCMTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenCountArgs} args - Arguments to filter FCMTokens to count.
     * @example
     * // Count the number of FCMTokens
     * const count = await prisma.fCMToken.count({
     *   where: {
     *     // ... the filter for the FCMTokens we want to count
     *   }
     * })
    **/
    count<T extends FCMTokenCountArgs>(
      args?: Subset<T, FCMTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FCMTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FCMToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FCMTokenAggregateArgs>(args: Subset<T, FCMTokenAggregateArgs>): Prisma.PrismaPromise<GetFCMTokenAggregateType<T>>

    /**
     * Group by FCMToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FCMTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FCMTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FCMTokenGroupByArgs['orderBy'] }
        : { orderBy?: FCMTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FCMTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFCMTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FCMToken model
   */
  readonly fields: FCMTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FCMToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FCMTokenClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FCMToken model
   */ 
  interface FCMTokenFieldRefs {
    readonly id: FieldRef<"FCMToken", 'String'>
    readonly userId: FieldRef<"FCMToken", 'String'>
    readonly token: FieldRef<"FCMToken", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FCMToken findUnique
   */
  export type FCMTokenFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * Filter, which FCMToken to fetch.
     */
    where: FCMTokenWhereUniqueInput
  }


  /**
   * FCMToken findUniqueOrThrow
   */
  export type FCMTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * Filter, which FCMToken to fetch.
     */
    where: FCMTokenWhereUniqueInput
  }


  /**
   * FCMToken findFirst
   */
  export type FCMTokenFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * Filter, which FCMToken to fetch.
     */
    where?: FCMTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FCMTokens to fetch.
     */
    orderBy?: FCMTokenOrderByWithRelationInput | FCMTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FCMTokens.
     */
    cursor?: FCMTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FCMTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FCMTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FCMTokens.
     */
    distinct?: FCMTokenScalarFieldEnum | FCMTokenScalarFieldEnum[]
  }


  /**
   * FCMToken findFirstOrThrow
   */
  export type FCMTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * Filter, which FCMToken to fetch.
     */
    where?: FCMTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FCMTokens to fetch.
     */
    orderBy?: FCMTokenOrderByWithRelationInput | FCMTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FCMTokens.
     */
    cursor?: FCMTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FCMTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FCMTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FCMTokens.
     */
    distinct?: FCMTokenScalarFieldEnum | FCMTokenScalarFieldEnum[]
  }


  /**
   * FCMToken findMany
   */
  export type FCMTokenFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * Filter, which FCMTokens to fetch.
     */
    where?: FCMTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FCMTokens to fetch.
     */
    orderBy?: FCMTokenOrderByWithRelationInput | FCMTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FCMTokens.
     */
    cursor?: FCMTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FCMTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FCMTokens.
     */
    skip?: number
    distinct?: FCMTokenScalarFieldEnum | FCMTokenScalarFieldEnum[]
  }


  /**
   * FCMToken create
   */
  export type FCMTokenCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * The data needed to create a FCMToken.
     */
    data: XOR<FCMTokenCreateInput, FCMTokenUncheckedCreateInput>
  }


  /**
   * FCMToken createMany
   */
  export type FCMTokenCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FCMTokens.
     */
    data: FCMTokenCreateManyInput | FCMTokenCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FCMToken update
   */
  export type FCMTokenUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * The data needed to update a FCMToken.
     */
    data: XOR<FCMTokenUpdateInput, FCMTokenUncheckedUpdateInput>
    /**
     * Choose, which FCMToken to update.
     */
    where: FCMTokenWhereUniqueInput
  }


  /**
   * FCMToken updateMany
   */
  export type FCMTokenUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FCMTokens.
     */
    data: XOR<FCMTokenUpdateManyMutationInput, FCMTokenUncheckedUpdateManyInput>
    /**
     * Filter which FCMTokens to update
     */
    where?: FCMTokenWhereInput
  }


  /**
   * FCMToken upsert
   */
  export type FCMTokenUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * The filter to search for the FCMToken to update in case it exists.
     */
    where: FCMTokenWhereUniqueInput
    /**
     * In case the FCMToken found by the `where` argument doesn't exist, create a new FCMToken with this data.
     */
    create: XOR<FCMTokenCreateInput, FCMTokenUncheckedCreateInput>
    /**
     * In case the FCMToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FCMTokenUpdateInput, FCMTokenUncheckedUpdateInput>
  }


  /**
   * FCMToken delete
   */
  export type FCMTokenDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    /**
     * Filter which FCMToken to delete.
     */
    where: FCMTokenWhereUniqueInput
  }


  /**
   * FCMToken deleteMany
   */
  export type FCMTokenDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which FCMTokens to delete
     */
    where?: FCMTokenWhereInput
  }


  /**
   * FCMToken without action
   */
  export type FCMTokenDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    nationality: string | null
    Role: $Enums.RoleType | null
    nif: string | null
    phone: string | null
    birthday: Date | null
    FatherName: string | null
    MotherName: string | null
    type: string | null
    gender: string | null
    BI: string | null
    neigbhod: string | null
    city: string | null
    municipality: string | null
    avatar: string | null
    addressComplement: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    nationality: string | null
    Role: $Enums.RoleType | null
    nif: string | null
    phone: string | null
    birthday: Date | null
    FatherName: string | null
    MotherName: string | null
    type: string | null
    gender: string | null
    BI: string | null
    neigbhod: string | null
    city: string | null
    municipality: string | null
    avatar: string | null
    addressComplement: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    nationality: number
    Role: number
    nif: number
    phone: number
    birthday: number
    FatherName: number
    MotherName: number
    type: number
    gender: number
    BI: number
    neigbhod: number
    city: number
    municipality: number
    avatar: number
    addressComplement: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    nationality?: true
    Role?: true
    nif?: true
    phone?: true
    birthday?: true
    FatherName?: true
    MotherName?: true
    type?: true
    gender?: true
    BI?: true
    neigbhod?: true
    city?: true
    municipality?: true
    avatar?: true
    addressComplement?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    nationality?: true
    Role?: true
    nif?: true
    phone?: true
    birthday?: true
    FatherName?: true
    MotherName?: true
    type?: true
    gender?: true
    BI?: true
    neigbhod?: true
    city?: true
    municipality?: true
    avatar?: true
    addressComplement?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    nationality?: true
    Role?: true
    nif?: true
    phone?: true
    birthday?: true
    FatherName?: true
    MotherName?: true
    type?: true
    gender?: true
    BI?: true
    neigbhod?: true
    city?: true
    municipality?: true
    avatar?: true
    addressComplement?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    nationality: string | null
    Role: $Enums.RoleType
    nif: string | null
    phone: string
    birthday: Date | null
    FatherName: string | null
    MotherName: string | null
    type: string | null
    gender: string | null
    BI: string | null
    neigbhod: string
    city: string
    municipality: string | null
    avatar: string | null
    addressComplement: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    nationality?: boolean
    Role?: boolean
    nif?: boolean
    phone?: boolean
    birthday?: boolean
    FatherName?: boolean
    MotherName?: boolean
    type?: boolean
    gender?: boolean
    BI?: boolean
    neigbhod?: boolean
    city?: boolean
    municipality?: boolean
    avatar?: boolean
    addressComplement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    UserPermission?: boolean | User$UserPermissionArgs<ExtArgs>
    Patient?: boolean | User$PatientArgs<ExtArgs>
    Doctor?: boolean | User$DoctorArgs<ExtArgs>
    Institution?: boolean | User$InstitutionArgs<ExtArgs>
    Admin?: boolean | User$AdminArgs<ExtArgs>
    Rating?: boolean | User$RatingArgs<ExtArgs>
    ClinicRating?: boolean | User$ClinicRatingArgs<ExtArgs>
    PasswordConfirmationCode?: boolean | User$PasswordConfirmationCodeArgs<ExtArgs>
    FCMToken?: boolean | User$FCMTokenArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    nationality?: boolean
    Role?: boolean
    nif?: boolean
    phone?: boolean
    birthday?: boolean
    FatherName?: boolean
    MotherName?: boolean
    type?: boolean
    gender?: boolean
    BI?: boolean
    neigbhod?: boolean
    city?: boolean
    municipality?: boolean
    avatar?: boolean
    addressComplement?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    UserPermission?: boolean | User$UserPermissionArgs<ExtArgs>
    Patient?: boolean | User$PatientArgs<ExtArgs>
    Doctor?: boolean | User$DoctorArgs<ExtArgs>
    Institution?: boolean | User$InstitutionArgs<ExtArgs>
    Admin?: boolean | User$AdminArgs<ExtArgs>
    Rating?: boolean | User$RatingArgs<ExtArgs>
    ClinicRating?: boolean | User$ClinicRatingArgs<ExtArgs>
    PasswordConfirmationCode?: boolean | User$PasswordConfirmationCodeArgs<ExtArgs>
    FCMToken?: boolean | User$FCMTokenArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      UserPermission: Prisma.$UserPermissionPayload<ExtArgs>[]
      Patient: Prisma.$PatientPayload<ExtArgs>[]
      Doctor: Prisma.$DoctorPayload<ExtArgs>[]
      Institution: Prisma.$InstitutionPayload<ExtArgs>[]
      Admin: Prisma.$AdminPayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
      ClinicRating: Prisma.$ClinicRatingPayload<ExtArgs>[]
      PasswordConfirmationCode: Prisma.$PasswordConfirmationCodePayload<ExtArgs>[]
      FCMToken: Prisma.$FCMTokenPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      email: string
      password: string
      nationality: string | null
      Role: $Enums.RoleType
      nif: string | null
      phone: string
      birthday: Date | null
      FatherName: string | null
      MotherName: string | null
      type: string | null
      gender: string | null
      BI: string | null
      neigbhod: string
      city: string
      municipality: string | null
      avatar: string | null
      addressComplement: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    UserPermission<T extends User$UserPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$UserPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Patient<T extends User$PatientArgs<ExtArgs> = {}>(args?: Subset<T, User$PatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany'> | Null>;

    Doctor<T extends User$DoctorArgs<ExtArgs> = {}>(args?: Subset<T, User$DoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findMany'> | Null>;

    Institution<T extends User$InstitutionArgs<ExtArgs> = {}>(args?: Subset<T, User$InstitutionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Admin<T extends User$AdminArgs<ExtArgs> = {}>(args?: Subset<T, User$AdminArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'> | Null>;

    Rating<T extends User$RatingArgs<ExtArgs> = {}>(args?: Subset<T, User$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    ClinicRating<T extends User$ClinicRatingArgs<ExtArgs> = {}>(args?: Subset<T, User$ClinicRatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    PasswordConfirmationCode<T extends User$PasswordConfirmationCodeArgs<ExtArgs> = {}>(args?: Subset<T, User$PasswordConfirmationCodeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'findMany'> | Null>;

    FCMToken<T extends User$FCMTokenArgs<ExtArgs> = {}>(args?: Subset<T, User$FCMTokenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FCMTokenPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly nationality: FieldRef<"User", 'String'>
    readonly Role: FieldRef<"User", 'RoleType'>
    readonly nif: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly birthday: FieldRef<"User", 'DateTime'>
    readonly FatherName: FieldRef<"User", 'String'>
    readonly MotherName: FieldRef<"User", 'String'>
    readonly type: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'String'>
    readonly BI: FieldRef<"User", 'String'>
    readonly neigbhod: FieldRef<"User", 'String'>
    readonly city: FieldRef<"User", 'String'>
    readonly municipality: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly addressComplement: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly deletedAt: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.UserPermission
   */
  export type User$UserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * User.Patient
   */
  export type User$PatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * User.Doctor
   */
  export type User$DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * User.Institution
   */
  export type User$InstitutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    cursor?: InstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }


  /**
   * User.Admin
   */
  export type User$AdminArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    cursor?: AdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * User.Rating
   */
  export type User$RatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * User.ClinicRating
   */
  export type User$ClinicRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    where?: ClinicRatingWhereInput
    orderBy?: ClinicRatingOrderByWithRelationInput | ClinicRatingOrderByWithRelationInput[]
    cursor?: ClinicRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicRatingScalarFieldEnum | ClinicRatingScalarFieldEnum[]
  }


  /**
   * User.PasswordConfirmationCode
   */
  export type User$PasswordConfirmationCodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    where?: PasswordConfirmationCodeWhereInput
    orderBy?: PasswordConfirmationCodeOrderByWithRelationInput | PasswordConfirmationCodeOrderByWithRelationInput[]
    cursor?: PasswordConfirmationCodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PasswordConfirmationCodeScalarFieldEnum | PasswordConfirmationCodeScalarFieldEnum[]
  }


  /**
   * User.FCMToken
   */
  export type User$FCMTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FCMToken
     */
    select?: FCMTokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FCMTokenInclude<ExtArgs> | null
    where?: FCMTokenWhereInput
    orderBy?: FCMTokenOrderByWithRelationInput | FCMTokenOrderByWithRelationInput[]
    cursor?: FCMTokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FCMTokenScalarFieldEnum | FCMTokenScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Rating
   */

  export type AggregateRating = {
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  export type RatingAvgAggregateOutputType = {
    rate: number | null
  }

  export type RatingSumAggregateOutputType = {
    rate: number | null
  }

  export type RatingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    doctorId: string | null
    appoitmentID: string | null
    rate: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type RatingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    doctorId: string | null
    appoitmentID: string | null
    rate: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type RatingCountAggregateOutputType = {
    id: number
    userId: number
    doctorId: number
    appoitmentID: number
    rate: number
    comment: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type RatingAvgAggregateInputType = {
    rate?: true
  }

  export type RatingSumAggregateInputType = {
    rate?: true
  }

  export type RatingMinAggregateInputType = {
    id?: true
    userId?: true
    doctorId?: true
    appoitmentID?: true
    rate?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type RatingMaxAggregateInputType = {
    id?: true
    userId?: true
    doctorId?: true
    appoitmentID?: true
    rate?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type RatingCountAggregateInputType = {
    id?: true
    userId?: true
    doctorId?: true
    appoitmentID?: true
    rate?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type RatingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rating to aggregate.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ratings
    **/
    _count?: true | RatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RatingMaxAggregateInputType
  }

  export type GetRatingAggregateType<T extends RatingAggregateArgs> = {
        [P in keyof T & keyof AggregateRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRating[P]>
      : GetScalarType<T[P], AggregateRating[P]>
  }




  export type RatingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithAggregationInput | RatingOrderByWithAggregationInput[]
    by: RatingScalarFieldEnum[] | RatingScalarFieldEnum
    having?: RatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RatingCountAggregateInputType | true
    _avg?: RatingAvgAggregateInputType
    _sum?: RatingSumAggregateInputType
    _min?: RatingMinAggregateInputType
    _max?: RatingMaxAggregateInputType
  }

  export type RatingGroupByOutputType = {
    id: string
    userId: string
    doctorId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: RatingCountAggregateOutputType | null
    _avg: RatingAvgAggregateOutputType | null
    _sum: RatingSumAggregateOutputType | null
    _min: RatingMinAggregateOutputType | null
    _max: RatingMaxAggregateOutputType | null
  }

  type GetRatingGroupByPayload<T extends RatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RatingGroupByOutputType[P]>
            : GetScalarType<T[P], RatingGroupByOutputType[P]>
        }
      >
    >


  export type RatingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    doctorId?: boolean
    appoitmentID?: boolean
    rate?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    appoitment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rating"]>

  export type RatingSelectScalar = {
    id?: boolean
    userId?: boolean
    doctorId?: boolean
    appoitmentID?: boolean
    rate?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type RatingInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    appoitment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }


  export type $RatingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Rating"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      appoitment: Prisma.$AppointmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      doctorId: string
      appoitmentID: string
      rate: number
      comment: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["rating"]>
    composites: {}
  }


  type RatingGetPayload<S extends boolean | null | undefined | RatingDefaultArgs> = $Result.GetResult<Prisma.$RatingPayload, S>

  type RatingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RatingFindManyArgs, 'select' | 'include'> & {
      select?: RatingCountAggregateInputType | true
    }

  export interface RatingDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rating'], meta: { name: 'Rating' } }
    /**
     * Find zero or one Rating that matches the filter.
     * @param {RatingFindUniqueArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RatingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RatingFindUniqueArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Rating that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RatingFindUniqueOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RatingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Rating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RatingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Rating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindFirstOrThrowArgs} args - Arguments to find a Rating
     * @example
     * // Get one Rating
     * const rating = await prisma.rating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RatingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ratings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ratings
     * const ratings = await prisma.rating.findMany()
     * 
     * // Get first 10 Ratings
     * const ratings = await prisma.rating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ratingWithIdOnly = await prisma.rating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RatingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Rating.
     * @param {RatingCreateArgs} args - Arguments to create a Rating.
     * @example
     * // Create one Rating
     * const Rating = await prisma.rating.create({
     *   data: {
     *     // ... data to create a Rating
     *   }
     * })
     * 
    **/
    create<T extends RatingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingCreateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ratings.
     *     @param {RatingCreateManyArgs} args - Arguments to create many Ratings.
     *     @example
     *     // Create many Ratings
     *     const rating = await prisma.rating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RatingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Rating.
     * @param {RatingDeleteArgs} args - Arguments to delete one Rating.
     * @example
     * // Delete one Rating
     * const Rating = await prisma.rating.delete({
     *   where: {
     *     // ... filter to delete one Rating
     *   }
     * })
     * 
    **/
    delete<T extends RatingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RatingDeleteArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Rating.
     * @param {RatingUpdateArgs} args - Arguments to update one Rating.
     * @example
     * // Update one Rating
     * const rating = await prisma.rating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RatingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ratings.
     * @param {RatingDeleteManyArgs} args - Arguments to filter Ratings to delete.
     * @example
     * // Delete a few Ratings
     * const { count } = await prisma.rating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RatingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RatingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ratings
     * const rating = await prisma.rating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RatingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rating.
     * @param {RatingUpsertArgs} args - Arguments to update or create a Rating.
     * @example
     * // Update or create a Rating
     * const rating = await prisma.rating.upsert({
     *   create: {
     *     // ... data to create a Rating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rating we want to update
     *   }
     * })
    **/
    upsert<T extends RatingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RatingUpsertArgs<ExtArgs>>
    ): Prisma__RatingClient<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ratings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingCountArgs} args - Arguments to filter Ratings to count.
     * @example
     * // Count the number of Ratings
     * const count = await prisma.rating.count({
     *   where: {
     *     // ... the filter for the Ratings we want to count
     *   }
     * })
    **/
    count<T extends RatingCountArgs>(
      args?: Subset<T, RatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RatingAggregateArgs>(args: Subset<T, RatingAggregateArgs>): Prisma.PrismaPromise<GetRatingAggregateType<T>>

    /**
     * Group by Rating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RatingGroupByArgs['orderBy'] }
        : { orderBy?: RatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rating model
   */
  readonly fields: RatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RatingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    appoitment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Rating model
   */ 
  interface RatingFieldRefs {
    readonly id: FieldRef<"Rating", 'String'>
    readonly userId: FieldRef<"Rating", 'String'>
    readonly doctorId: FieldRef<"Rating", 'String'>
    readonly appoitmentID: FieldRef<"Rating", 'String'>
    readonly rate: FieldRef<"Rating", 'Int'>
    readonly comment: FieldRef<"Rating", 'String'>
    readonly createdAt: FieldRef<"Rating", 'DateTime'>
    readonly updatedAt: FieldRef<"Rating", 'DateTime'>
    readonly deletedAt: FieldRef<"Rating", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Rating findUnique
   */
  export type RatingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating findUniqueOrThrow
   */
  export type RatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating findFirst
   */
  export type RatingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating findFirstOrThrow
   */
  export type RatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Rating to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ratings.
     */
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating findMany
   */
  export type RatingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter, which Ratings to fetch.
     */
    where?: RatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ratings to fetch.
     */
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ratings.
     */
    cursor?: RatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ratings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ratings.
     */
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Rating create
   */
  export type RatingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to create a Rating.
     */
    data: XOR<RatingCreateInput, RatingUncheckedCreateInput>
  }


  /**
   * Rating createMany
   */
  export type RatingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ratings.
     */
    data: RatingCreateManyInput | RatingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Rating update
   */
  export type RatingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The data needed to update a Rating.
     */
    data: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
    /**
     * Choose, which Rating to update.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating updateMany
   */
  export type RatingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ratings.
     */
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyInput>
    /**
     * Filter which Ratings to update
     */
    where?: RatingWhereInput
  }


  /**
   * Rating upsert
   */
  export type RatingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * The filter to search for the Rating to update in case it exists.
     */
    where: RatingWhereUniqueInput
    /**
     * In case the Rating found by the `where` argument doesn't exist, create a new Rating with this data.
     */
    create: XOR<RatingCreateInput, RatingUncheckedCreateInput>
    /**
     * In case the Rating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RatingUpdateInput, RatingUncheckedUpdateInput>
  }


  /**
   * Rating delete
   */
  export type RatingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    /**
     * Filter which Rating to delete.
     */
    where: RatingWhereUniqueInput
  }


  /**
   * Rating deleteMany
   */
  export type RatingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ratings to delete
     */
    where?: RatingWhereInput
  }


  /**
   * Rating without action
   */
  export type RatingDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
  }



  /**
   * Model ClinicRating
   */

  export type AggregateClinicRating = {
    _count: ClinicRatingCountAggregateOutputType | null
    _avg: ClinicRatingAvgAggregateOutputType | null
    _sum: ClinicRatingSumAggregateOutputType | null
    _min: ClinicRatingMinAggregateOutputType | null
    _max: ClinicRatingMaxAggregateOutputType | null
  }

  export type ClinicRatingAvgAggregateOutputType = {
    rate: number | null
  }

  export type ClinicRatingSumAggregateOutputType = {
    rate: number | null
  }

  export type ClinicRatingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clinicId: string | null
    rate: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type ClinicRatingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clinicId: string | null
    rate: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type ClinicRatingCountAggregateOutputType = {
    id: number
    userId: number
    clinicId: number
    rate: number
    comment: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ClinicRatingAvgAggregateInputType = {
    rate?: true
  }

  export type ClinicRatingSumAggregateInputType = {
    rate?: true
  }

  export type ClinicRatingMinAggregateInputType = {
    id?: true
    userId?: true
    clinicId?: true
    rate?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ClinicRatingMaxAggregateInputType = {
    id?: true
    userId?: true
    clinicId?: true
    rate?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ClinicRatingCountAggregateInputType = {
    id?: true
    userId?: true
    clinicId?: true
    rate?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ClinicRatingAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicRating to aggregate.
     */
    where?: ClinicRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicRatings to fetch.
     */
    orderBy?: ClinicRatingOrderByWithRelationInput | ClinicRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClinicRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClinicRatings
    **/
    _count?: true | ClinicRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClinicRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClinicRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClinicRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClinicRatingMaxAggregateInputType
  }

  export type GetClinicRatingAggregateType<T extends ClinicRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateClinicRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClinicRating[P]>
      : GetScalarType<T[P], AggregateClinicRating[P]>
  }




  export type ClinicRatingGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ClinicRatingWhereInput
    orderBy?: ClinicRatingOrderByWithAggregationInput | ClinicRatingOrderByWithAggregationInput[]
    by: ClinicRatingScalarFieldEnum[] | ClinicRatingScalarFieldEnum
    having?: ClinicRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClinicRatingCountAggregateInputType | true
    _avg?: ClinicRatingAvgAggregateInputType
    _sum?: ClinicRatingSumAggregateInputType
    _min?: ClinicRatingMinAggregateInputType
    _max?: ClinicRatingMaxAggregateInputType
  }

  export type ClinicRatingGroupByOutputType = {
    id: string
    userId: string
    clinicId: string
    rate: number
    comment: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: ClinicRatingCountAggregateOutputType | null
    _avg: ClinicRatingAvgAggregateOutputType | null
    _sum: ClinicRatingSumAggregateOutputType | null
    _min: ClinicRatingMinAggregateOutputType | null
    _max: ClinicRatingMaxAggregateOutputType | null
  }

  type GetClinicRatingGroupByPayload<T extends ClinicRatingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClinicRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClinicRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClinicRatingGroupByOutputType[P]>
            : GetScalarType<T[P], ClinicRatingGroupByOutputType[P]>
        }
      >
    >


  export type ClinicRatingSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clinicId?: boolean
    rate?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clinicRating"]>

  export type ClinicRatingSelectScalar = {
    id?: boolean
    userId?: boolean
    clinicId?: boolean
    rate?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ClinicRatingInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ClinicRatingPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ClinicRating"
    objects: {
      institution: Prisma.$InstitutionPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      clinicId: string
      rate: number
      comment: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["clinicRating"]>
    composites: {}
  }


  type ClinicRatingGetPayload<S extends boolean | null | undefined | ClinicRatingDefaultArgs> = $Result.GetResult<Prisma.$ClinicRatingPayload, S>

  type ClinicRatingCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ClinicRatingFindManyArgs, 'select' | 'include'> & {
      select?: ClinicRatingCountAggregateInputType | true
    }

  export interface ClinicRatingDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClinicRating'], meta: { name: 'ClinicRating' } }
    /**
     * Find zero or one ClinicRating that matches the filter.
     * @param {ClinicRatingFindUniqueArgs} args - Arguments to find a ClinicRating
     * @example
     * // Get one ClinicRating
     * const clinicRating = await prisma.clinicRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClinicRatingFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicRatingFindUniqueArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ClinicRating that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ClinicRatingFindUniqueOrThrowArgs} args - Arguments to find a ClinicRating
     * @example
     * // Get one ClinicRating
     * const clinicRating = await prisma.clinicRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClinicRatingFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicRatingFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ClinicRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingFindFirstArgs} args - Arguments to find a ClinicRating
     * @example
     * // Get one ClinicRating
     * const clinicRating = await prisma.clinicRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClinicRatingFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicRatingFindFirstArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ClinicRating that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingFindFirstOrThrowArgs} args - Arguments to find a ClinicRating
     * @example
     * // Get one ClinicRating
     * const clinicRating = await prisma.clinicRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClinicRatingFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicRatingFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ClinicRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClinicRatings
     * const clinicRatings = await prisma.clinicRating.findMany()
     * 
     * // Get first 10 ClinicRatings
     * const clinicRatings = await prisma.clinicRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clinicRatingWithIdOnly = await prisma.clinicRating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClinicRatingFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicRatingFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ClinicRating.
     * @param {ClinicRatingCreateArgs} args - Arguments to create a ClinicRating.
     * @example
     * // Create one ClinicRating
     * const ClinicRating = await prisma.clinicRating.create({
     *   data: {
     *     // ... data to create a ClinicRating
     *   }
     * })
     * 
    **/
    create<T extends ClinicRatingCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicRatingCreateArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ClinicRatings.
     *     @param {ClinicRatingCreateManyArgs} args - Arguments to create many ClinicRatings.
     *     @example
     *     // Create many ClinicRatings
     *     const clinicRating = await prisma.clinicRating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClinicRatingCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicRatingCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ClinicRating.
     * @param {ClinicRatingDeleteArgs} args - Arguments to delete one ClinicRating.
     * @example
     * // Delete one ClinicRating
     * const ClinicRating = await prisma.clinicRating.delete({
     *   where: {
     *     // ... filter to delete one ClinicRating
     *   }
     * })
     * 
    **/
    delete<T extends ClinicRatingDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicRatingDeleteArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ClinicRating.
     * @param {ClinicRatingUpdateArgs} args - Arguments to update one ClinicRating.
     * @example
     * // Update one ClinicRating
     * const clinicRating = await prisma.clinicRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClinicRatingUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicRatingUpdateArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ClinicRatings.
     * @param {ClinicRatingDeleteManyArgs} args - Arguments to filter ClinicRatings to delete.
     * @example
     * // Delete a few ClinicRatings
     * const { count } = await prisma.clinicRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClinicRatingDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClinicRatingDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClinicRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClinicRatings
     * const clinicRating = await prisma.clinicRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClinicRatingUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicRatingUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClinicRating.
     * @param {ClinicRatingUpsertArgs} args - Arguments to update or create a ClinicRating.
     * @example
     * // Update or create a ClinicRating
     * const clinicRating = await prisma.clinicRating.upsert({
     *   create: {
     *     // ... data to create a ClinicRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClinicRating we want to update
     *   }
     * })
    **/
    upsert<T extends ClinicRatingUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClinicRatingUpsertArgs<ExtArgs>>
    ): Prisma__ClinicRatingClient<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ClinicRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingCountArgs} args - Arguments to filter ClinicRatings to count.
     * @example
     * // Count the number of ClinicRatings
     * const count = await prisma.clinicRating.count({
     *   where: {
     *     // ... the filter for the ClinicRatings we want to count
     *   }
     * })
    **/
    count<T extends ClinicRatingCountArgs>(
      args?: Subset<T, ClinicRatingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClinicRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClinicRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClinicRatingAggregateArgs>(args: Subset<T, ClinicRatingAggregateArgs>): Prisma.PrismaPromise<GetClinicRatingAggregateType<T>>

    /**
     * Group by ClinicRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClinicRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClinicRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClinicRatingGroupByArgs['orderBy'] }
        : { orderBy?: ClinicRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClinicRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClinicRatingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClinicRating model
   */
  readonly fields: ClinicRatingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClinicRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClinicRatingClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ClinicRating model
   */ 
  interface ClinicRatingFieldRefs {
    readonly id: FieldRef<"ClinicRating", 'String'>
    readonly userId: FieldRef<"ClinicRating", 'String'>
    readonly clinicId: FieldRef<"ClinicRating", 'String'>
    readonly rate: FieldRef<"ClinicRating", 'Int'>
    readonly comment: FieldRef<"ClinicRating", 'String'>
    readonly createdAt: FieldRef<"ClinicRating", 'DateTime'>
    readonly updatedAt: FieldRef<"ClinicRating", 'DateTime'>
    readonly deletedAt: FieldRef<"ClinicRating", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ClinicRating findUnique
   */
  export type ClinicRatingFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * Filter, which ClinicRating to fetch.
     */
    where: ClinicRatingWhereUniqueInput
  }


  /**
   * ClinicRating findUniqueOrThrow
   */
  export type ClinicRatingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * Filter, which ClinicRating to fetch.
     */
    where: ClinicRatingWhereUniqueInput
  }


  /**
   * ClinicRating findFirst
   */
  export type ClinicRatingFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * Filter, which ClinicRating to fetch.
     */
    where?: ClinicRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicRatings to fetch.
     */
    orderBy?: ClinicRatingOrderByWithRelationInput | ClinicRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicRatings.
     */
    cursor?: ClinicRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicRatings.
     */
    distinct?: ClinicRatingScalarFieldEnum | ClinicRatingScalarFieldEnum[]
  }


  /**
   * ClinicRating findFirstOrThrow
   */
  export type ClinicRatingFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * Filter, which ClinicRating to fetch.
     */
    where?: ClinicRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicRatings to fetch.
     */
    orderBy?: ClinicRatingOrderByWithRelationInput | ClinicRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClinicRatings.
     */
    cursor?: ClinicRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicRatings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClinicRatings.
     */
    distinct?: ClinicRatingScalarFieldEnum | ClinicRatingScalarFieldEnum[]
  }


  /**
   * ClinicRating findMany
   */
  export type ClinicRatingFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * Filter, which ClinicRatings to fetch.
     */
    where?: ClinicRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClinicRatings to fetch.
     */
    orderBy?: ClinicRatingOrderByWithRelationInput | ClinicRatingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClinicRatings.
     */
    cursor?: ClinicRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClinicRatings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClinicRatings.
     */
    skip?: number
    distinct?: ClinicRatingScalarFieldEnum | ClinicRatingScalarFieldEnum[]
  }


  /**
   * ClinicRating create
   */
  export type ClinicRatingCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * The data needed to create a ClinicRating.
     */
    data: XOR<ClinicRatingCreateInput, ClinicRatingUncheckedCreateInput>
  }


  /**
   * ClinicRating createMany
   */
  export type ClinicRatingCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClinicRatings.
     */
    data: ClinicRatingCreateManyInput | ClinicRatingCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ClinicRating update
   */
  export type ClinicRatingUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * The data needed to update a ClinicRating.
     */
    data: XOR<ClinicRatingUpdateInput, ClinicRatingUncheckedUpdateInput>
    /**
     * Choose, which ClinicRating to update.
     */
    where: ClinicRatingWhereUniqueInput
  }


  /**
   * ClinicRating updateMany
   */
  export type ClinicRatingUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClinicRatings.
     */
    data: XOR<ClinicRatingUpdateManyMutationInput, ClinicRatingUncheckedUpdateManyInput>
    /**
     * Filter which ClinicRatings to update
     */
    where?: ClinicRatingWhereInput
  }


  /**
   * ClinicRating upsert
   */
  export type ClinicRatingUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * The filter to search for the ClinicRating to update in case it exists.
     */
    where: ClinicRatingWhereUniqueInput
    /**
     * In case the ClinicRating found by the `where` argument doesn't exist, create a new ClinicRating with this data.
     */
    create: XOR<ClinicRatingCreateInput, ClinicRatingUncheckedCreateInput>
    /**
     * In case the ClinicRating was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClinicRatingUpdateInput, ClinicRatingUncheckedUpdateInput>
  }


  /**
   * ClinicRating delete
   */
  export type ClinicRatingDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    /**
     * Filter which ClinicRating to delete.
     */
    where: ClinicRatingWhereUniqueInput
  }


  /**
   * ClinicRating deleteMany
   */
  export type ClinicRatingDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClinicRatings to delete
     */
    where?: ClinicRatingWhereInput
  }


  /**
   * ClinicRating without action
   */
  export type ClinicRatingDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
  }



  /**
   * Model Services
   */

  export type AggregateServices = {
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  export type ServicesAvgAggregateOutputType = {
    price: number | null
  }

  export type ServicesSumAggregateOutputType = {
    price: number | null
  }

  export type ServicesMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    price: number | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type ServicesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    price: number | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type ServicesCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    institutionId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ServicesAvgAggregateInputType = {
    price?: true
  }

  export type ServicesSumAggregateInputType = {
    price?: true
  }

  export type ServicesMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ServicesMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ServicesCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ServicesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to aggregate.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServicesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServicesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServicesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServicesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServicesMaxAggregateInputType
  }

  export type GetServicesAggregateType<T extends ServicesAggregateArgs> = {
        [P in keyof T & keyof AggregateServices]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateServices[P]>
      : GetScalarType<T[P], AggregateServices[P]>
  }




  export type ServicesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ServicesWhereInput
    orderBy?: ServicesOrderByWithAggregationInput | ServicesOrderByWithAggregationInput[]
    by: ServicesScalarFieldEnum[] | ServicesScalarFieldEnum
    having?: ServicesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServicesCountAggregateInputType | true
    _avg?: ServicesAvgAggregateInputType
    _sum?: ServicesSumAggregateInputType
    _min?: ServicesMinAggregateInputType
    _max?: ServicesMaxAggregateInputType
  }

  export type ServicesGroupByOutputType = {
    id: string
    name: string
    description: string
    price: number
    institutionId: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: ServicesCountAggregateOutputType | null
    _avg: ServicesAvgAggregateOutputType | null
    _sum: ServicesSumAggregateOutputType | null
    _min: ServicesMinAggregateOutputType | null
    _max: ServicesMaxAggregateOutputType | null
  }

  type GetServicesGroupByPayload<T extends ServicesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServicesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServicesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServicesGroupByOutputType[P]>
            : GetScalarType<T[P], ServicesGroupByOutputType[P]>
        }
      >
    >


  export type ServicesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["services"]>

  export type ServicesSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ServicesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }


  export type $ServicesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Services"
    objects: {
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      description: string
      price: number
      institutionId: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["services"]>
    composites: {}
  }


  type ServicesGetPayload<S extends boolean | null | undefined | ServicesDefaultArgs> = $Result.GetResult<Prisma.$ServicesPayload, S>

  type ServicesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ServicesFindManyArgs, 'select' | 'include'> & {
      select?: ServicesCountAggregateInputType | true
    }

  export interface ServicesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Services'], meta: { name: 'Services' } }
    /**
     * Find zero or one Services that matches the filter.
     * @param {ServicesFindUniqueArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ServicesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesFindUniqueArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Services that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ServicesFindUniqueOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ServicesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindFirstArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ServicesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindFirstArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Services that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindFirstOrThrowArgs} args - Arguments to find a Services
     * @example
     * // Get one Services
     * const services = await prisma.services.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ServicesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.services.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.services.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const servicesWithIdOnly = await prisma.services.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ServicesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Services.
     * @param {ServicesCreateArgs} args - Arguments to create a Services.
     * @example
     * // Create one Services
     * const Services = await prisma.services.create({
     *   data: {
     *     // ... data to create a Services
     *   }
     * })
     * 
    **/
    create<T extends ServicesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesCreateArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Services.
     *     @param {ServicesCreateManyArgs} args - Arguments to create many Services.
     *     @example
     *     // Create many Services
     *     const services = await prisma.services.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ServicesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Services.
     * @param {ServicesDeleteArgs} args - Arguments to delete one Services.
     * @example
     * // Delete one Services
     * const Services = await prisma.services.delete({
     *   where: {
     *     // ... filter to delete one Services
     *   }
     * })
     * 
    **/
    delete<T extends ServicesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesDeleteArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Services.
     * @param {ServicesUpdateArgs} args - Arguments to update one Services.
     * @example
     * // Update one Services
     * const services = await prisma.services.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ServicesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesUpdateArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Services.
     * @param {ServicesDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.services.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ServicesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ServicesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const services = await prisma.services.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ServicesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Services.
     * @param {ServicesUpsertArgs} args - Arguments to update or create a Services.
     * @example
     * // Update or create a Services
     * const services = await prisma.services.upsert({
     *   create: {
     *     // ... data to create a Services
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Services we want to update
     *   }
     * })
    **/
    upsert<T extends ServicesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ServicesUpsertArgs<ExtArgs>>
    ): Prisma__ServicesClient<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.services.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServicesCountArgs>(
      args?: Subset<T, ServicesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServicesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServicesAggregateArgs>(args: Subset<T, ServicesAggregateArgs>): Prisma.PrismaPromise<GetServicesAggregateType<T>>

    /**
     * Group by Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServicesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServicesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServicesGroupByArgs['orderBy'] }
        : { orderBy?: ServicesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServicesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServicesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Services model
   */
  readonly fields: ServicesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Services.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServicesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Services model
   */ 
  interface ServicesFieldRefs {
    readonly id: FieldRef<"Services", 'String'>
    readonly name: FieldRef<"Services", 'String'>
    readonly description: FieldRef<"Services", 'String'>
    readonly price: FieldRef<"Services", 'Float'>
    readonly institutionId: FieldRef<"Services", 'String'>
    readonly createdAt: FieldRef<"Services", 'DateTime'>
    readonly updatedAt: FieldRef<"Services", 'DateTime'>
    readonly deletedAt: FieldRef<"Services", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Services findUnique
   */
  export type ServicesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services findUniqueOrThrow
   */
  export type ServicesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services findFirst
   */
  export type ServicesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Services findFirstOrThrow
   */
  export type ServicesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Services findMany
   */
  export type ServicesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServicesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServicesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Services create
   */
  export type ServicesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * The data needed to create a Services.
     */
    data: XOR<ServicesCreateInput, ServicesUncheckedCreateInput>
  }


  /**
   * Services createMany
   */
  export type ServicesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServicesCreateManyInput | ServicesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Services update
   */
  export type ServicesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * The data needed to update a Services.
     */
    data: XOR<ServicesUpdateInput, ServicesUncheckedUpdateInput>
    /**
     * Choose, which Services to update.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services updateMany
   */
  export type ServicesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServicesUpdateManyMutationInput, ServicesUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServicesWhereInput
  }


  /**
   * Services upsert
   */
  export type ServicesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * The filter to search for the Services to update in case it exists.
     */
    where: ServicesWhereUniqueInput
    /**
     * In case the Services found by the `where` argument doesn't exist, create a new Services with this data.
     */
    create: XOR<ServicesCreateInput, ServicesUncheckedCreateInput>
    /**
     * In case the Services was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServicesUpdateInput, ServicesUncheckedUpdateInput>
  }


  /**
   * Services delete
   */
  export type ServicesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    /**
     * Filter which Services to delete.
     */
    where: ServicesWhereUniqueInput
  }


  /**
   * Services deleteMany
   */
  export type ServicesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServicesWhereInput
  }


  /**
   * Services without action
   */
  export type ServicesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
  }



  /**
   * Model Speciality
   */

  export type AggregateSpeciality = {
    _count: SpecialityCountAggregateOutputType | null
    _min: SpecialityMinAggregateOutputType | null
    _max: SpecialityMaxAggregateOutputType | null
  }

  export type SpecialityMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type SpecialityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type SpecialityCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type SpecialityMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type SpecialityMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type SpecialityCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type SpecialityAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Speciality to aggregate.
     */
    where?: SpecialityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialities to fetch.
     */
    orderBy?: SpecialityOrderByWithRelationInput | SpecialityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SpecialityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Specialities
    **/
    _count?: true | SpecialityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SpecialityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SpecialityMaxAggregateInputType
  }

  export type GetSpecialityAggregateType<T extends SpecialityAggregateArgs> = {
        [P in keyof T & keyof AggregateSpeciality]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSpeciality[P]>
      : GetScalarType<T[P], AggregateSpeciality[P]>
  }




  export type SpecialityGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SpecialityWhereInput
    orderBy?: SpecialityOrderByWithAggregationInput | SpecialityOrderByWithAggregationInput[]
    by: SpecialityScalarFieldEnum[] | SpecialityScalarFieldEnum
    having?: SpecialityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SpecialityCountAggregateInputType | true
    _min?: SpecialityMinAggregateInputType
    _max?: SpecialityMaxAggregateInputType
  }

  export type SpecialityGroupByOutputType = {
    id: string
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: SpecialityCountAggregateOutputType | null
    _min: SpecialityMinAggregateOutputType | null
    _max: SpecialityMaxAggregateOutputType | null
  }

  type GetSpecialityGroupByPayload<T extends SpecialityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SpecialityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SpecialityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SpecialityGroupByOutputType[P]>
            : GetScalarType<T[P], SpecialityGroupByOutputType[P]>
        }
      >
    >


  export type SpecialitySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["speciality"]>

  export type SpecialitySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }


  export type $SpecialityPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Speciality"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      description: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["speciality"]>
    composites: {}
  }


  type SpecialityGetPayload<S extends boolean | null | undefined | SpecialityDefaultArgs> = $Result.GetResult<Prisma.$SpecialityPayload, S>

  type SpecialityCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SpecialityFindManyArgs, 'select' | 'include'> & {
      select?: SpecialityCountAggregateInputType | true
    }

  export interface SpecialityDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Speciality'], meta: { name: 'Speciality' } }
    /**
     * Find zero or one Speciality that matches the filter.
     * @param {SpecialityFindUniqueArgs} args - Arguments to find a Speciality
     * @example
     * // Get one Speciality
     * const speciality = await prisma.speciality.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SpecialityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialityFindUniqueArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Speciality that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SpecialityFindUniqueOrThrowArgs} args - Arguments to find a Speciality
     * @example
     * // Get one Speciality
     * const speciality = await prisma.speciality.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SpecialityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Speciality that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityFindFirstArgs} args - Arguments to find a Speciality
     * @example
     * // Get one Speciality
     * const speciality = await prisma.speciality.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SpecialityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialityFindFirstArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Speciality that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityFindFirstOrThrowArgs} args - Arguments to find a Speciality
     * @example
     * // Get one Speciality
     * const speciality = await prisma.speciality.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SpecialityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Specialities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Specialities
     * const specialities = await prisma.speciality.findMany()
     * 
     * // Get first 10 Specialities
     * const specialities = await prisma.speciality.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const specialityWithIdOnly = await prisma.speciality.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SpecialityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Speciality.
     * @param {SpecialityCreateArgs} args - Arguments to create a Speciality.
     * @example
     * // Create one Speciality
     * const Speciality = await prisma.speciality.create({
     *   data: {
     *     // ... data to create a Speciality
     *   }
     * })
     * 
    **/
    create<T extends SpecialityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialityCreateArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Specialities.
     *     @param {SpecialityCreateManyArgs} args - Arguments to create many Specialities.
     *     @example
     *     // Create many Specialities
     *     const speciality = await prisma.speciality.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SpecialityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Speciality.
     * @param {SpecialityDeleteArgs} args - Arguments to delete one Speciality.
     * @example
     * // Delete one Speciality
     * const Speciality = await prisma.speciality.delete({
     *   where: {
     *     // ... filter to delete one Speciality
     *   }
     * })
     * 
    **/
    delete<T extends SpecialityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialityDeleteArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Speciality.
     * @param {SpecialityUpdateArgs} args - Arguments to update one Speciality.
     * @example
     * // Update one Speciality
     * const speciality = await prisma.speciality.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SpecialityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialityUpdateArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Specialities.
     * @param {SpecialityDeleteManyArgs} args - Arguments to filter Specialities to delete.
     * @example
     * // Delete a few Specialities
     * const { count } = await prisma.speciality.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SpecialityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SpecialityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Specialities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Specialities
     * const speciality = await prisma.speciality.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SpecialityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Speciality.
     * @param {SpecialityUpsertArgs} args - Arguments to update or create a Speciality.
     * @example
     * // Update or create a Speciality
     * const speciality = await prisma.speciality.upsert({
     *   create: {
     *     // ... data to create a Speciality
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Speciality we want to update
     *   }
     * })
    **/
    upsert<T extends SpecialityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SpecialityUpsertArgs<ExtArgs>>
    ): Prisma__SpecialityClient<$Result.GetResult<Prisma.$SpecialityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Specialities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityCountArgs} args - Arguments to filter Specialities to count.
     * @example
     * // Count the number of Specialities
     * const count = await prisma.speciality.count({
     *   where: {
     *     // ... the filter for the Specialities we want to count
     *   }
     * })
    **/
    count<T extends SpecialityCountArgs>(
      args?: Subset<T, SpecialityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SpecialityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Speciality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SpecialityAggregateArgs>(args: Subset<T, SpecialityAggregateArgs>): Prisma.PrismaPromise<GetSpecialityAggregateType<T>>

    /**
     * Group by Speciality.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SpecialityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SpecialityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SpecialityGroupByArgs['orderBy'] }
        : { orderBy?: SpecialityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SpecialityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSpecialityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Speciality model
   */
  readonly fields: SpecialityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Speciality.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SpecialityClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Speciality model
   */ 
  interface SpecialityFieldRefs {
    readonly id: FieldRef<"Speciality", 'String'>
    readonly name: FieldRef<"Speciality", 'String'>
    readonly description: FieldRef<"Speciality", 'String'>
    readonly createdAt: FieldRef<"Speciality", 'DateTime'>
    readonly updatedAt: FieldRef<"Speciality", 'DateTime'>
    readonly deletedAt: FieldRef<"Speciality", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Speciality findUnique
   */
  export type SpecialityFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * Filter, which Speciality to fetch.
     */
    where: SpecialityWhereUniqueInput
  }


  /**
   * Speciality findUniqueOrThrow
   */
  export type SpecialityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * Filter, which Speciality to fetch.
     */
    where: SpecialityWhereUniqueInput
  }


  /**
   * Speciality findFirst
   */
  export type SpecialityFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * Filter, which Speciality to fetch.
     */
    where?: SpecialityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialities to fetch.
     */
    orderBy?: SpecialityOrderByWithRelationInput | SpecialityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialities.
     */
    cursor?: SpecialityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialities.
     */
    distinct?: SpecialityScalarFieldEnum | SpecialityScalarFieldEnum[]
  }


  /**
   * Speciality findFirstOrThrow
   */
  export type SpecialityFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * Filter, which Speciality to fetch.
     */
    where?: SpecialityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialities to fetch.
     */
    orderBy?: SpecialityOrderByWithRelationInput | SpecialityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Specialities.
     */
    cursor?: SpecialityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Specialities.
     */
    distinct?: SpecialityScalarFieldEnum | SpecialityScalarFieldEnum[]
  }


  /**
   * Speciality findMany
   */
  export type SpecialityFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * Filter, which Specialities to fetch.
     */
    where?: SpecialityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Specialities to fetch.
     */
    orderBy?: SpecialityOrderByWithRelationInput | SpecialityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Specialities.
     */
    cursor?: SpecialityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Specialities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Specialities.
     */
    skip?: number
    distinct?: SpecialityScalarFieldEnum | SpecialityScalarFieldEnum[]
  }


  /**
   * Speciality create
   */
  export type SpecialityCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * The data needed to create a Speciality.
     */
    data: XOR<SpecialityCreateInput, SpecialityUncheckedCreateInput>
  }


  /**
   * Speciality createMany
   */
  export type SpecialityCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Specialities.
     */
    data: SpecialityCreateManyInput | SpecialityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Speciality update
   */
  export type SpecialityUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * The data needed to update a Speciality.
     */
    data: XOR<SpecialityUpdateInput, SpecialityUncheckedUpdateInput>
    /**
     * Choose, which Speciality to update.
     */
    where: SpecialityWhereUniqueInput
  }


  /**
   * Speciality updateMany
   */
  export type SpecialityUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Specialities.
     */
    data: XOR<SpecialityUpdateManyMutationInput, SpecialityUncheckedUpdateManyInput>
    /**
     * Filter which Specialities to update
     */
    where?: SpecialityWhereInput
  }


  /**
   * Speciality upsert
   */
  export type SpecialityUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * The filter to search for the Speciality to update in case it exists.
     */
    where: SpecialityWhereUniqueInput
    /**
     * In case the Speciality found by the `where` argument doesn't exist, create a new Speciality with this data.
     */
    create: XOR<SpecialityCreateInput, SpecialityUncheckedCreateInput>
    /**
     * In case the Speciality was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SpecialityUpdateInput, SpecialityUncheckedUpdateInput>
  }


  /**
   * Speciality delete
   */
  export type SpecialityDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
    /**
     * Filter which Speciality to delete.
     */
    where: SpecialityWhereUniqueInput
  }


  /**
   * Speciality deleteMany
   */
  export type SpecialityDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Specialities to delete
     */
    where?: SpecialityWhereInput
  }


  /**
   * Speciality without action
   */
  export type SpecialityDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Speciality
     */
    select?: SpecialitySelect<ExtArgs> | null
  }



  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    permissions: $Enums.permissions | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    permissions: $Enums.permissions | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    permissions: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    permissions?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: string
    userId: string
    permissions: $Enums.permissions
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    permissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserPermissionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserPermissionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      permissions: $Enums.permissions
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }


  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserPermissionFindManyArgs, 'select' | 'include'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserPermissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserPermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserPermissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserPermissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
    **/
    create<T extends UserPermissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserPermissions.
     *     @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     *     @example
     *     // Create many UserPermissions
     *     const userPermission = await prisma.userPermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserPermissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
    **/
    delete<T extends UserPermissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserPermissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserPermissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserPermissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
    **/
    upsert<T extends UserPermissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>
    ): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserPermission model
   */ 
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'String'>
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permissions: FieldRef<"UserPermission", 'permissions'>
    readonly createdAt: FieldRef<"UserPermission", 'DateTime'>
    readonly updatedAt: FieldRef<"UserPermission", 'DateTime'>
    readonly deletedAt: FieldRef<"UserPermission", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }


  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }


  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
  }


  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }


  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }


  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
  }


  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }



  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    number: number | null
  }

  export type PatientSumAggregateOutputType = {
    number: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    number: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    number: number | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    number: number
    userId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    number?: true
  }

  export type PatientSumAggregateInputType = {
    number?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    number?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    number?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    number?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    number: number | null
    userId: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Appointment?: boolean | Patient$AppointmentArgs<ExtArgs>
    Notification?: boolean | Patient$NotificationArgs<ExtArgs>
    Qrcode?: boolean | Patient$QrcodeArgs<ExtArgs>
    Favorites?: boolean | Patient$FavoritesArgs<ExtArgs>
    medicalReport?: boolean | Patient$medicalReportArgs<ExtArgs>
    patientCard?: boolean | Patient$patientCardArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    number?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Appointment?: boolean | Patient$AppointmentArgs<ExtArgs>
    Notification?: boolean | Patient$NotificationArgs<ExtArgs>
    Qrcode?: boolean | Patient$QrcodeArgs<ExtArgs>
    Favorites?: boolean | Patient$FavoritesArgs<ExtArgs>
    medicalReport?: boolean | Patient$medicalReportArgs<ExtArgs>
    patientCard?: boolean | Patient$patientCardArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PatientPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Appointment: Prisma.$AppointmentPayload<ExtArgs>[]
      Notification: Prisma.$NotificationPayload<ExtArgs>[]
      Qrcode: Prisma.$QrcodePayload<ExtArgs>[]
      Favorites: Prisma.$FavoritesPayload<ExtArgs>[]
      medicalReport: Prisma.$MedicalReportPayload<ExtArgs>[]
      patientCard: Prisma.$PatientCardPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      number: number | null
      userId: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }


  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCreateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>
    ): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Appointment<T extends Patient$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notification<T extends Patient$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, Patient$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Qrcode<T extends Patient$QrcodeArgs<ExtArgs> = {}>(args?: Subset<T, Patient$QrcodeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'findMany'> | Null>;

    Favorites<T extends Patient$FavoritesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$FavoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findMany'> | Null>;

    medicalReport<T extends Patient$medicalReportArgs<ExtArgs> = {}>(args?: Subset<T, Patient$medicalReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findMany'> | Null>;

    patientCard<T extends Patient$patientCardArgs<ExtArgs> = {}>(args?: Subset<T, Patient$patientCardArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Patient model
   */ 
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly number: FieldRef<"Patient", 'Int'>
    readonly userId: FieldRef<"Patient", 'String'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
    readonly deletedAt: FieldRef<"Patient", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }


  /**
   * Patient.Appointment
   */
  export type Patient$AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * Patient.Notification
   */
  export type Patient$NotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Patient.Qrcode
   */
  export type Patient$QrcodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    where?: QrcodeWhereInput
    orderBy?: QrcodeOrderByWithRelationInput | QrcodeOrderByWithRelationInput[]
    cursor?: QrcodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QrcodeScalarFieldEnum | QrcodeScalarFieldEnum[]
  }


  /**
   * Patient.Favorites
   */
  export type Patient$FavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    where?: FavoritesWhereInput
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    cursor?: FavoritesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoritesScalarFieldEnum | FavoritesScalarFieldEnum[]
  }


  /**
   * Patient.medicalReport
   */
  export type Patient$medicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    where?: MedicalReportWhereInput
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    cursor?: MedicalReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * Patient.patientCard
   */
  export type Patient$patientCardArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    where?: PatientCardWhereInput
    orderBy?: PatientCardOrderByWithRelationInput | PatientCardOrderByWithRelationInput[]
    cursor?: PatientCardWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientCardScalarFieldEnum | PatientCardScalarFieldEnum[]
  }


  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
  }



  /**
   * Model PatientCard
   */

  export type AggregatePatientCard = {
    _count: PatientCardCountAggregateOutputType | null
    _min: PatientCardMinAggregateOutputType | null
    _max: PatientCardMaxAggregateOutputType | null
  }

  export type PatientCardMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    clinicId: string | null
    qrCode: string | null
    cardNumber: string | null
    status: $Enums.CardStatus | null
    issuedOn: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type PatientCardMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    clinicId: string | null
    qrCode: string | null
    cardNumber: string | null
    status: $Enums.CardStatus | null
    issuedOn: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type PatientCardCountAggregateOutputType = {
    id: number
    patientId: number
    clinicId: number
    qrCode: number
    cardNumber: number
    status: number
    issuedOn: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PatientCardMinAggregateInputType = {
    id?: true
    patientId?: true
    clinicId?: true
    qrCode?: true
    cardNumber?: true
    status?: true
    issuedOn?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientCardMaxAggregateInputType = {
    id?: true
    patientId?: true
    clinicId?: true
    qrCode?: true
    cardNumber?: true
    status?: true
    issuedOn?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PatientCardCountAggregateInputType = {
    id?: true
    patientId?: true
    clinicId?: true
    qrCode?: true
    cardNumber?: true
    status?: true
    issuedOn?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PatientCardAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientCard to aggregate.
     */
    where?: PatientCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCards to fetch.
     */
    orderBy?: PatientCardOrderByWithRelationInput | PatientCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientCards
    **/
    _count?: true | PatientCardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientCardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientCardMaxAggregateInputType
  }

  export type GetPatientCardAggregateType<T extends PatientCardAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientCard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientCard[P]>
      : GetScalarType<T[P], AggregatePatientCard[P]>
  }




  export type PatientCardGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientCardWhereInput
    orderBy?: PatientCardOrderByWithAggregationInput | PatientCardOrderByWithAggregationInput[]
    by: PatientCardScalarFieldEnum[] | PatientCardScalarFieldEnum
    having?: PatientCardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCardCountAggregateInputType | true
    _min?: PatientCardMinAggregateInputType
    _max?: PatientCardMaxAggregateInputType
  }

  export type PatientCardGroupByOutputType = {
    id: string
    patientId: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn: Date | null
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: PatientCardCountAggregateOutputType | null
    _min: PatientCardMinAggregateOutputType | null
    _max: PatientCardMaxAggregateOutputType | null
  }

  type GetPatientCardGroupByPayload<T extends PatientCardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientCardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientCardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientCardGroupByOutputType[P]>
            : GetScalarType<T[P], PatientCardGroupByOutputType[P]>
        }
      >
    >


  export type PatientCardSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    clinicId?: boolean
    qrCode?: boolean
    cardNumber?: boolean
    status?: boolean
    issuedOn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientCard"]>

  export type PatientCardSelectScalar = {
    id?: boolean
    patientId?: boolean
    clinicId?: boolean
    qrCode?: boolean
    cardNumber?: boolean
    status?: boolean
    issuedOn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PatientCardInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }


  export type $PatientCardPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PatientCard"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      patientId: string
      clinicId: string
      qrCode: string
      cardNumber: string
      status: $Enums.CardStatus
      issuedOn: Date | null
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["patientCard"]>
    composites: {}
  }


  type PatientCardGetPayload<S extends boolean | null | undefined | PatientCardDefaultArgs> = $Result.GetResult<Prisma.$PatientCardPayload, S>

  type PatientCardCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PatientCardFindManyArgs, 'select' | 'include'> & {
      select?: PatientCardCountAggregateInputType | true
    }

  export interface PatientCardDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientCard'], meta: { name: 'PatientCard' } }
    /**
     * Find zero or one PatientCard that matches the filter.
     * @param {PatientCardFindUniqueArgs} args - Arguments to find a PatientCard
     * @example
     * // Get one PatientCard
     * const patientCard = await prisma.patientCard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientCardFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCardFindUniqueArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PatientCard that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PatientCardFindUniqueOrThrowArgs} args - Arguments to find a PatientCard
     * @example
     * // Get one PatientCard
     * const patientCard = await prisma.patientCard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientCardFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCardFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PatientCard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardFindFirstArgs} args - Arguments to find a PatientCard
     * @example
     * // Get one PatientCard
     * const patientCard = await prisma.patientCard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientCardFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCardFindFirstArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PatientCard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardFindFirstOrThrowArgs} args - Arguments to find a PatientCard
     * @example
     * // Get one PatientCard
     * const patientCard = await prisma.patientCard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientCardFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCardFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PatientCards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientCards
     * const patientCards = await prisma.patientCard.findMany()
     * 
     * // Get first 10 PatientCards
     * const patientCards = await prisma.patientCard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientCardWithIdOnly = await prisma.patientCard.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientCardFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCardFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PatientCard.
     * @param {PatientCardCreateArgs} args - Arguments to create a PatientCard.
     * @example
     * // Create one PatientCard
     * const PatientCard = await prisma.patientCard.create({
     *   data: {
     *     // ... data to create a PatientCard
     *   }
     * })
     * 
    **/
    create<T extends PatientCardCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCardCreateArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PatientCards.
     *     @param {PatientCardCreateManyArgs} args - Arguments to create many PatientCards.
     *     @example
     *     // Create many PatientCards
     *     const patientCard = await prisma.patientCard.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCardCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCardCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PatientCard.
     * @param {PatientCardDeleteArgs} args - Arguments to delete one PatientCard.
     * @example
     * // Delete one PatientCard
     * const PatientCard = await prisma.patientCard.delete({
     *   where: {
     *     // ... filter to delete one PatientCard
     *   }
     * })
     * 
    **/
    delete<T extends PatientCardDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCardDeleteArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PatientCard.
     * @param {PatientCardUpdateArgs} args - Arguments to update one PatientCard.
     * @example
     * // Update one PatientCard
     * const patientCard = await prisma.patientCard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientCardUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCardUpdateArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PatientCards.
     * @param {PatientCardDeleteManyArgs} args - Arguments to filter PatientCards to delete.
     * @example
     * // Delete a few PatientCards
     * const { count } = await prisma.patientCard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientCardDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCardDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientCards
     * const patientCard = await prisma.patientCard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientCardUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCardUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientCard.
     * @param {PatientCardUpsertArgs} args - Arguments to update or create a PatientCard.
     * @example
     * // Update or create a PatientCard
     * const patientCard = await prisma.patientCard.upsert({
     *   create: {
     *     // ... data to create a PatientCard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientCard we want to update
     *   }
     * })
    **/
    upsert<T extends PatientCardUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCardUpsertArgs<ExtArgs>>
    ): Prisma__PatientCardClient<$Result.GetResult<Prisma.$PatientCardPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PatientCards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardCountArgs} args - Arguments to filter PatientCards to count.
     * @example
     * // Count the number of PatientCards
     * const count = await prisma.patientCard.count({
     *   where: {
     *     // ... the filter for the PatientCards we want to count
     *   }
     * })
    **/
    count<T extends PatientCardCountArgs>(
      args?: Subset<T, PatientCardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientCardAggregateArgs>(args: Subset<T, PatientCardAggregateArgs>): Prisma.PrismaPromise<GetPatientCardAggregateType<T>>

    /**
     * Group by PatientCard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientCardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientCardGroupByArgs['orderBy'] }
        : { orderBy?: PatientCardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientCardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientCardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientCard model
   */
  readonly fields: PatientCardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientCard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientCardClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PatientCard model
   */ 
  interface PatientCardFieldRefs {
    readonly id: FieldRef<"PatientCard", 'String'>
    readonly patientId: FieldRef<"PatientCard", 'String'>
    readonly clinicId: FieldRef<"PatientCard", 'String'>
    readonly qrCode: FieldRef<"PatientCard", 'String'>
    readonly cardNumber: FieldRef<"PatientCard", 'String'>
    readonly status: FieldRef<"PatientCard", 'CardStatus'>
    readonly issuedOn: FieldRef<"PatientCard", 'DateTime'>
    readonly createdAt: FieldRef<"PatientCard", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientCard", 'DateTime'>
    readonly deletedAt: FieldRef<"PatientCard", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * PatientCard findUnique
   */
  export type PatientCardFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * Filter, which PatientCard to fetch.
     */
    where: PatientCardWhereUniqueInput
  }


  /**
   * PatientCard findUniqueOrThrow
   */
  export type PatientCardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * Filter, which PatientCard to fetch.
     */
    where: PatientCardWhereUniqueInput
  }


  /**
   * PatientCard findFirst
   */
  export type PatientCardFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * Filter, which PatientCard to fetch.
     */
    where?: PatientCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCards to fetch.
     */
    orderBy?: PatientCardOrderByWithRelationInput | PatientCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientCards.
     */
    cursor?: PatientCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientCards.
     */
    distinct?: PatientCardScalarFieldEnum | PatientCardScalarFieldEnum[]
  }


  /**
   * PatientCard findFirstOrThrow
   */
  export type PatientCardFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * Filter, which PatientCard to fetch.
     */
    where?: PatientCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCards to fetch.
     */
    orderBy?: PatientCardOrderByWithRelationInput | PatientCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientCards.
     */
    cursor?: PatientCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientCards.
     */
    distinct?: PatientCardScalarFieldEnum | PatientCardScalarFieldEnum[]
  }


  /**
   * PatientCard findMany
   */
  export type PatientCardFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * Filter, which PatientCards to fetch.
     */
    where?: PatientCardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCards to fetch.
     */
    orderBy?: PatientCardOrderByWithRelationInput | PatientCardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientCards.
     */
    cursor?: PatientCardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCards.
     */
    skip?: number
    distinct?: PatientCardScalarFieldEnum | PatientCardScalarFieldEnum[]
  }


  /**
   * PatientCard create
   */
  export type PatientCardCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientCard.
     */
    data: XOR<PatientCardCreateInput, PatientCardUncheckedCreateInput>
  }


  /**
   * PatientCard createMany
   */
  export type PatientCardCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientCards.
     */
    data: PatientCardCreateManyInput | PatientCardCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PatientCard update
   */
  export type PatientCardUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientCard.
     */
    data: XOR<PatientCardUpdateInput, PatientCardUncheckedUpdateInput>
    /**
     * Choose, which PatientCard to update.
     */
    where: PatientCardWhereUniqueInput
  }


  /**
   * PatientCard updateMany
   */
  export type PatientCardUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientCards.
     */
    data: XOR<PatientCardUpdateManyMutationInput, PatientCardUncheckedUpdateManyInput>
    /**
     * Filter which PatientCards to update
     */
    where?: PatientCardWhereInput
  }


  /**
   * PatientCard upsert
   */
  export type PatientCardUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientCard to update in case it exists.
     */
    where: PatientCardWhereUniqueInput
    /**
     * In case the PatientCard found by the `where` argument doesn't exist, create a new PatientCard with this data.
     */
    create: XOR<PatientCardCreateInput, PatientCardUncheckedCreateInput>
    /**
     * In case the PatientCard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientCardUpdateInput, PatientCardUncheckedUpdateInput>
  }


  /**
   * PatientCard delete
   */
  export type PatientCardDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
    /**
     * Filter which PatientCard to delete.
     */
    where: PatientCardWhereUniqueInput
  }


  /**
   * PatientCard deleteMany
   */
  export type PatientCardDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientCards to delete
     */
    where?: PatientCardWhereInput
  }


  /**
   * PatientCard without action
   */
  export type PatientCardDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCard
     */
    select?: PatientCardSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientCardInclude<ExtArgs> | null
  }



  /**
   * Model Qrcode
   */

  export type AggregateQrcode = {
    _count: QrcodeCountAggregateOutputType | null
    _min: QrcodeMinAggregateOutputType | null
    _max: QrcodeMaxAggregateOutputType | null
  }

  export type QrcodeMinAggregateOutputType = {
    id: string | null
    code: string | null
    patientId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type QrcodeMaxAggregateOutputType = {
    id: string | null
    code: string | null
    patientId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type QrcodeCountAggregateOutputType = {
    id: number
    code: number
    patientId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type QrcodeMinAggregateInputType = {
    id?: true
    code?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type QrcodeMaxAggregateInputType = {
    id?: true
    code?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type QrcodeCountAggregateInputType = {
    id?: true
    code?: true
    patientId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type QrcodeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Qrcode to aggregate.
     */
    where?: QrcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qrcodes to fetch.
     */
    orderBy?: QrcodeOrderByWithRelationInput | QrcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QrcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qrcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qrcodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Qrcodes
    **/
    _count?: true | QrcodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QrcodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QrcodeMaxAggregateInputType
  }

  export type GetQrcodeAggregateType<T extends QrcodeAggregateArgs> = {
        [P in keyof T & keyof AggregateQrcode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQrcode[P]>
      : GetScalarType<T[P], AggregateQrcode[P]>
  }




  export type QrcodeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: QrcodeWhereInput
    orderBy?: QrcodeOrderByWithAggregationInput | QrcodeOrderByWithAggregationInput[]
    by: QrcodeScalarFieldEnum[] | QrcodeScalarFieldEnum
    having?: QrcodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QrcodeCountAggregateInputType | true
    _min?: QrcodeMinAggregateInputType
    _max?: QrcodeMaxAggregateInputType
  }

  export type QrcodeGroupByOutputType = {
    id: string
    code: string
    patientId: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: QrcodeCountAggregateOutputType | null
    _min: QrcodeMinAggregateOutputType | null
    _max: QrcodeMaxAggregateOutputType | null
  }

  type GetQrcodeGroupByPayload<T extends QrcodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QrcodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QrcodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QrcodeGroupByOutputType[P]>
            : GetScalarType<T[P], QrcodeGroupByOutputType[P]>
        }
      >
    >


  export type QrcodeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    patientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qrcode"]>

  export type QrcodeSelectScalar = {
    id?: boolean
    code?: boolean
    patientId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type QrcodeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }


  export type $QrcodePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Qrcode"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      code: string
      patientId: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["qrcode"]>
    composites: {}
  }


  type QrcodeGetPayload<S extends boolean | null | undefined | QrcodeDefaultArgs> = $Result.GetResult<Prisma.$QrcodePayload, S>

  type QrcodeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<QrcodeFindManyArgs, 'select' | 'include'> & {
      select?: QrcodeCountAggregateInputType | true
    }

  export interface QrcodeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Qrcode'], meta: { name: 'Qrcode' } }
    /**
     * Find zero or one Qrcode that matches the filter.
     * @param {QrcodeFindUniqueArgs} args - Arguments to find a Qrcode
     * @example
     * // Get one Qrcode
     * const qrcode = await prisma.qrcode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QrcodeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, QrcodeFindUniqueArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Qrcode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {QrcodeFindUniqueOrThrowArgs} args - Arguments to find a Qrcode
     * @example
     * // Get one Qrcode
     * const qrcode = await prisma.qrcode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends QrcodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QrcodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Qrcode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeFindFirstArgs} args - Arguments to find a Qrcode
     * @example
     * // Get one Qrcode
     * const qrcode = await prisma.qrcode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QrcodeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, QrcodeFindFirstArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Qrcode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeFindFirstOrThrowArgs} args - Arguments to find a Qrcode
     * @example
     * // Get one Qrcode
     * const qrcode = await prisma.qrcode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends QrcodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, QrcodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Qrcodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Qrcodes
     * const qrcodes = await prisma.qrcode.findMany()
     * 
     * // Get first 10 Qrcodes
     * const qrcodes = await prisma.qrcode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qrcodeWithIdOnly = await prisma.qrcode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QrcodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QrcodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Qrcode.
     * @param {QrcodeCreateArgs} args - Arguments to create a Qrcode.
     * @example
     * // Create one Qrcode
     * const Qrcode = await prisma.qrcode.create({
     *   data: {
     *     // ... data to create a Qrcode
     *   }
     * })
     * 
    **/
    create<T extends QrcodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, QrcodeCreateArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Qrcodes.
     *     @param {QrcodeCreateManyArgs} args - Arguments to create many Qrcodes.
     *     @example
     *     // Create many Qrcodes
     *     const qrcode = await prisma.qrcode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends QrcodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QrcodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Qrcode.
     * @param {QrcodeDeleteArgs} args - Arguments to delete one Qrcode.
     * @example
     * // Delete one Qrcode
     * const Qrcode = await prisma.qrcode.delete({
     *   where: {
     *     // ... filter to delete one Qrcode
     *   }
     * })
     * 
    **/
    delete<T extends QrcodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, QrcodeDeleteArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Qrcode.
     * @param {QrcodeUpdateArgs} args - Arguments to update one Qrcode.
     * @example
     * // Update one Qrcode
     * const qrcode = await prisma.qrcode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QrcodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, QrcodeUpdateArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Qrcodes.
     * @param {QrcodeDeleteManyArgs} args - Arguments to filter Qrcodes to delete.
     * @example
     * // Delete a few Qrcodes
     * const { count } = await prisma.qrcode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QrcodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, QrcodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Qrcodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Qrcodes
     * const qrcode = await prisma.qrcode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QrcodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, QrcodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Qrcode.
     * @param {QrcodeUpsertArgs} args - Arguments to update or create a Qrcode.
     * @example
     * // Update or create a Qrcode
     * const qrcode = await prisma.qrcode.upsert({
     *   create: {
     *     // ... data to create a Qrcode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Qrcode we want to update
     *   }
     * })
    **/
    upsert<T extends QrcodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, QrcodeUpsertArgs<ExtArgs>>
    ): Prisma__QrcodeClient<$Result.GetResult<Prisma.$QrcodePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Qrcodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeCountArgs} args - Arguments to filter Qrcodes to count.
     * @example
     * // Count the number of Qrcodes
     * const count = await prisma.qrcode.count({
     *   where: {
     *     // ... the filter for the Qrcodes we want to count
     *   }
     * })
    **/
    count<T extends QrcodeCountArgs>(
      args?: Subset<T, QrcodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QrcodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Qrcode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QrcodeAggregateArgs>(args: Subset<T, QrcodeAggregateArgs>): Prisma.PrismaPromise<GetQrcodeAggregateType<T>>

    /**
     * Group by Qrcode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QrcodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QrcodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QrcodeGroupByArgs['orderBy'] }
        : { orderBy?: QrcodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QrcodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQrcodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Qrcode model
   */
  readonly fields: QrcodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Qrcode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QrcodeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Qrcode model
   */ 
  interface QrcodeFieldRefs {
    readonly id: FieldRef<"Qrcode", 'String'>
    readonly code: FieldRef<"Qrcode", 'String'>
    readonly patientId: FieldRef<"Qrcode", 'String'>
    readonly createdAt: FieldRef<"Qrcode", 'DateTime'>
    readonly updatedAt: FieldRef<"Qrcode", 'DateTime'>
    readonly deletedAt: FieldRef<"Qrcode", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Qrcode findUnique
   */
  export type QrcodeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * Filter, which Qrcode to fetch.
     */
    where: QrcodeWhereUniqueInput
  }


  /**
   * Qrcode findUniqueOrThrow
   */
  export type QrcodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * Filter, which Qrcode to fetch.
     */
    where: QrcodeWhereUniqueInput
  }


  /**
   * Qrcode findFirst
   */
  export type QrcodeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * Filter, which Qrcode to fetch.
     */
    where?: QrcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qrcodes to fetch.
     */
    orderBy?: QrcodeOrderByWithRelationInput | QrcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Qrcodes.
     */
    cursor?: QrcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qrcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qrcodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Qrcodes.
     */
    distinct?: QrcodeScalarFieldEnum | QrcodeScalarFieldEnum[]
  }


  /**
   * Qrcode findFirstOrThrow
   */
  export type QrcodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * Filter, which Qrcode to fetch.
     */
    where?: QrcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qrcodes to fetch.
     */
    orderBy?: QrcodeOrderByWithRelationInput | QrcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Qrcodes.
     */
    cursor?: QrcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qrcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qrcodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Qrcodes.
     */
    distinct?: QrcodeScalarFieldEnum | QrcodeScalarFieldEnum[]
  }


  /**
   * Qrcode findMany
   */
  export type QrcodeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * Filter, which Qrcodes to fetch.
     */
    where?: QrcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Qrcodes to fetch.
     */
    orderBy?: QrcodeOrderByWithRelationInput | QrcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Qrcodes.
     */
    cursor?: QrcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Qrcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Qrcodes.
     */
    skip?: number
    distinct?: QrcodeScalarFieldEnum | QrcodeScalarFieldEnum[]
  }


  /**
   * Qrcode create
   */
  export type QrcodeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * The data needed to create a Qrcode.
     */
    data: XOR<QrcodeCreateInput, QrcodeUncheckedCreateInput>
  }


  /**
   * Qrcode createMany
   */
  export type QrcodeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Qrcodes.
     */
    data: QrcodeCreateManyInput | QrcodeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Qrcode update
   */
  export type QrcodeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * The data needed to update a Qrcode.
     */
    data: XOR<QrcodeUpdateInput, QrcodeUncheckedUpdateInput>
    /**
     * Choose, which Qrcode to update.
     */
    where: QrcodeWhereUniqueInput
  }


  /**
   * Qrcode updateMany
   */
  export type QrcodeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Qrcodes.
     */
    data: XOR<QrcodeUpdateManyMutationInput, QrcodeUncheckedUpdateManyInput>
    /**
     * Filter which Qrcodes to update
     */
    where?: QrcodeWhereInput
  }


  /**
   * Qrcode upsert
   */
  export type QrcodeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * The filter to search for the Qrcode to update in case it exists.
     */
    where: QrcodeWhereUniqueInput
    /**
     * In case the Qrcode found by the `where` argument doesn't exist, create a new Qrcode with this data.
     */
    create: XOR<QrcodeCreateInput, QrcodeUncheckedCreateInput>
    /**
     * In case the Qrcode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QrcodeUpdateInput, QrcodeUncheckedUpdateInput>
  }


  /**
   * Qrcode delete
   */
  export type QrcodeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
    /**
     * Filter which Qrcode to delete.
     */
    where: QrcodeWhereUniqueInput
  }


  /**
   * Qrcode deleteMany
   */
  export type QrcodeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Qrcodes to delete
     */
    where?: QrcodeWhereInput
  }


  /**
   * Qrcode without action
   */
  export type QrcodeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Qrcode
     */
    select?: QrcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: QrcodeInclude<ExtArgs> | null
  }



  /**
   * Model Doctor
   */

  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    registrationNumber: number | null
  }

  export type DoctorSumAggregateOutputType = {
    registrationNumber: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: string | null
    userId: string | null
    specialty: string | null
    bio: string | null
    registrationNumber: number | null
    institutionId: string | null
    isOnVacation: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    specialty: string | null
    bio: string | null
    registrationNumber: number | null
    institutionId: string | null
    isOnVacation: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    userId: number
    specialty: number
    bio: number
    registrationNumber: number
    institutionId: number
    isOnVacation: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    registrationNumber?: true
  }

  export type DoctorSumAggregateInputType = {
    registrationNumber?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    userId?: true
    specialty?: true
    bio?: true
    registrationNumber?: true
    institutionId?: true
    isOnVacation?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    userId?: true
    specialty?: true
    bio?: true
    registrationNumber?: true
    institutionId?: true
    isOnVacation?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    userId?: true
    specialty?: true
    bio?: true
    registrationNumber?: true
    institutionId?: true
    isOnVacation?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: DoctorOrderByWithAggregationInput | DoctorOrderByWithAggregationInput[]
    by: DoctorScalarFieldEnum[] | DoctorScalarFieldEnum
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }

  export type DoctorGroupByOutputType = {
    id: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation: boolean | null
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    specialty?: boolean
    bio?: boolean
    registrationNumber?: boolean
    institutionId?: boolean
    isOnVacation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    WeeklySchedule?: boolean | Doctor$WeeklyScheduleArgs<ExtArgs>
    Consultation?: boolean | Doctor$ConsultationArgs<ExtArgs>
    rating?: boolean | Doctor$ratingArgs<ExtArgs>
    institution?: boolean | Doctor$institutionArgs<ExtArgs>
    Notification?: boolean | Doctor$NotificationArgs<ExtArgs>
    Favorites?: boolean | Doctor$FavoritesArgs<ExtArgs>
    medicalReport?: boolean | Doctor$medicalReportArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    userId?: boolean
    specialty?: boolean
    bio?: boolean
    registrationNumber?: boolean
    institutionId?: boolean
    isOnVacation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type DoctorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    WeeklySchedule?: boolean | Doctor$WeeklyScheduleArgs<ExtArgs>
    Consultation?: boolean | Doctor$ConsultationArgs<ExtArgs>
    rating?: boolean | Doctor$ratingArgs<ExtArgs>
    institution?: boolean | Doctor$institutionArgs<ExtArgs>
    Notification?: boolean | Doctor$NotificationArgs<ExtArgs>
    Favorites?: boolean | Doctor$FavoritesArgs<ExtArgs>
    medicalReport?: boolean | Doctor$medicalReportArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DoctorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Doctor"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      WeeklySchedule: Prisma.$WeeklySchedulePayload<ExtArgs>[]
      Consultation: Prisma.$AppointmentPayload<ExtArgs>[]
      rating: Prisma.$RatingPayload<ExtArgs>[]
      institution: Prisma.$DoctorInstitutionPayload<ExtArgs>[]
      Notification: Prisma.$NotificationPayload<ExtArgs>[]
      Favorites: Prisma.$FavoritesPayload<ExtArgs>[]
      medicalReport: Prisma.$MedicalReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      specialty: string
      bio: string
      registrationNumber: number
      institutionId: string
      isOnVacation: boolean | null
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["doctor"]>
    composites: {}
  }


  type DoctorGetPayload<S extends boolean | null | undefined | DoctorDefaultArgs> = $Result.GetResult<Prisma.$DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DoctorFindManyArgs, 'select' | 'include'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doctor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doctor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
    **/
    create<T extends DoctorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doctors.
     *     @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     *     @example
     *     // Create many Doctors
     *     const doctor = await prisma.doctor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoctorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
    **/
    delete<T extends DoctorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doctor model
   */
  readonly fields: DoctorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    WeeklySchedule<T extends Doctor$WeeklyScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$WeeklyScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    Consultation<T extends Doctor$ConsultationArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$ConsultationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    rating<T extends Doctor$ratingArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$ratingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    institution<T extends Doctor$institutionArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$institutionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notification<T extends Doctor$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Favorites<T extends Doctor$FavoritesArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$FavoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findMany'> | Null>;

    medicalReport<T extends Doctor$medicalReportArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$medicalReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Doctor model
   */ 
  interface DoctorFieldRefs {
    readonly id: FieldRef<"Doctor", 'String'>
    readonly userId: FieldRef<"Doctor", 'String'>
    readonly specialty: FieldRef<"Doctor", 'String'>
    readonly bio: FieldRef<"Doctor", 'String'>
    readonly registrationNumber: FieldRef<"Doctor", 'Int'>
    readonly institutionId: FieldRef<"Doctor", 'String'>
    readonly isOnVacation: FieldRef<"Doctor", 'Boolean'>
    readonly createdAt: FieldRef<"Doctor", 'DateTime'>
    readonly updatedAt: FieldRef<"Doctor", 'DateTime'>
    readonly deletedAt: FieldRef<"Doctor", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: DoctorOrderByWithRelationInput | DoctorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: DoctorScalarFieldEnum | DoctorScalarFieldEnum[]
  }


  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }


  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: DoctorCreateManyInput | DoctorCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
  }


  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }


  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
  }


  /**
   * Doctor.WeeklySchedule
   */
  export type Doctor$WeeklyScheduleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    cursor?: WeeklyScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }


  /**
   * Doctor.Consultation
   */
  export type Doctor$ConsultationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * Doctor.rating
   */
  export type Doctor$ratingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Doctor.institution
   */
  export type Doctor$institutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    where?: DoctorInstitutionWhereInput
    orderBy?: DoctorInstitutionOrderByWithRelationInput | DoctorInstitutionOrderByWithRelationInput[]
    cursor?: DoctorInstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorInstitutionScalarFieldEnum | DoctorInstitutionScalarFieldEnum[]
  }


  /**
   * Doctor.Notification
   */
  export type Doctor$NotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Doctor.Favorites
   */
  export type Doctor$FavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    where?: FavoritesWhereInput
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    cursor?: FavoritesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoritesScalarFieldEnum | FavoritesScalarFieldEnum[]
  }


  /**
   * Doctor.medicalReport
   */
  export type Doctor$medicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    where?: MedicalReportWhereInput
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    cursor?: MedicalReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * Doctor without action
   */
  export type DoctorDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
  }



  /**
   * Model Favorites
   */

  export type AggregateFavorites = {
    _count: FavoritesCountAggregateOutputType | null
    _min: FavoritesMinAggregateOutputType | null
    _max: FavoritesMaxAggregateOutputType | null
  }

  export type FavoritesMinAggregateOutputType = {
    id: string | null
    pacientId: string | null
    doctorId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type FavoritesMaxAggregateOutputType = {
    id: string | null
    pacientId: string | null
    doctorId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type FavoritesCountAggregateOutputType = {
    id: number
    pacientId: number
    doctorId: number
    institutionId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type FavoritesMinAggregateInputType = {
    id?: true
    pacientId?: true
    doctorId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type FavoritesMaxAggregateInputType = {
    id?: true
    pacientId?: true
    doctorId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type FavoritesCountAggregateInputType = {
    id?: true
    pacientId?: true
    doctorId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type FavoritesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to aggregate.
     */
    where?: FavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorites
    **/
    _count?: true | FavoritesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavoritesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavoritesMaxAggregateInputType
  }

  export type GetFavoritesAggregateType<T extends FavoritesAggregateArgs> = {
        [P in keyof T & keyof AggregateFavorites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavorites[P]>
      : GetScalarType<T[P], AggregateFavorites[P]>
  }




  export type FavoritesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FavoritesWhereInput
    orderBy?: FavoritesOrderByWithAggregationInput | FavoritesOrderByWithAggregationInput[]
    by: FavoritesScalarFieldEnum[] | FavoritesScalarFieldEnum
    having?: FavoritesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavoritesCountAggregateInputType | true
    _min?: FavoritesMinAggregateInputType
    _max?: FavoritesMaxAggregateInputType
  }

  export type FavoritesGroupByOutputType = {
    id: string
    pacientId: string
    doctorId: string | null
    institutionId: string | null
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: FavoritesCountAggregateOutputType | null
    _min: FavoritesMinAggregateOutputType | null
    _max: FavoritesMaxAggregateOutputType | null
  }

  type GetFavoritesGroupByPayload<T extends FavoritesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavoritesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavoritesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavoritesGroupByOutputType[P]>
            : GetScalarType<T[P], FavoritesGroupByOutputType[P]>
        }
      >
    >


  export type FavoritesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pacientId?: boolean
    doctorId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    doctor?: boolean | Favorites$doctorArgs<ExtArgs>
    institution?: boolean | Favorites$institutionArgs<ExtArgs>
    pacient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favorites"]>

  export type FavoritesSelectScalar = {
    id?: boolean
    pacientId?: boolean
    doctorId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type FavoritesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    doctor?: boolean | Favorites$doctorArgs<ExtArgs>
    institution?: boolean | Favorites$institutionArgs<ExtArgs>
    pacient?: boolean | PatientDefaultArgs<ExtArgs>
  }


  export type $FavoritesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Favorites"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs> | null
      institution: Prisma.$InstitutionPayload<ExtArgs> | null
      pacient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      pacientId: string
      doctorId: string | null
      institutionId: string | null
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["favorites"]>
    composites: {}
  }


  type FavoritesGetPayload<S extends boolean | null | undefined | FavoritesDefaultArgs> = $Result.GetResult<Prisma.$FavoritesPayload, S>

  type FavoritesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FavoritesFindManyArgs, 'select' | 'include'> & {
      select?: FavoritesCountAggregateInputType | true
    }

  export interface FavoritesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favorites'], meta: { name: 'Favorites' } }
    /**
     * Find zero or one Favorites that matches the filter.
     * @param {FavoritesFindUniqueArgs} args - Arguments to find a Favorites
     * @example
     * // Get one Favorites
     * const favorites = await prisma.favorites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavoritesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritesFindUniqueArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Favorites that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavoritesFindUniqueOrThrowArgs} args - Arguments to find a Favorites
     * @example
     * // Get one Favorites
     * const favorites = await prisma.favorites.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavoritesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesFindFirstArgs} args - Arguments to find a Favorites
     * @example
     * // Get one Favorites
     * const favorites = await prisma.favorites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavoritesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritesFindFirstArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Favorites that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesFindFirstOrThrowArgs} args - Arguments to find a Favorites
     * @example
     * // Get one Favorites
     * const favorites = await prisma.favorites.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavoritesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Favorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorites
     * const favorites = await prisma.favorites.findMany()
     * 
     * // Get first 10 Favorites
     * const favorites = await prisma.favorites.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const favoritesWithIdOnly = await prisma.favorites.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FavoritesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Favorites.
     * @param {FavoritesCreateArgs} args - Arguments to create a Favorites.
     * @example
     * // Create one Favorites
     * const Favorites = await prisma.favorites.create({
     *   data: {
     *     // ... data to create a Favorites
     *   }
     * })
     * 
    **/
    create<T extends FavoritesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritesCreateArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Favorites.
     *     @param {FavoritesCreateManyArgs} args - Arguments to create many Favorites.
     *     @example
     *     // Create many Favorites
     *     const favorites = await prisma.favorites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavoritesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Favorites.
     * @param {FavoritesDeleteArgs} args - Arguments to delete one Favorites.
     * @example
     * // Delete one Favorites
     * const Favorites = await prisma.favorites.delete({
     *   where: {
     *     // ... filter to delete one Favorites
     *   }
     * })
     * 
    **/
    delete<T extends FavoritesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritesDeleteArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Favorites.
     * @param {FavoritesUpdateArgs} args - Arguments to update one Favorites.
     * @example
     * // Update one Favorites
     * const favorites = await prisma.favorites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavoritesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritesUpdateArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Favorites.
     * @param {FavoritesDeleteManyArgs} args - Arguments to filter Favorites to delete.
     * @example
     * // Delete a few Favorites
     * const { count } = await prisma.favorites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavoritesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavoritesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorites
     * const favorites = await prisma.favorites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavoritesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favorites.
     * @param {FavoritesUpsertArgs} args - Arguments to update or create a Favorites.
     * @example
     * // Update or create a Favorites
     * const favorites = await prisma.favorites.upsert({
     *   create: {
     *     // ... data to create a Favorites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favorites we want to update
     *   }
     * })
    **/
    upsert<T extends FavoritesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavoritesUpsertArgs<ExtArgs>>
    ): Prisma__FavoritesClient<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesCountArgs} args - Arguments to filter Favorites to count.
     * @example
     * // Count the number of Favorites
     * const count = await prisma.favorites.count({
     *   where: {
     *     // ... the filter for the Favorites we want to count
     *   }
     * })
    **/
    count<T extends FavoritesCountArgs>(
      args?: Subset<T, FavoritesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavoritesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavoritesAggregateArgs>(args: Subset<T, FavoritesAggregateArgs>): Prisma.PrismaPromise<GetFavoritesAggregateType<T>>

    /**
     * Group by Favorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavoritesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavoritesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavoritesGroupByArgs['orderBy'] }
        : { orderBy?: FavoritesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavoritesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavoritesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favorites model
   */
  readonly fields: FavoritesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favorites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavoritesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    doctor<T extends Favorites$doctorArgs<ExtArgs> = {}>(args?: Subset<T, Favorites$doctorArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    institution<T extends Favorites$institutionArgs<ExtArgs> = {}>(args?: Subset<T, Favorites$institutionArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    pacient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Favorites model
   */ 
  interface FavoritesFieldRefs {
    readonly id: FieldRef<"Favorites", 'String'>
    readonly pacientId: FieldRef<"Favorites", 'String'>
    readonly doctorId: FieldRef<"Favorites", 'String'>
    readonly institutionId: FieldRef<"Favorites", 'String'>
    readonly createdAt: FieldRef<"Favorites", 'DateTime'>
    readonly updatedAt: FieldRef<"Favorites", 'DateTime'>
    readonly deletedAt: FieldRef<"Favorites", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Favorites findUnique
   */
  export type FavoritesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where: FavoritesWhereUniqueInput
  }


  /**
   * Favorites findUniqueOrThrow
   */
  export type FavoritesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where: FavoritesWhereUniqueInput
  }


  /**
   * Favorites findFirst
   */
  export type FavoritesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoritesScalarFieldEnum | FavoritesScalarFieldEnum[]
  }


  /**
   * Favorites findFirstOrThrow
   */
  export type FavoritesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorites.
     */
    cursor?: FavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorites.
     */
    distinct?: FavoritesScalarFieldEnum | FavoritesScalarFieldEnum[]
  }


  /**
   * Favorites findMany
   */
  export type FavoritesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * Filter, which Favorites to fetch.
     */
    where?: FavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorites to fetch.
     */
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorites.
     */
    cursor?: FavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorites.
     */
    skip?: number
    distinct?: FavoritesScalarFieldEnum | FavoritesScalarFieldEnum[]
  }


  /**
   * Favorites create
   */
  export type FavoritesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * The data needed to create a Favorites.
     */
    data: XOR<FavoritesCreateInput, FavoritesUncheckedCreateInput>
  }


  /**
   * Favorites createMany
   */
  export type FavoritesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorites.
     */
    data: FavoritesCreateManyInput | FavoritesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Favorites update
   */
  export type FavoritesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * The data needed to update a Favorites.
     */
    data: XOR<FavoritesUpdateInput, FavoritesUncheckedUpdateInput>
    /**
     * Choose, which Favorites to update.
     */
    where: FavoritesWhereUniqueInput
  }


  /**
   * Favorites updateMany
   */
  export type FavoritesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorites.
     */
    data: XOR<FavoritesUpdateManyMutationInput, FavoritesUncheckedUpdateManyInput>
    /**
     * Filter which Favorites to update
     */
    where?: FavoritesWhereInput
  }


  /**
   * Favorites upsert
   */
  export type FavoritesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * The filter to search for the Favorites to update in case it exists.
     */
    where: FavoritesWhereUniqueInput
    /**
     * In case the Favorites found by the `where` argument doesn't exist, create a new Favorites with this data.
     */
    create: XOR<FavoritesCreateInput, FavoritesUncheckedCreateInput>
    /**
     * In case the Favorites was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavoritesUpdateInput, FavoritesUncheckedUpdateInput>
  }


  /**
   * Favorites delete
   */
  export type FavoritesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    /**
     * Filter which Favorites to delete.
     */
    where: FavoritesWhereUniqueInput
  }


  /**
   * Favorites deleteMany
   */
  export type FavoritesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorites to delete
     */
    where?: FavoritesWhereInput
  }


  /**
   * Favorites.doctor
   */
  export type Favorites$doctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }


  /**
   * Favorites.institution
   */
  export type Favorites$institutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
  }


  /**
   * Favorites without action
   */
  export type FavoritesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
  }



  /**
   * Model Institution
   */

  export type AggregateInstitution = {
    _count: InstitutionCountAggregateOutputType | null
    _min: InstitutionMinAggregateOutputType | null
    _max: InstitutionMaxAggregateOutputType | null
  }

  export type InstitutionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    clinicLatitude: string | null
    cliniclongitude: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type InstitutionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    clinicLatitude: string | null
    cliniclongitude: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type InstitutionCountAggregateOutputType = {
    id: number
    userId: number
    clinicLatitude: number
    cliniclongitude: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type InstitutionMinAggregateInputType = {
    id?: true
    userId?: true
    clinicLatitude?: true
    cliniclongitude?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type InstitutionMaxAggregateInputType = {
    id?: true
    userId?: true
    clinicLatitude?: true
    cliniclongitude?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type InstitutionCountAggregateInputType = {
    id?: true
    userId?: true
    clinicLatitude?: true
    cliniclongitude?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type InstitutionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institution to aggregate.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Institutions
    **/
    _count?: true | InstitutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstitutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstitutionMaxAggregateInputType
  }

  export type GetInstitutionAggregateType<T extends InstitutionAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitution[P]>
      : GetScalarType<T[P], AggregateInstitution[P]>
  }




  export type InstitutionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: InstitutionWhereInput
    orderBy?: InstitutionOrderByWithAggregationInput | InstitutionOrderByWithAggregationInput[]
    by: InstitutionScalarFieldEnum[] | InstitutionScalarFieldEnum
    having?: InstitutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstitutionCountAggregateInputType | true
    _min?: InstitutionMinAggregateInputType
    _max?: InstitutionMaxAggregateInputType
  }

  export type InstitutionGroupByOutputType = {
    id: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: InstitutionCountAggregateOutputType | null
    _min: InstitutionMinAggregateOutputType | null
    _max: InstitutionMaxAggregateOutputType | null
  }

  type GetInstitutionGroupByPayload<T extends InstitutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstitutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstitutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstitutionGroupByOutputType[P]>
            : GetScalarType<T[P], InstitutionGroupByOutputType[P]>
        }
      >
    >


  export type InstitutionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    clinicLatitude?: boolean
    cliniclongitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    Admin?: boolean | Institution$AdminArgs<ExtArgs>
    Consultation?: boolean | Institution$ConsultationArgs<ExtArgs>
    service?: boolean | Institution$serviceArgs<ExtArgs>
    WeeklySchedule?: boolean | Institution$WeeklyScheduleArgs<ExtArgs>
    Doctor?: boolean | Institution$DoctorArgs<ExtArgs>
    ClinicRating?: boolean | Institution$ClinicRatingArgs<ExtArgs>
    Notification?: boolean | Institution$NotificationArgs<ExtArgs>
    Favorites?: boolean | Institution$FavoritesArgs<ExtArgs>
    medicalReport?: boolean | Institution$medicalReportArgs<ExtArgs>
    _count?: boolean | InstitutionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["institution"]>

  export type InstitutionSelectScalar = {
    id?: boolean
    userId?: boolean
    clinicLatitude?: boolean
    cliniclongitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type InstitutionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    Admin?: boolean | Institution$AdminArgs<ExtArgs>
    Consultation?: boolean | Institution$ConsultationArgs<ExtArgs>
    service?: boolean | Institution$serviceArgs<ExtArgs>
    WeeklySchedule?: boolean | Institution$WeeklyScheduleArgs<ExtArgs>
    Doctor?: boolean | Institution$DoctorArgs<ExtArgs>
    ClinicRating?: boolean | Institution$ClinicRatingArgs<ExtArgs>
    Notification?: boolean | Institution$NotificationArgs<ExtArgs>
    Favorites?: boolean | Institution$FavoritesArgs<ExtArgs>
    medicalReport?: boolean | Institution$medicalReportArgs<ExtArgs>
    _count?: boolean | InstitutionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InstitutionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Institution"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      Admin: Prisma.$AdminPayload<ExtArgs>[]
      Consultation: Prisma.$AppointmentPayload<ExtArgs>[]
      service: Prisma.$ServicesPayload<ExtArgs>[]
      WeeklySchedule: Prisma.$WeeklySchedulePayload<ExtArgs>[]
      Doctor: Prisma.$DoctorInstitutionPayload<ExtArgs>[]
      ClinicRating: Prisma.$ClinicRatingPayload<ExtArgs>[]
      Notification: Prisma.$NotificationPayload<ExtArgs>[]
      Favorites: Prisma.$FavoritesPayload<ExtArgs>[]
      medicalReport: Prisma.$MedicalReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      clinicLatitude: string
      cliniclongitude: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["institution"]>
    composites: {}
  }


  type InstitutionGetPayload<S extends boolean | null | undefined | InstitutionDefaultArgs> = $Result.GetResult<Prisma.$InstitutionPayload, S>

  type InstitutionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<InstitutionFindManyArgs, 'select' | 'include'> & {
      select?: InstitutionCountAggregateInputType | true
    }

  export interface InstitutionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Institution'], meta: { name: 'Institution' } }
    /**
     * Find zero or one Institution that matches the filter.
     * @param {InstitutionFindUniqueArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InstitutionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InstitutionFindUniqueArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Institution that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InstitutionFindUniqueOrThrowArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InstitutionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitutionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Institution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindFirstArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InstitutionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitutionFindFirstArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Institution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindFirstOrThrowArgs} args - Arguments to find a Institution
     * @example
     * // Get one Institution
     * const institution = await prisma.institution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InstitutionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitutionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Institutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Institutions
     * const institutions = await prisma.institution.findMany()
     * 
     * // Get first 10 Institutions
     * const institutions = await prisma.institution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const institutionWithIdOnly = await prisma.institution.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InstitutionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitutionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Institution.
     * @param {InstitutionCreateArgs} args - Arguments to create a Institution.
     * @example
     * // Create one Institution
     * const Institution = await prisma.institution.create({
     *   data: {
     *     // ... data to create a Institution
     *   }
     * })
     * 
    **/
    create<T extends InstitutionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InstitutionCreateArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Institutions.
     *     @param {InstitutionCreateManyArgs} args - Arguments to create many Institutions.
     *     @example
     *     // Create many Institutions
     *     const institution = await prisma.institution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InstitutionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitutionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Institution.
     * @param {InstitutionDeleteArgs} args - Arguments to delete one Institution.
     * @example
     * // Delete one Institution
     * const Institution = await prisma.institution.delete({
     *   where: {
     *     // ... filter to delete one Institution
     *   }
     * })
     * 
    **/
    delete<T extends InstitutionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InstitutionDeleteArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Institution.
     * @param {InstitutionUpdateArgs} args - Arguments to update one Institution.
     * @example
     * // Update one Institution
     * const institution = await prisma.institution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InstitutionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InstitutionUpdateArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Institutions.
     * @param {InstitutionDeleteManyArgs} args - Arguments to filter Institutions to delete.
     * @example
     * // Delete a few Institutions
     * const { count } = await prisma.institution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InstitutionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InstitutionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Institutions
     * const institution = await prisma.institution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InstitutionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InstitutionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Institution.
     * @param {InstitutionUpsertArgs} args - Arguments to update or create a Institution.
     * @example
     * // Update or create a Institution
     * const institution = await prisma.institution.upsert({
     *   create: {
     *     // ... data to create a Institution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Institution we want to update
     *   }
     * })
    **/
    upsert<T extends InstitutionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InstitutionUpsertArgs<ExtArgs>>
    ): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Institutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionCountArgs} args - Arguments to filter Institutions to count.
     * @example
     * // Count the number of Institutions
     * const count = await prisma.institution.count({
     *   where: {
     *     // ... the filter for the Institutions we want to count
     *   }
     * })
    **/
    count<T extends InstitutionCountArgs>(
      args?: Subset<T, InstitutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstitutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Institution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstitutionAggregateArgs>(args: Subset<T, InstitutionAggregateArgs>): Prisma.PrismaPromise<GetInstitutionAggregateType<T>>

    /**
     * Group by Institution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstitutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstitutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstitutionGroupByArgs['orderBy'] }
        : { orderBy?: InstitutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstitutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstitutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Institution model
   */
  readonly fields: InstitutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Institution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstitutionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Admin<T extends Institution$AdminArgs<ExtArgs> = {}>(args?: Subset<T, Institution$AdminArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'> | Null>;

    Consultation<T extends Institution$ConsultationArgs<ExtArgs> = {}>(args?: Subset<T, Institution$ConsultationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    service<T extends Institution$serviceArgs<ExtArgs> = {}>(args?: Subset<T, Institution$serviceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicesPayload<ExtArgs>, T, 'findMany'> | Null>;

    WeeklySchedule<T extends Institution$WeeklyScheduleArgs<ExtArgs> = {}>(args?: Subset<T, Institution$WeeklyScheduleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findMany'> | Null>;

    Doctor<T extends Institution$DoctorArgs<ExtArgs> = {}>(args?: Subset<T, Institution$DoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findMany'> | Null>;

    ClinicRating<T extends Institution$ClinicRatingArgs<ExtArgs> = {}>(args?: Subset<T, Institution$ClinicRatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClinicRatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notification<T extends Institution$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, Institution$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    Favorites<T extends Institution$FavoritesArgs<ExtArgs> = {}>(args?: Subset<T, Institution$FavoritesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavoritesPayload<ExtArgs>, T, 'findMany'> | Null>;

    medicalReport<T extends Institution$medicalReportArgs<ExtArgs> = {}>(args?: Subset<T, Institution$medicalReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Institution model
   */ 
  interface InstitutionFieldRefs {
    readonly id: FieldRef<"Institution", 'String'>
    readonly userId: FieldRef<"Institution", 'String'>
    readonly clinicLatitude: FieldRef<"Institution", 'String'>
    readonly cliniclongitude: FieldRef<"Institution", 'String'>
    readonly createdAt: FieldRef<"Institution", 'DateTime'>
    readonly updatedAt: FieldRef<"Institution", 'DateTime'>
    readonly deletedAt: FieldRef<"Institution", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Institution findUnique
   */
  export type InstitutionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where: InstitutionWhereUniqueInput
  }


  /**
   * Institution findUniqueOrThrow
   */
  export type InstitutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where: InstitutionWhereUniqueInput
  }


  /**
   * Institution findFirst
   */
  export type InstitutionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institutions.
     */
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }


  /**
   * Institution findFirstOrThrow
   */
  export type InstitutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institution to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Institutions.
     */
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }


  /**
   * Institution findMany
   */
  export type InstitutionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Institutions to fetch.
     */
    where?: InstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Institutions to fetch.
     */
    orderBy?: InstitutionOrderByWithRelationInput | InstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Institutions.
     */
    cursor?: InstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Institutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Institutions.
     */
    skip?: number
    distinct?: InstitutionScalarFieldEnum | InstitutionScalarFieldEnum[]
  }


  /**
   * Institution create
   */
  export type InstitutionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Institution.
     */
    data: XOR<InstitutionCreateInput, InstitutionUncheckedCreateInput>
  }


  /**
   * Institution createMany
   */
  export type InstitutionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Institutions.
     */
    data: InstitutionCreateManyInput | InstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Institution update
   */
  export type InstitutionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Institution.
     */
    data: XOR<InstitutionUpdateInput, InstitutionUncheckedUpdateInput>
    /**
     * Choose, which Institution to update.
     */
    where: InstitutionWhereUniqueInput
  }


  /**
   * Institution updateMany
   */
  export type InstitutionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Institutions.
     */
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyInput>
    /**
     * Filter which Institutions to update
     */
    where?: InstitutionWhereInput
  }


  /**
   * Institution upsert
   */
  export type InstitutionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Institution to update in case it exists.
     */
    where: InstitutionWhereUniqueInput
    /**
     * In case the Institution found by the `where` argument doesn't exist, create a new Institution with this data.
     */
    create: XOR<InstitutionCreateInput, InstitutionUncheckedCreateInput>
    /**
     * In case the Institution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstitutionUpdateInput, InstitutionUncheckedUpdateInput>
  }


  /**
   * Institution delete
   */
  export type InstitutionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    /**
     * Filter which Institution to delete.
     */
    where: InstitutionWhereUniqueInput
  }


  /**
   * Institution deleteMany
   */
  export type InstitutionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Institutions to delete
     */
    where?: InstitutionWhereInput
  }


  /**
   * Institution.Admin
   */
  export type Institution$AdminArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    cursor?: AdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Institution.Consultation
   */
  export type Institution$ConsultationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * Institution.service
   */
  export type Institution$serviceArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Services
     */
    select?: ServicesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ServicesInclude<ExtArgs> | null
    where?: ServicesWhereInput
    orderBy?: ServicesOrderByWithRelationInput | ServicesOrderByWithRelationInput[]
    cursor?: ServicesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServicesScalarFieldEnum | ServicesScalarFieldEnum[]
  }


  /**
   * Institution.WeeklySchedule
   */
  export type Institution$WeeklyScheduleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    cursor?: WeeklyScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }


  /**
   * Institution.Doctor
   */
  export type Institution$DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    where?: DoctorInstitutionWhereInput
    orderBy?: DoctorInstitutionOrderByWithRelationInput | DoctorInstitutionOrderByWithRelationInput[]
    cursor?: DoctorInstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoctorInstitutionScalarFieldEnum | DoctorInstitutionScalarFieldEnum[]
  }


  /**
   * Institution.ClinicRating
   */
  export type Institution$ClinicRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClinicRating
     */
    select?: ClinicRatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ClinicRatingInclude<ExtArgs> | null
    where?: ClinicRatingWhereInput
    orderBy?: ClinicRatingOrderByWithRelationInput | ClinicRatingOrderByWithRelationInput[]
    cursor?: ClinicRatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClinicRatingScalarFieldEnum | ClinicRatingScalarFieldEnum[]
  }


  /**
   * Institution.Notification
   */
  export type Institution$NotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Institution.Favorites
   */
  export type Institution$FavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favorites
     */
    select?: FavoritesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavoritesInclude<ExtArgs> | null
    where?: FavoritesWhereInput
    orderBy?: FavoritesOrderByWithRelationInput | FavoritesOrderByWithRelationInput[]
    cursor?: FavoritesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavoritesScalarFieldEnum | FavoritesScalarFieldEnum[]
  }


  /**
   * Institution.medicalReport
   */
  export type Institution$medicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    where?: MedicalReportWhereInput
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    cursor?: MedicalReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * Institution without action
   */
  export type InstitutionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
  }



  /**
   * Model DoctorInstitution
   */

  export type AggregateDoctorInstitution = {
    _count: DoctorInstitutionCountAggregateOutputType | null
    _min: DoctorInstitutionMinAggregateOutputType | null
    _max: DoctorInstitutionMaxAggregateOutputType | null
  }

  export type DoctorInstitutionMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    institutionId: string | null
  }

  export type DoctorInstitutionMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    institutionId: string | null
  }

  export type DoctorInstitutionCountAggregateOutputType = {
    id: number
    doctorId: number
    institutionId: number
    _all: number
  }


  export type DoctorInstitutionMinAggregateInputType = {
    id?: true
    doctorId?: true
    institutionId?: true
  }

  export type DoctorInstitutionMaxAggregateInputType = {
    id?: true
    doctorId?: true
    institutionId?: true
  }

  export type DoctorInstitutionCountAggregateInputType = {
    id?: true
    doctorId?: true
    institutionId?: true
    _all?: true
  }

  export type DoctorInstitutionAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorInstitution to aggregate.
     */
    where?: DoctorInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInstitutions to fetch.
     */
    orderBy?: DoctorInstitutionOrderByWithRelationInput | DoctorInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInstitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoctorInstitutions
    **/
    _count?: true | DoctorInstitutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorInstitutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorInstitutionMaxAggregateInputType
  }

  export type GetDoctorInstitutionAggregateType<T extends DoctorInstitutionAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctorInstitution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctorInstitution[P]>
      : GetScalarType<T[P], AggregateDoctorInstitution[P]>
  }




  export type DoctorInstitutionGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorInstitutionWhereInput
    orderBy?: DoctorInstitutionOrderByWithAggregationInput | DoctorInstitutionOrderByWithAggregationInput[]
    by: DoctorInstitutionScalarFieldEnum[] | DoctorInstitutionScalarFieldEnum
    having?: DoctorInstitutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorInstitutionCountAggregateInputType | true
    _min?: DoctorInstitutionMinAggregateInputType
    _max?: DoctorInstitutionMaxAggregateInputType
  }

  export type DoctorInstitutionGroupByOutputType = {
    id: string
    doctorId: string
    institutionId: string
    _count: DoctorInstitutionCountAggregateOutputType | null
    _min: DoctorInstitutionMinAggregateOutputType | null
    _max: DoctorInstitutionMaxAggregateOutputType | null
  }

  type GetDoctorInstitutionGroupByPayload<T extends DoctorInstitutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoctorInstitutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorInstitutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorInstitutionGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorInstitutionGroupByOutputType[P]>
        }
      >
    >


  export type DoctorInstitutionSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    institutionId?: boolean
    Doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doctorInstitution"]>

  export type DoctorInstitutionSelectScalar = {
    id?: boolean
    doctorId?: boolean
    institutionId?: boolean
  }

  export type DoctorInstitutionInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }


  export type $DoctorInstitutionPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "DoctorInstitution"
    objects: {
      Doctor: Prisma.$DoctorPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      doctorId: string
      institutionId: string
    }, ExtArgs["result"]["doctorInstitution"]>
    composites: {}
  }


  type DoctorInstitutionGetPayload<S extends boolean | null | undefined | DoctorInstitutionDefaultArgs> = $Result.GetResult<Prisma.$DoctorInstitutionPayload, S>

  type DoctorInstitutionCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DoctorInstitutionFindManyArgs, 'select' | 'include'> & {
      select?: DoctorInstitutionCountAggregateInputType | true
    }

  export interface DoctorInstitutionDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoctorInstitution'], meta: { name: 'DoctorInstitution' } }
    /**
     * Find zero or one DoctorInstitution that matches the filter.
     * @param {DoctorInstitutionFindUniqueArgs} args - Arguments to find a DoctorInstitution
     * @example
     * // Get one DoctorInstitution
     * const doctorInstitution = await prisma.doctorInstitution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorInstitutionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorInstitutionFindUniqueArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one DoctorInstitution that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DoctorInstitutionFindUniqueOrThrowArgs} args - Arguments to find a DoctorInstitution
     * @example
     * // Get one DoctorInstitution
     * const doctorInstitution = await prisma.doctorInstitution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoctorInstitutionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorInstitutionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first DoctorInstitution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionFindFirstArgs} args - Arguments to find a DoctorInstitution
     * @example
     * // Get one DoctorInstitution
     * const doctorInstitution = await prisma.doctorInstitution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorInstitutionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorInstitutionFindFirstArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first DoctorInstitution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionFindFirstOrThrowArgs} args - Arguments to find a DoctorInstitution
     * @example
     * // Get one DoctorInstitution
     * const doctorInstitution = await prisma.doctorInstitution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoctorInstitutionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorInstitutionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more DoctorInstitutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoctorInstitutions
     * const doctorInstitutions = await prisma.doctorInstitution.findMany()
     * 
     * // Get first 10 DoctorInstitutions
     * const doctorInstitutions = await prisma.doctorInstitution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorInstitutionWithIdOnly = await prisma.doctorInstitution.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorInstitutionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorInstitutionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a DoctorInstitution.
     * @param {DoctorInstitutionCreateArgs} args - Arguments to create a DoctorInstitution.
     * @example
     * // Create one DoctorInstitution
     * const DoctorInstitution = await prisma.doctorInstitution.create({
     *   data: {
     *     // ... data to create a DoctorInstitution
     *   }
     * })
     * 
    **/
    create<T extends DoctorInstitutionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorInstitutionCreateArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many DoctorInstitutions.
     *     @param {DoctorInstitutionCreateManyArgs} args - Arguments to create many DoctorInstitutions.
     *     @example
     *     // Create many DoctorInstitutions
     *     const doctorInstitution = await prisma.doctorInstitution.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoctorInstitutionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorInstitutionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DoctorInstitution.
     * @param {DoctorInstitutionDeleteArgs} args - Arguments to delete one DoctorInstitution.
     * @example
     * // Delete one DoctorInstitution
     * const DoctorInstitution = await prisma.doctorInstitution.delete({
     *   where: {
     *     // ... filter to delete one DoctorInstitution
     *   }
     * })
     * 
    **/
    delete<T extends DoctorInstitutionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorInstitutionDeleteArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one DoctorInstitution.
     * @param {DoctorInstitutionUpdateArgs} args - Arguments to update one DoctorInstitution.
     * @example
     * // Update one DoctorInstitution
     * const doctorInstitution = await prisma.doctorInstitution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorInstitutionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorInstitutionUpdateArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more DoctorInstitutions.
     * @param {DoctorInstitutionDeleteManyArgs} args - Arguments to filter DoctorInstitutions to delete.
     * @example
     * // Delete a few DoctorInstitutions
     * const { count } = await prisma.doctorInstitution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorInstitutionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorInstitutionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoctorInstitutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoctorInstitutions
     * const doctorInstitution = await prisma.doctorInstitution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorInstitutionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorInstitutionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DoctorInstitution.
     * @param {DoctorInstitutionUpsertArgs} args - Arguments to update or create a DoctorInstitution.
     * @example
     * // Update or create a DoctorInstitution
     * const doctorInstitution = await prisma.doctorInstitution.upsert({
     *   create: {
     *     // ... data to create a DoctorInstitution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoctorInstitution we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorInstitutionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorInstitutionUpsertArgs<ExtArgs>>
    ): Prisma__DoctorInstitutionClient<$Result.GetResult<Prisma.$DoctorInstitutionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of DoctorInstitutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionCountArgs} args - Arguments to filter DoctorInstitutions to count.
     * @example
     * // Count the number of DoctorInstitutions
     * const count = await prisma.doctorInstitution.count({
     *   where: {
     *     // ... the filter for the DoctorInstitutions we want to count
     *   }
     * })
    **/
    count<T extends DoctorInstitutionCountArgs>(
      args?: Subset<T, DoctorInstitutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorInstitutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoctorInstitution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorInstitutionAggregateArgs>(args: Subset<T, DoctorInstitutionAggregateArgs>): Prisma.PrismaPromise<GetDoctorInstitutionAggregateType<T>>

    /**
     * Group by DoctorInstitution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorInstitutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorInstitutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorInstitutionGroupByArgs['orderBy'] }
        : { orderBy?: DoctorInstitutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorInstitutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorInstitutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoctorInstitution model
   */
  readonly fields: DoctorInstitutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoctorInstitution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoctorInstitutionClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the DoctorInstitution model
   */ 
  interface DoctorInstitutionFieldRefs {
    readonly id: FieldRef<"DoctorInstitution", 'String'>
    readonly doctorId: FieldRef<"DoctorInstitution", 'String'>
    readonly institutionId: FieldRef<"DoctorInstitution", 'String'>
  }
    

  // Custom InputTypes

  /**
   * DoctorInstitution findUnique
   */
  export type DoctorInstitutionFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInstitution to fetch.
     */
    where: DoctorInstitutionWhereUniqueInput
  }


  /**
   * DoctorInstitution findUniqueOrThrow
   */
  export type DoctorInstitutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInstitution to fetch.
     */
    where: DoctorInstitutionWhereUniqueInput
  }


  /**
   * DoctorInstitution findFirst
   */
  export type DoctorInstitutionFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInstitution to fetch.
     */
    where?: DoctorInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInstitutions to fetch.
     */
    orderBy?: DoctorInstitutionOrderByWithRelationInput | DoctorInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorInstitutions.
     */
    cursor?: DoctorInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInstitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorInstitutions.
     */
    distinct?: DoctorInstitutionScalarFieldEnum | DoctorInstitutionScalarFieldEnum[]
  }


  /**
   * DoctorInstitution findFirstOrThrow
   */
  export type DoctorInstitutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInstitution to fetch.
     */
    where?: DoctorInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInstitutions to fetch.
     */
    orderBy?: DoctorInstitutionOrderByWithRelationInput | DoctorInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoctorInstitutions.
     */
    cursor?: DoctorInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInstitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoctorInstitutions.
     */
    distinct?: DoctorInstitutionScalarFieldEnum | DoctorInstitutionScalarFieldEnum[]
  }


  /**
   * DoctorInstitution findMany
   */
  export type DoctorInstitutionFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * Filter, which DoctorInstitutions to fetch.
     */
    where?: DoctorInstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoctorInstitutions to fetch.
     */
    orderBy?: DoctorInstitutionOrderByWithRelationInput | DoctorInstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoctorInstitutions.
     */
    cursor?: DoctorInstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoctorInstitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoctorInstitutions.
     */
    skip?: number
    distinct?: DoctorInstitutionScalarFieldEnum | DoctorInstitutionScalarFieldEnum[]
  }


  /**
   * DoctorInstitution create
   */
  export type DoctorInstitutionCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * The data needed to create a DoctorInstitution.
     */
    data: XOR<DoctorInstitutionCreateInput, DoctorInstitutionUncheckedCreateInput>
  }


  /**
   * DoctorInstitution createMany
   */
  export type DoctorInstitutionCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoctorInstitutions.
     */
    data: DoctorInstitutionCreateManyInput | DoctorInstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * DoctorInstitution update
   */
  export type DoctorInstitutionUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * The data needed to update a DoctorInstitution.
     */
    data: XOR<DoctorInstitutionUpdateInput, DoctorInstitutionUncheckedUpdateInput>
    /**
     * Choose, which DoctorInstitution to update.
     */
    where: DoctorInstitutionWhereUniqueInput
  }


  /**
   * DoctorInstitution updateMany
   */
  export type DoctorInstitutionUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoctorInstitutions.
     */
    data: XOR<DoctorInstitutionUpdateManyMutationInput, DoctorInstitutionUncheckedUpdateManyInput>
    /**
     * Filter which DoctorInstitutions to update
     */
    where?: DoctorInstitutionWhereInput
  }


  /**
   * DoctorInstitution upsert
   */
  export type DoctorInstitutionUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * The filter to search for the DoctorInstitution to update in case it exists.
     */
    where: DoctorInstitutionWhereUniqueInput
    /**
     * In case the DoctorInstitution found by the `where` argument doesn't exist, create a new DoctorInstitution with this data.
     */
    create: XOR<DoctorInstitutionCreateInput, DoctorInstitutionUncheckedCreateInput>
    /**
     * In case the DoctorInstitution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorInstitutionUpdateInput, DoctorInstitutionUncheckedUpdateInput>
  }


  /**
   * DoctorInstitution delete
   */
  export type DoctorInstitutionDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
    /**
     * Filter which DoctorInstitution to delete.
     */
    where: DoctorInstitutionWhereUniqueInput
  }


  /**
   * DoctorInstitution deleteMany
   */
  export type DoctorInstitutionDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoctorInstitutions to delete
     */
    where?: DoctorInstitutionWhereInput
  }


  /**
   * DoctorInstitution without action
   */
  export type DoctorInstitutionDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorInstitution
     */
    select?: DoctorInstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInstitutionInclude<ExtArgs> | null
  }



  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    userId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    institutionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    userId: number
    institutionId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    userId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    userId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    userId?: true
    institutionId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    userId: string
    institutionId: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    userId?: boolean
    institutionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type AdminInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }


  export type $AdminPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      institutionId: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }


  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly userId: FieldRef<"Admin", 'String'>
    readonly institutionId: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly updatedAt: FieldRef<"Admin", 'DateTime'>
    readonly deletedAt: FieldRef<"Admin", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }


  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdminInclude<ExtArgs> | null
  }



  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    institutionId: string | null
    consultationTypeId: string | null
    doctorId: string | null
    symptomDescription: string | null
    isUrgent: boolean | null
    date: Date | null
    status: $Enums.AppointmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    institutionId: string | null
    consultationTypeId: string | null
    doctorId: string | null
    symptomDescription: string | null
    isUrgent: boolean | null
    date: Date | null
    status: $Enums.AppointmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    institutionId: number
    consultationTypeId: number
    doctorId: number
    symptomDescription: number
    isUrgent: number
    date: number
    status: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    institutionId?: true
    consultationTypeId?: true
    doctorId?: true
    symptomDescription?: true
    isUrgent?: true
    date?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    institutionId?: true
    consultationTypeId?: true
    doctorId?: true
    symptomDescription?: true
    isUrgent?: true
    date?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    institutionId?: true
    consultationTypeId?: true
    doctorId?: true
    symptomDescription?: true
    isUrgent?: true
    date?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent: boolean | null
    date: Date
    status: $Enums.AppointmentStatus
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    institutionId?: boolean
    consultationTypeId?: boolean
    doctorId?: boolean
    symptomDescription?: boolean
    isUrgent?: boolean
    date?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    pacient?: boolean | PatientDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    consultationType?: boolean | ConsultationTypeDefaultArgs<ExtArgs>
    Doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    medicalHistories?: boolean | Appointment$medicalHistoriesArgs<ExtArgs>
    medicalReport?: boolean | Appointment$medicalReportArgs<ExtArgs>
    Rating?: boolean | Appointment$RatingArgs<ExtArgs>
    Notification?: boolean | Appointment$NotificationArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    institutionId?: boolean
    consultationTypeId?: boolean
    doctorId?: boolean
    symptomDescription?: boolean
    isUrgent?: boolean
    date?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type AppointmentInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    pacient?: boolean | PatientDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    consultationType?: boolean | ConsultationTypeDefaultArgs<ExtArgs>
    Doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    medicalHistories?: boolean | Appointment$medicalHistoriesArgs<ExtArgs>
    medicalReport?: boolean | Appointment$medicalReportArgs<ExtArgs>
    Rating?: boolean | Appointment$RatingArgs<ExtArgs>
    Notification?: boolean | Appointment$NotificationArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AppointmentPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      pacient: Prisma.$PatientPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs>
      consultationType: Prisma.$ConsultationTypePayload<ExtArgs>
      Doctor: Prisma.$DoctorPayload<ExtArgs>
      medicalHistories: Prisma.$MedicalHistoryPayload<ExtArgs>[]
      medicalReport: Prisma.$MedicalReportPayload<ExtArgs>[]
      Rating: Prisma.$RatingPayload<ExtArgs>[]
      Notification: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      patientId: string
      institutionId: string
      consultationTypeId: string
      doctorId: string
      symptomDescription: string
      isUrgent: boolean | null
      date: Date
      status: $Enums.AppointmentStatus
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }


  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AppointmentFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Appointment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppointmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends AppointmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Appointments.
     *     @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointment = await prisma.appointment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pacient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    consultationType<T extends ConsultationTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ConsultationTypeDefaultArgs<ExtArgs>>): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    medicalHistories<T extends Appointment$medicalHistoriesArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$medicalHistoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    medicalReport<T extends Appointment$medicalReportArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$medicalReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findMany'> | Null>;

    Rating<T extends Appointment$RatingArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$RatingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RatingPayload<ExtArgs>, T, 'findMany'> | Null>;

    Notification<T extends Appointment$NotificationArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$NotificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Appointment model
   */ 
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly patientId: FieldRef<"Appointment", 'String'>
    readonly institutionId: FieldRef<"Appointment", 'String'>
    readonly consultationTypeId: FieldRef<"Appointment", 'String'>
    readonly doctorId: FieldRef<"Appointment", 'String'>
    readonly symptomDescription: FieldRef<"Appointment", 'String'>
    readonly isUrgent: FieldRef<"Appointment", 'Boolean'>
    readonly date: FieldRef<"Appointment", 'DateTime'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
    readonly deletedAt: FieldRef<"Appointment", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }


  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
  }


  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }


  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
  }


  /**
   * Appointment.medicalHistories
   */
  export type Appointment$medicalHistoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    where?: MedicalHistoryWhereInput
    orderBy?: MedicalHistoryOrderByWithRelationInput | MedicalHistoryOrderByWithRelationInput[]
    cursor?: MedicalHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalHistoryScalarFieldEnum | MedicalHistoryScalarFieldEnum[]
  }


  /**
   * Appointment.medicalReport
   */
  export type Appointment$medicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    where?: MedicalReportWhereInput
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    cursor?: MedicalReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * Appointment.Rating
   */
  export type Appointment$RatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rating
     */
    select?: RatingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RatingInclude<ExtArgs> | null
    where?: RatingWhereInput
    orderBy?: RatingOrderByWithRelationInput | RatingOrderByWithRelationInput[]
    cursor?: RatingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RatingScalarFieldEnum | RatingScalarFieldEnum[]
  }


  /**
   * Appointment.Notification
   */
  export type Appointment$NotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
  }



  /**
   * Model ConsultationType
   */

  export type AggregateConsultationType = {
    _count: ConsultationTypeCountAggregateOutputType | null
    _min: ConsultationTypeMinAggregateOutputType | null
    _max: ConsultationTypeMaxAggregateOutputType | null
  }

  export type ConsultationTypeMinAggregateOutputType = {
    id: string | null
    description: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type ConsultationTypeMaxAggregateOutputType = {
    id: string | null
    description: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type ConsultationTypeCountAggregateOutputType = {
    id: number
    description: number
    name: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type ConsultationTypeMinAggregateInputType = {
    id?: true
    description?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ConsultationTypeMaxAggregateInputType = {
    id?: true
    description?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ConsultationTypeCountAggregateInputType = {
    id?: true
    description?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type ConsultationTypeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsultationType to aggregate.
     */
    where?: ConsultationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsultationTypes to fetch.
     */
    orderBy?: ConsultationTypeOrderByWithRelationInput | ConsultationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsultationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsultationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsultationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsultationTypes
    **/
    _count?: true | ConsultationTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultationTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultationTypeMaxAggregateInputType
  }

  export type GetConsultationTypeAggregateType<T extends ConsultationTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateConsultationType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsultationType[P]>
      : GetScalarType<T[P], AggregateConsultationType[P]>
  }




  export type ConsultationTypeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ConsultationTypeWhereInput
    orderBy?: ConsultationTypeOrderByWithAggregationInput | ConsultationTypeOrderByWithAggregationInput[]
    by: ConsultationTypeScalarFieldEnum[] | ConsultationTypeScalarFieldEnum
    having?: ConsultationTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultationTypeCountAggregateInputType | true
    _min?: ConsultationTypeMinAggregateInputType
    _max?: ConsultationTypeMaxAggregateInputType
  }

  export type ConsultationTypeGroupByOutputType = {
    id: string
    description: string
    name: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: ConsultationTypeCountAggregateOutputType | null
    _min: ConsultationTypeMinAggregateOutputType | null
    _max: ConsultationTypeMaxAggregateOutputType | null
  }

  type GetConsultationTypeGroupByPayload<T extends ConsultationTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultationTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultationTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultationTypeGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultationTypeGroupByOutputType[P]>
        }
      >
    >


  export type ConsultationTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    Consultation?: boolean | ConsultationType$ConsultationArgs<ExtArgs>
    _count?: boolean | ConsultationTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consultationType"]>

  export type ConsultationTypeSelectScalar = {
    id?: boolean
    description?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type ConsultationTypeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Consultation?: boolean | ConsultationType$ConsultationArgs<ExtArgs>
    _count?: boolean | ConsultationTypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ConsultationTypePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ConsultationType"
    objects: {
      Consultation: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      description: string
      name: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["consultationType"]>
    composites: {}
  }


  type ConsultationTypeGetPayload<S extends boolean | null | undefined | ConsultationTypeDefaultArgs> = $Result.GetResult<Prisma.$ConsultationTypePayload, S>

  type ConsultationTypeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ConsultationTypeFindManyArgs, 'select' | 'include'> & {
      select?: ConsultationTypeCountAggregateInputType | true
    }

  export interface ConsultationTypeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsultationType'], meta: { name: 'ConsultationType' } }
    /**
     * Find zero or one ConsultationType that matches the filter.
     * @param {ConsultationTypeFindUniqueArgs} args - Arguments to find a ConsultationType
     * @example
     * // Get one ConsultationType
     * const consultationType = await prisma.consultationType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConsultationTypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ConsultationTypeFindUniqueArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ConsultationType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ConsultationTypeFindUniqueOrThrowArgs} args - Arguments to find a ConsultationType
     * @example
     * // Get one ConsultationType
     * const consultationType = await prisma.consultationType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ConsultationTypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsultationTypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ConsultationType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeFindFirstArgs} args - Arguments to find a ConsultationType
     * @example
     * // Get one ConsultationType
     * const consultationType = await prisma.consultationType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConsultationTypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsultationTypeFindFirstArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ConsultationType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeFindFirstOrThrowArgs} args - Arguments to find a ConsultationType
     * @example
     * // Get one ConsultationType
     * const consultationType = await prisma.consultationType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ConsultationTypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsultationTypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ConsultationTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsultationTypes
     * const consultationTypes = await prisma.consultationType.findMany()
     * 
     * // Get first 10 ConsultationTypes
     * const consultationTypes = await prisma.consultationType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultationTypeWithIdOnly = await prisma.consultationType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConsultationTypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsultationTypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ConsultationType.
     * @param {ConsultationTypeCreateArgs} args - Arguments to create a ConsultationType.
     * @example
     * // Create one ConsultationType
     * const ConsultationType = await prisma.consultationType.create({
     *   data: {
     *     // ... data to create a ConsultationType
     *   }
     * })
     * 
    **/
    create<T extends ConsultationTypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ConsultationTypeCreateArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ConsultationTypes.
     *     @param {ConsultationTypeCreateManyArgs} args - Arguments to create many ConsultationTypes.
     *     @example
     *     // Create many ConsultationTypes
     *     const consultationType = await prisma.consultationType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConsultationTypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsultationTypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ConsultationType.
     * @param {ConsultationTypeDeleteArgs} args - Arguments to delete one ConsultationType.
     * @example
     * // Delete one ConsultationType
     * const ConsultationType = await prisma.consultationType.delete({
     *   where: {
     *     // ... filter to delete one ConsultationType
     *   }
     * })
     * 
    **/
    delete<T extends ConsultationTypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ConsultationTypeDeleteArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ConsultationType.
     * @param {ConsultationTypeUpdateArgs} args - Arguments to update one ConsultationType.
     * @example
     * // Update one ConsultationType
     * const consultationType = await prisma.consultationType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConsultationTypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ConsultationTypeUpdateArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ConsultationTypes.
     * @param {ConsultationTypeDeleteManyArgs} args - Arguments to filter ConsultationTypes to delete.
     * @example
     * // Delete a few ConsultationTypes
     * const { count } = await prisma.consultationType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConsultationTypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ConsultationTypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsultationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsultationTypes
     * const consultationType = await prisma.consultationType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConsultationTypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ConsultationTypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ConsultationType.
     * @param {ConsultationTypeUpsertArgs} args - Arguments to update or create a ConsultationType.
     * @example
     * // Update or create a ConsultationType
     * const consultationType = await prisma.consultationType.upsert({
     *   create: {
     *     // ... data to create a ConsultationType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsultationType we want to update
     *   }
     * })
    **/
    upsert<T extends ConsultationTypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ConsultationTypeUpsertArgs<ExtArgs>>
    ): Prisma__ConsultationTypeClient<$Result.GetResult<Prisma.$ConsultationTypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ConsultationTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeCountArgs} args - Arguments to filter ConsultationTypes to count.
     * @example
     * // Count the number of ConsultationTypes
     * const count = await prisma.consultationType.count({
     *   where: {
     *     // ... the filter for the ConsultationTypes we want to count
     *   }
     * })
    **/
    count<T extends ConsultationTypeCountArgs>(
      args?: Subset<T, ConsultationTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultationTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsultationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultationTypeAggregateArgs>(args: Subset<T, ConsultationTypeAggregateArgs>): Prisma.PrismaPromise<GetConsultationTypeAggregateType<T>>

    /**
     * Group by ConsultationType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultationTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsultationTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsultationTypeGroupByArgs['orderBy'] }
        : { orderBy?: ConsultationTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsultationTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultationTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsultationType model
   */
  readonly fields: ConsultationTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsultationType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsultationTypeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Consultation<T extends ConsultationType$ConsultationArgs<ExtArgs> = {}>(args?: Subset<T, ConsultationType$ConsultationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ConsultationType model
   */ 
  interface ConsultationTypeFieldRefs {
    readonly id: FieldRef<"ConsultationType", 'String'>
    readonly description: FieldRef<"ConsultationType", 'String'>
    readonly name: FieldRef<"ConsultationType", 'String'>
    readonly createdAt: FieldRef<"ConsultationType", 'DateTime'>
    readonly updatedAt: FieldRef<"ConsultationType", 'DateTime'>
    readonly deletedAt: FieldRef<"ConsultationType", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ConsultationType findUnique
   */
  export type ConsultationTypeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * Filter, which ConsultationType to fetch.
     */
    where: ConsultationTypeWhereUniqueInput
  }


  /**
   * ConsultationType findUniqueOrThrow
   */
  export type ConsultationTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * Filter, which ConsultationType to fetch.
     */
    where: ConsultationTypeWhereUniqueInput
  }


  /**
   * ConsultationType findFirst
   */
  export type ConsultationTypeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * Filter, which ConsultationType to fetch.
     */
    where?: ConsultationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsultationTypes to fetch.
     */
    orderBy?: ConsultationTypeOrderByWithRelationInput | ConsultationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsultationTypes.
     */
    cursor?: ConsultationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsultationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsultationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsultationTypes.
     */
    distinct?: ConsultationTypeScalarFieldEnum | ConsultationTypeScalarFieldEnum[]
  }


  /**
   * ConsultationType findFirstOrThrow
   */
  export type ConsultationTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * Filter, which ConsultationType to fetch.
     */
    where?: ConsultationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsultationTypes to fetch.
     */
    orderBy?: ConsultationTypeOrderByWithRelationInput | ConsultationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsultationTypes.
     */
    cursor?: ConsultationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsultationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsultationTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsultationTypes.
     */
    distinct?: ConsultationTypeScalarFieldEnum | ConsultationTypeScalarFieldEnum[]
  }


  /**
   * ConsultationType findMany
   */
  export type ConsultationTypeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * Filter, which ConsultationTypes to fetch.
     */
    where?: ConsultationTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsultationTypes to fetch.
     */
    orderBy?: ConsultationTypeOrderByWithRelationInput | ConsultationTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsultationTypes.
     */
    cursor?: ConsultationTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsultationTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsultationTypes.
     */
    skip?: number
    distinct?: ConsultationTypeScalarFieldEnum | ConsultationTypeScalarFieldEnum[]
  }


  /**
   * ConsultationType create
   */
  export type ConsultationTypeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsultationType.
     */
    data: XOR<ConsultationTypeCreateInput, ConsultationTypeUncheckedCreateInput>
  }


  /**
   * ConsultationType createMany
   */
  export type ConsultationTypeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsultationTypes.
     */
    data: ConsultationTypeCreateManyInput | ConsultationTypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ConsultationType update
   */
  export type ConsultationTypeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsultationType.
     */
    data: XOR<ConsultationTypeUpdateInput, ConsultationTypeUncheckedUpdateInput>
    /**
     * Choose, which ConsultationType to update.
     */
    where: ConsultationTypeWhereUniqueInput
  }


  /**
   * ConsultationType updateMany
   */
  export type ConsultationTypeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsultationTypes.
     */
    data: XOR<ConsultationTypeUpdateManyMutationInput, ConsultationTypeUncheckedUpdateManyInput>
    /**
     * Filter which ConsultationTypes to update
     */
    where?: ConsultationTypeWhereInput
  }


  /**
   * ConsultationType upsert
   */
  export type ConsultationTypeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsultationType to update in case it exists.
     */
    where: ConsultationTypeWhereUniqueInput
    /**
     * In case the ConsultationType found by the `where` argument doesn't exist, create a new ConsultationType with this data.
     */
    create: XOR<ConsultationTypeCreateInput, ConsultationTypeUncheckedCreateInput>
    /**
     * In case the ConsultationType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsultationTypeUpdateInput, ConsultationTypeUncheckedUpdateInput>
  }


  /**
   * ConsultationType delete
   */
  export type ConsultationTypeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
    /**
     * Filter which ConsultationType to delete.
     */
    where: ConsultationTypeWhereUniqueInput
  }


  /**
   * ConsultationType deleteMany
   */
  export type ConsultationTypeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsultationTypes to delete
     */
    where?: ConsultationTypeWhereInput
  }


  /**
   * ConsultationType.Consultation
   */
  export type ConsultationType$ConsultationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }


  /**
   * ConsultationType without action
   */
  export type ConsultationTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsultationType
     */
    select?: ConsultationTypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ConsultationTypeInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    content: string | null
    doctor_id: string | null
    patient_id: string | null
    institution_id: string | null
    appointmentId: string | null
    read: boolean | null
    type: $Enums.TypeNotification | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    content: string | null
    doctor_id: string | null
    patient_id: string | null
    institution_id: string | null
    appointmentId: string | null
    read: boolean | null
    type: $Enums.TypeNotification | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    content: number
    doctor_id: number
    patient_id: number
    institution_id: number
    appointmentId: number
    read: number
    type: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    content?: true
    doctor_id?: true
    patient_id?: true
    institution_id?: true
    appointmentId?: true
    read?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    content?: true
    doctor_id?: true
    patient_id?: true
    institution_id?: true
    appointmentId?: true
    read?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    content?: true
    doctor_id?: true
    patient_id?: true
    institution_id?: true
    appointmentId?: true
    read?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    content: string
    doctor_id: string | null
    patient_id: string | null
    institution_id: string | null
    appointmentId: string | null
    read: boolean
    type: $Enums.TypeNotification | null
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    doctor_id?: boolean
    patient_id?: boolean
    institution_id?: boolean
    appointmentId?: boolean
    read?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    Doctor?: boolean | Notification$DoctorArgs<ExtArgs>
    Patient?: boolean | Notification$PatientArgs<ExtArgs>
    Institution?: boolean | Notification$InstitutionArgs<ExtArgs>
    Appointment?: boolean | Notification$AppointmentArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    content?: boolean
    doctor_id?: boolean
    patient_id?: boolean
    institution_id?: boolean
    appointmentId?: boolean
    read?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Doctor?: boolean | Notification$DoctorArgs<ExtArgs>
    Patient?: boolean | Notification$PatientArgs<ExtArgs>
    Institution?: boolean | Notification$InstitutionArgs<ExtArgs>
    Appointment?: boolean | Notification$AppointmentArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      Doctor: Prisma.$DoctorPayload<ExtArgs> | null
      Patient: Prisma.$PatientPayload<ExtArgs> | null
      Institution: Prisma.$InstitutionPayload<ExtArgs> | null
      Appointment: Prisma.$AppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: string
      content: string
      doctor_id: string | null
      patient_id: string | null
      institution_id: string | null
      appointmentId: string | null
      read: boolean
      type: $Enums.TypeNotification | null
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Doctor<T extends Notification$DoctorArgs<ExtArgs> = {}>(args?: Subset<T, Notification$DoctorArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Patient<T extends Notification$PatientArgs<ExtArgs> = {}>(args?: Subset<T, Notification$PatientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Institution<T extends Notification$InstitutionArgs<ExtArgs> = {}>(args?: Subset<T, Notification$InstitutionArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Appointment<T extends Notification$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Notification$AppointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly content: FieldRef<"Notification", 'String'>
    readonly doctor_id: FieldRef<"Notification", 'String'>
    readonly patient_id: FieldRef<"Notification", 'String'>
    readonly institution_id: FieldRef<"Notification", 'String'>
    readonly appointmentId: FieldRef<"Notification", 'String'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly type: FieldRef<"Notification", 'TypeNotification'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
    readonly deletedAt: FieldRef<"Notification", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification.Doctor
   */
  export type Notification$DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
  }


  /**
   * Notification.Patient
   */
  export type Notification$PatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }


  /**
   * Notification.Institution
   */
  export type Notification$InstitutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Institution
     */
    select?: InstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InstitutionInclude<ExtArgs> | null
    where?: InstitutionWhereInput
  }


  /**
   * Notification.Appointment
   */
  export type Notification$AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Model WeeklySchedule
   */

  export type AggregateWeeklySchedule = {
    _count: WeeklyScheduleCountAggregateOutputType | null
    _avg: WeeklyScheduleAvgAggregateOutputType | null
    _sum: WeeklyScheduleSumAggregateOutputType | null
    _min: WeeklyScheduleMinAggregateOutputType | null
    _max: WeeklyScheduleMaxAggregateOutputType | null
  }

  export type WeeklyScheduleAvgAggregateOutputType = {
    startTime: number | null
    endTime: number | null
    interval: number | null
    dailyWorkingHours: number | null
  }

  export type WeeklyScheduleSumAggregateOutputType = {
    startTime: number | null
    endTime: number | null
    interval: number | null
    dailyWorkingHours: number | null
  }

  export type WeeklyScheduleMinAggregateOutputType = {
    id: string | null
    doctorId: string | null
    institutionId: string | null
    dayOfWeek: Date | null
    startTime: number | null
    endTime: number | null
    interval: number | null
    dailyWorkingHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeeklyScheduleMaxAggregateOutputType = {
    id: string | null
    doctorId: string | null
    institutionId: string | null
    dayOfWeek: Date | null
    startTime: number | null
    endTime: number | null
    interval: number | null
    dailyWorkingHours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WeeklyScheduleCountAggregateOutputType = {
    id: number
    doctorId: number
    institutionId: number
    dayOfWeek: number
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WeeklyScheduleAvgAggregateInputType = {
    startTime?: true
    endTime?: true
    interval?: true
    dailyWorkingHours?: true
  }

  export type WeeklyScheduleSumAggregateInputType = {
    startTime?: true
    endTime?: true
    interval?: true
    dailyWorkingHours?: true
  }

  export type WeeklyScheduleMinAggregateInputType = {
    id?: true
    doctorId?: true
    institutionId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    interval?: true
    dailyWorkingHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeeklyScheduleMaxAggregateInputType = {
    id?: true
    doctorId?: true
    institutionId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    interval?: true
    dailyWorkingHours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WeeklyScheduleCountAggregateInputType = {
    id?: true
    doctorId?: true
    institutionId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    interval?: true
    dailyWorkingHours?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WeeklyScheduleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklySchedule to aggregate.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WeeklySchedules
    **/
    _count?: true | WeeklyScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WeeklyScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WeeklyScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WeeklyScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WeeklyScheduleMaxAggregateInputType
  }

  export type GetWeeklyScheduleAggregateType<T extends WeeklyScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateWeeklySchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWeeklySchedule[P]>
      : GetScalarType<T[P], AggregateWeeklySchedule[P]>
  }




  export type WeeklyScheduleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WeeklyScheduleWhereInput
    orderBy?: WeeklyScheduleOrderByWithAggregationInput | WeeklyScheduleOrderByWithAggregationInput[]
    by: WeeklyScheduleScalarFieldEnum[] | WeeklyScheduleScalarFieldEnum
    having?: WeeklyScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WeeklyScheduleCountAggregateInputType | true
    _avg?: WeeklyScheduleAvgAggregateInputType
    _sum?: WeeklyScheduleSumAggregateInputType
    _min?: WeeklyScheduleMinAggregateInputType
    _max?: WeeklyScheduleMaxAggregateInputType
  }

  export type WeeklyScheduleGroupByOutputType = {
    id: string
    doctorId: string
    institutionId: string
    dayOfWeek: Date
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt: Date
    updatedAt: Date
    _count: WeeklyScheduleCountAggregateOutputType | null
    _avg: WeeklyScheduleAvgAggregateOutputType | null
    _sum: WeeklyScheduleSumAggregateOutputType | null
    _min: WeeklyScheduleMinAggregateOutputType | null
    _max: WeeklyScheduleMaxAggregateOutputType | null
  }

  type GetWeeklyScheduleGroupByPayload<T extends WeeklyScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WeeklyScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WeeklyScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WeeklyScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], WeeklyScheduleGroupByOutputType[P]>
        }
      >
    >


  export type WeeklyScheduleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    doctorId?: boolean
    institutionId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    interval?: boolean
    dailyWorkingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["weeklySchedule"]>

  export type WeeklyScheduleSelectScalar = {
    id?: boolean
    doctorId?: boolean
    institutionId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    interval?: boolean
    dailyWorkingHours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WeeklyScheduleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
  }


  export type $WeeklySchedulePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "WeeklySchedule"
    objects: {
      doctor: Prisma.$DoctorPayload<ExtArgs>
      institution: Prisma.$InstitutionPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      doctorId: string
      institutionId: string
      dayOfWeek: Date
      startTime: number
      endTime: number
      interval: number
      dailyWorkingHours: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["weeklySchedule"]>
    composites: {}
  }


  type WeeklyScheduleGetPayload<S extends boolean | null | undefined | WeeklyScheduleDefaultArgs> = $Result.GetResult<Prisma.$WeeklySchedulePayload, S>

  type WeeklyScheduleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WeeklyScheduleFindManyArgs, 'select' | 'include'> & {
      select?: WeeklyScheduleCountAggregateInputType | true
    }

  export interface WeeklyScheduleDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WeeklySchedule'], meta: { name: 'WeeklySchedule' } }
    /**
     * Find zero or one WeeklySchedule that matches the filter.
     * @param {WeeklyScheduleFindUniqueArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WeeklyScheduleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WeeklyScheduleFindUniqueArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WeeklySchedule that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WeeklyScheduleFindUniqueOrThrowArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WeeklySchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleFindFirstArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WeeklyScheduleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WeeklyScheduleFindFirstArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WeeklySchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleFindFirstOrThrowArgs} args - Arguments to find a WeeklySchedule
     * @example
     * // Get one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WeeklyScheduleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WeeklyScheduleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WeeklySchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WeeklySchedules
     * const weeklySchedules = await prisma.weeklySchedule.findMany()
     * 
     * // Get first 10 WeeklySchedules
     * const weeklySchedules = await prisma.weeklySchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const weeklyScheduleWithIdOnly = await prisma.weeklySchedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WeeklyScheduleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeeklyScheduleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WeeklySchedule.
     * @param {WeeklyScheduleCreateArgs} args - Arguments to create a WeeklySchedule.
     * @example
     * // Create one WeeklySchedule
     * const WeeklySchedule = await prisma.weeklySchedule.create({
     *   data: {
     *     // ... data to create a WeeklySchedule
     *   }
     * })
     * 
    **/
    create<T extends WeeklyScheduleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WeeklyScheduleCreateArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WeeklySchedules.
     *     @param {WeeklyScheduleCreateManyArgs} args - Arguments to create many WeeklySchedules.
     *     @example
     *     // Create many WeeklySchedules
     *     const weeklySchedule = await prisma.weeklySchedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WeeklyScheduleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeeklyScheduleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WeeklySchedule.
     * @param {WeeklyScheduleDeleteArgs} args - Arguments to delete one WeeklySchedule.
     * @example
     * // Delete one WeeklySchedule
     * const WeeklySchedule = await prisma.weeklySchedule.delete({
     *   where: {
     *     // ... filter to delete one WeeklySchedule
     *   }
     * })
     * 
    **/
    delete<T extends WeeklyScheduleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WeeklyScheduleDeleteArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WeeklySchedule.
     * @param {WeeklyScheduleUpdateArgs} args - Arguments to update one WeeklySchedule.
     * @example
     * // Update one WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WeeklyScheduleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WeeklyScheduleUpdateArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WeeklySchedules.
     * @param {WeeklyScheduleDeleteManyArgs} args - Arguments to filter WeeklySchedules to delete.
     * @example
     * // Delete a few WeeklySchedules
     * const { count } = await prisma.weeklySchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WeeklyScheduleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WeeklyScheduleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WeeklySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WeeklySchedules
     * const weeklySchedule = await prisma.weeklySchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WeeklyScheduleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WeeklyScheduleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WeeklySchedule.
     * @param {WeeklyScheduleUpsertArgs} args - Arguments to update or create a WeeklySchedule.
     * @example
     * // Update or create a WeeklySchedule
     * const weeklySchedule = await prisma.weeklySchedule.upsert({
     *   create: {
     *     // ... data to create a WeeklySchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WeeklySchedule we want to update
     *   }
     * })
    **/
    upsert<T extends WeeklyScheduleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WeeklyScheduleUpsertArgs<ExtArgs>>
    ): Prisma__WeeklyScheduleClient<$Result.GetResult<Prisma.$WeeklySchedulePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WeeklySchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleCountArgs} args - Arguments to filter WeeklySchedules to count.
     * @example
     * // Count the number of WeeklySchedules
     * const count = await prisma.weeklySchedule.count({
     *   where: {
     *     // ... the filter for the WeeklySchedules we want to count
     *   }
     * })
    **/
    count<T extends WeeklyScheduleCountArgs>(
      args?: Subset<T, WeeklyScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WeeklyScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WeeklySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WeeklyScheduleAggregateArgs>(args: Subset<T, WeeklyScheduleAggregateArgs>): Prisma.PrismaPromise<GetWeeklyScheduleAggregateType<T>>

    /**
     * Group by WeeklySchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WeeklyScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WeeklyScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WeeklyScheduleGroupByArgs['orderBy'] }
        : { orderBy?: WeeklyScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WeeklyScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWeeklyScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WeeklySchedule model
   */
  readonly fields: WeeklyScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WeeklySchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WeeklyScheduleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WeeklySchedule model
   */ 
  interface WeeklyScheduleFieldRefs {
    readonly id: FieldRef<"WeeklySchedule", 'String'>
    readonly doctorId: FieldRef<"WeeklySchedule", 'String'>
    readonly institutionId: FieldRef<"WeeklySchedule", 'String'>
    readonly dayOfWeek: FieldRef<"WeeklySchedule", 'DateTime'>
    readonly startTime: FieldRef<"WeeklySchedule", 'Int'>
    readonly endTime: FieldRef<"WeeklySchedule", 'Int'>
    readonly interval: FieldRef<"WeeklySchedule", 'Int'>
    readonly dailyWorkingHours: FieldRef<"WeeklySchedule", 'Int'>
    readonly createdAt: FieldRef<"WeeklySchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"WeeklySchedule", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * WeeklySchedule findUnique
   */
  export type WeeklyScheduleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where: WeeklyScheduleWhereUniqueInput
  }


  /**
   * WeeklySchedule findUniqueOrThrow
   */
  export type WeeklyScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where: WeeklyScheduleWhereUniqueInput
  }


  /**
   * WeeklySchedule findFirst
   */
  export type WeeklyScheduleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklySchedules.
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklySchedules.
     */
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }


  /**
   * WeeklySchedule findFirstOrThrow
   */
  export type WeeklyScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedule to fetch.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WeeklySchedules.
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WeeklySchedules.
     */
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }


  /**
   * WeeklySchedule findMany
   */
  export type WeeklyScheduleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter, which WeeklySchedules to fetch.
     */
    where?: WeeklyScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WeeklySchedules to fetch.
     */
    orderBy?: WeeklyScheduleOrderByWithRelationInput | WeeklyScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WeeklySchedules.
     */
    cursor?: WeeklyScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WeeklySchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WeeklySchedules.
     */
    skip?: number
    distinct?: WeeklyScheduleScalarFieldEnum | WeeklyScheduleScalarFieldEnum[]
  }


  /**
   * WeeklySchedule create
   */
  export type WeeklyScheduleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a WeeklySchedule.
     */
    data: XOR<WeeklyScheduleCreateInput, WeeklyScheduleUncheckedCreateInput>
  }


  /**
   * WeeklySchedule createMany
   */
  export type WeeklyScheduleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WeeklySchedules.
     */
    data: WeeklyScheduleCreateManyInput | WeeklyScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * WeeklySchedule update
   */
  export type WeeklyScheduleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a WeeklySchedule.
     */
    data: XOR<WeeklyScheduleUpdateInput, WeeklyScheduleUncheckedUpdateInput>
    /**
     * Choose, which WeeklySchedule to update.
     */
    where: WeeklyScheduleWhereUniqueInput
  }


  /**
   * WeeklySchedule updateMany
   */
  export type WeeklyScheduleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WeeklySchedules.
     */
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyInput>
    /**
     * Filter which WeeklySchedules to update
     */
    where?: WeeklyScheduleWhereInput
  }


  /**
   * WeeklySchedule upsert
   */
  export type WeeklyScheduleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the WeeklySchedule to update in case it exists.
     */
    where: WeeklyScheduleWhereUniqueInput
    /**
     * In case the WeeklySchedule found by the `where` argument doesn't exist, create a new WeeklySchedule with this data.
     */
    create: XOR<WeeklyScheduleCreateInput, WeeklyScheduleUncheckedCreateInput>
    /**
     * In case the WeeklySchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WeeklyScheduleUpdateInput, WeeklyScheduleUncheckedUpdateInput>
  }


  /**
   * WeeklySchedule delete
   */
  export type WeeklyScheduleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
    /**
     * Filter which WeeklySchedule to delete.
     */
    where: WeeklyScheduleWhereUniqueInput
  }


  /**
   * WeeklySchedule deleteMany
   */
  export type WeeklyScheduleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which WeeklySchedules to delete
     */
    where?: WeeklyScheduleWhereInput
  }


  /**
   * WeeklySchedule without action
   */
  export type WeeklyScheduleDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WeeklySchedule
     */
    select?: WeeklyScheduleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WeeklyScheduleInclude<ExtArgs> | null
  }



  /**
   * Model MedicalHistory
   */

  export type AggregateMedicalHistory = {
    _count: MedicalHistoryCountAggregateOutputType | null
    _min: MedicalHistoryMinAggregateOutputType | null
    _max: MedicalHistoryMaxAggregateOutputType | null
  }

  export type MedicalHistoryMinAggregateOutputType = {
    id: string | null
    AppointmentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type MedicalHistoryMaxAggregateOutputType = {
    id: string | null
    AppointmentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type MedicalHistoryCountAggregateOutputType = {
    id: number
    AppointmentId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type MedicalHistoryMinAggregateInputType = {
    id?: true
    AppointmentId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MedicalHistoryMaxAggregateInputType = {
    id?: true
    AppointmentId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MedicalHistoryCountAggregateInputType = {
    id?: true
    AppointmentId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type MedicalHistoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalHistory to aggregate.
     */
    where?: MedicalHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalHistories to fetch.
     */
    orderBy?: MedicalHistoryOrderByWithRelationInput | MedicalHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalHistories
    **/
    _count?: true | MedicalHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalHistoryMaxAggregateInputType
  }

  export type GetMedicalHistoryAggregateType<T extends MedicalHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalHistory[P]>
      : GetScalarType<T[P], AggregateMedicalHistory[P]>
  }




  export type MedicalHistoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalHistoryWhereInput
    orderBy?: MedicalHistoryOrderByWithAggregationInput | MedicalHistoryOrderByWithAggregationInput[]
    by: MedicalHistoryScalarFieldEnum[] | MedicalHistoryScalarFieldEnum
    having?: MedicalHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalHistoryCountAggregateInputType | true
    _min?: MedicalHistoryMinAggregateInputType
    _max?: MedicalHistoryMaxAggregateInputType
  }

  export type MedicalHistoryGroupByOutputType = {
    id: string
    AppointmentId: string
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: MedicalHistoryCountAggregateOutputType | null
    _min: MedicalHistoryMinAggregateOutputType | null
    _max: MedicalHistoryMaxAggregateOutputType | null
  }

  type GetMedicalHistoryGroupByPayload<T extends MedicalHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalHistoryGroupByOutputType[P]>
        }
      >
    >


  export type MedicalHistorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    AppointmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    Appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalHistory"]>

  export type MedicalHistorySelectScalar = {
    id?: boolean
    AppointmentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type MedicalHistoryInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }


  export type $MedicalHistoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "MedicalHistory"
    objects: {
      Appointment: Prisma.$AppointmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      AppointmentId: string
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["medicalHistory"]>
    composites: {}
  }


  type MedicalHistoryGetPayload<S extends boolean | null | undefined | MedicalHistoryDefaultArgs> = $Result.GetResult<Prisma.$MedicalHistoryPayload, S>

  type MedicalHistoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MedicalHistoryFindManyArgs, 'select' | 'include'> & {
      select?: MedicalHistoryCountAggregateInputType | true
    }

  export interface MedicalHistoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalHistory'], meta: { name: 'MedicalHistory' } }
    /**
     * Find zero or one MedicalHistory that matches the filter.
     * @param {MedicalHistoryFindUniqueArgs} args - Arguments to find a MedicalHistory
     * @example
     * // Get one MedicalHistory
     * const medicalHistory = await prisma.medicalHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedicalHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MedicalHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MedicalHistoryFindUniqueOrThrowArgs} args - Arguments to find a MedicalHistory
     * @example
     * // Get one MedicalHistory
     * const medicalHistory = await prisma.medicalHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MedicalHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MedicalHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryFindFirstArgs} args - Arguments to find a MedicalHistory
     * @example
     * // Get one MedicalHistory
     * const medicalHistory = await prisma.medicalHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedicalHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MedicalHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryFindFirstOrThrowArgs} args - Arguments to find a MedicalHistory
     * @example
     * // Get one MedicalHistory
     * const medicalHistory = await prisma.medicalHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MedicalHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MedicalHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalHistories
     * const medicalHistories = await prisma.medicalHistory.findMany()
     * 
     * // Get first 10 MedicalHistories
     * const medicalHistories = await prisma.medicalHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalHistoryWithIdOnly = await prisma.medicalHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MedicalHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MedicalHistory.
     * @param {MedicalHistoryCreateArgs} args - Arguments to create a MedicalHistory.
     * @example
     * // Create one MedicalHistory
     * const MedicalHistory = await prisma.medicalHistory.create({
     *   data: {
     *     // ... data to create a MedicalHistory
     *   }
     * })
     * 
    **/
    create<T extends MedicalHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalHistoryCreateArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MedicalHistories.
     *     @param {MedicalHistoryCreateManyArgs} args - Arguments to create many MedicalHistories.
     *     @example
     *     // Create many MedicalHistories
     *     const medicalHistory = await prisma.medicalHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedicalHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MedicalHistory.
     * @param {MedicalHistoryDeleteArgs} args - Arguments to delete one MedicalHistory.
     * @example
     * // Delete one MedicalHistory
     * const MedicalHistory = await prisma.medicalHistory.delete({
     *   where: {
     *     // ... filter to delete one MedicalHistory
     *   }
     * })
     * 
    **/
    delete<T extends MedicalHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalHistoryDeleteArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MedicalHistory.
     * @param {MedicalHistoryUpdateArgs} args - Arguments to update one MedicalHistory.
     * @example
     * // Update one MedicalHistory
     * const medicalHistory = await prisma.medicalHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedicalHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalHistoryUpdateArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MedicalHistories.
     * @param {MedicalHistoryDeleteManyArgs} args - Arguments to filter MedicalHistories to delete.
     * @example
     * // Delete a few MedicalHistories
     * const { count } = await prisma.medicalHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedicalHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalHistories
     * const medicalHistory = await prisma.medicalHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedicalHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicalHistory.
     * @param {MedicalHistoryUpsertArgs} args - Arguments to update or create a MedicalHistory.
     * @example
     * // Update or create a MedicalHistory
     * const medicalHistory = await prisma.medicalHistory.upsert({
     *   create: {
     *     // ... data to create a MedicalHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalHistory we want to update
     *   }
     * })
    **/
    upsert<T extends MedicalHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalHistoryUpsertArgs<ExtArgs>>
    ): Prisma__MedicalHistoryClient<$Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MedicalHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryCountArgs} args - Arguments to filter MedicalHistories to count.
     * @example
     * // Count the number of MedicalHistories
     * const count = await prisma.medicalHistory.count({
     *   where: {
     *     // ... the filter for the MedicalHistories we want to count
     *   }
     * })
    **/
    count<T extends MedicalHistoryCountArgs>(
      args?: Subset<T, MedicalHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalHistoryAggregateArgs>(args: Subset<T, MedicalHistoryAggregateArgs>): Prisma.PrismaPromise<GetMedicalHistoryAggregateType<T>>

    /**
     * Group by MedicalHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalHistoryGroupByArgs['orderBy'] }
        : { orderBy?: MedicalHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalHistory model
   */
  readonly fields: MedicalHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalHistoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MedicalHistory model
   */ 
  interface MedicalHistoryFieldRefs {
    readonly id: FieldRef<"MedicalHistory", 'String'>
    readonly AppointmentId: FieldRef<"MedicalHistory", 'String'>
    readonly createdAt: FieldRef<"MedicalHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalHistory", 'DateTime'>
    readonly deletedAt: FieldRef<"MedicalHistory", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * MedicalHistory findUnique
   */
  export type MedicalHistoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MedicalHistory to fetch.
     */
    where: MedicalHistoryWhereUniqueInput
  }


  /**
   * MedicalHistory findUniqueOrThrow
   */
  export type MedicalHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MedicalHistory to fetch.
     */
    where: MedicalHistoryWhereUniqueInput
  }


  /**
   * MedicalHistory findFirst
   */
  export type MedicalHistoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MedicalHistory to fetch.
     */
    where?: MedicalHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalHistories to fetch.
     */
    orderBy?: MedicalHistoryOrderByWithRelationInput | MedicalHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalHistories.
     */
    cursor?: MedicalHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalHistories.
     */
    distinct?: MedicalHistoryScalarFieldEnum | MedicalHistoryScalarFieldEnum[]
  }


  /**
   * MedicalHistory findFirstOrThrow
   */
  export type MedicalHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MedicalHistory to fetch.
     */
    where?: MedicalHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalHistories to fetch.
     */
    orderBy?: MedicalHistoryOrderByWithRelationInput | MedicalHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalHistories.
     */
    cursor?: MedicalHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalHistories.
     */
    distinct?: MedicalHistoryScalarFieldEnum | MedicalHistoryScalarFieldEnum[]
  }


  /**
   * MedicalHistory findMany
   */
  export type MedicalHistoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * Filter, which MedicalHistories to fetch.
     */
    where?: MedicalHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalHistories to fetch.
     */
    orderBy?: MedicalHistoryOrderByWithRelationInput | MedicalHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalHistories.
     */
    cursor?: MedicalHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalHistories.
     */
    skip?: number
    distinct?: MedicalHistoryScalarFieldEnum | MedicalHistoryScalarFieldEnum[]
  }


  /**
   * MedicalHistory create
   */
  export type MedicalHistoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalHistory.
     */
    data: XOR<MedicalHistoryCreateInput, MedicalHistoryUncheckedCreateInput>
  }


  /**
   * MedicalHistory createMany
   */
  export type MedicalHistoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalHistories.
     */
    data: MedicalHistoryCreateManyInput | MedicalHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MedicalHistory update
   */
  export type MedicalHistoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalHistory.
     */
    data: XOR<MedicalHistoryUpdateInput, MedicalHistoryUncheckedUpdateInput>
    /**
     * Choose, which MedicalHistory to update.
     */
    where: MedicalHistoryWhereUniqueInput
  }


  /**
   * MedicalHistory updateMany
   */
  export type MedicalHistoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalHistories.
     */
    data: XOR<MedicalHistoryUpdateManyMutationInput, MedicalHistoryUncheckedUpdateManyInput>
    /**
     * Filter which MedicalHistories to update
     */
    where?: MedicalHistoryWhereInput
  }


  /**
   * MedicalHistory upsert
   */
  export type MedicalHistoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalHistory to update in case it exists.
     */
    where: MedicalHistoryWhereUniqueInput
    /**
     * In case the MedicalHistory found by the `where` argument doesn't exist, create a new MedicalHistory with this data.
     */
    create: XOR<MedicalHistoryCreateInput, MedicalHistoryUncheckedCreateInput>
    /**
     * In case the MedicalHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalHistoryUpdateInput, MedicalHistoryUncheckedUpdateInput>
  }


  /**
   * MedicalHistory delete
   */
  export type MedicalHistoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
    /**
     * Filter which MedicalHistory to delete.
     */
    where: MedicalHistoryWhereUniqueInput
  }


  /**
   * MedicalHistory deleteMany
   */
  export type MedicalHistoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalHistories to delete
     */
    where?: MedicalHistoryWhereInput
  }


  /**
   * MedicalHistory without action
   */
  export type MedicalHistoryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalHistory
     */
    select?: MedicalHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalHistoryInclude<ExtArgs> | null
  }



  /**
   * Model PasswordConfirmationCode
   */

  export type AggregatePasswordConfirmationCode = {
    _count: PasswordConfirmationCodeCountAggregateOutputType | null
    _min: PasswordConfirmationCodeMinAggregateOutputType | null
    _max: PasswordConfirmationCodeMaxAggregateOutputType | null
  }

  export type PasswordConfirmationCodeMinAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type PasswordConfirmationCodeMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    code: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type PasswordConfirmationCodeCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type PasswordConfirmationCodeMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PasswordConfirmationCodeMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type PasswordConfirmationCodeCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type PasswordConfirmationCodeAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordConfirmationCode to aggregate.
     */
    where?: PasswordConfirmationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordConfirmationCodes to fetch.
     */
    orderBy?: PasswordConfirmationCodeOrderByWithRelationInput | PasswordConfirmationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PasswordConfirmationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordConfirmationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordConfirmationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PasswordConfirmationCodes
    **/
    _count?: true | PasswordConfirmationCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PasswordConfirmationCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PasswordConfirmationCodeMaxAggregateInputType
  }

  export type GetPasswordConfirmationCodeAggregateType<T extends PasswordConfirmationCodeAggregateArgs> = {
        [P in keyof T & keyof AggregatePasswordConfirmationCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePasswordConfirmationCode[P]>
      : GetScalarType<T[P], AggregatePasswordConfirmationCode[P]>
  }




  export type PasswordConfirmationCodeGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PasswordConfirmationCodeWhereInput
    orderBy?: PasswordConfirmationCodeOrderByWithAggregationInput | PasswordConfirmationCodeOrderByWithAggregationInput[]
    by: PasswordConfirmationCodeScalarFieldEnum[] | PasswordConfirmationCodeScalarFieldEnum
    having?: PasswordConfirmationCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PasswordConfirmationCodeCountAggregateInputType | true
    _min?: PasswordConfirmationCodeMinAggregateInputType
    _max?: PasswordConfirmationCodeMaxAggregateInputType
  }

  export type PasswordConfirmationCodeGroupByOutputType = {
    id: string
    userId: string
    code: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: PasswordConfirmationCodeCountAggregateOutputType | null
    _min: PasswordConfirmationCodeMinAggregateOutputType | null
    _max: PasswordConfirmationCodeMaxAggregateOutputType | null
  }

  type GetPasswordConfirmationCodeGroupByPayload<T extends PasswordConfirmationCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PasswordConfirmationCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PasswordConfirmationCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PasswordConfirmationCodeGroupByOutputType[P]>
            : GetScalarType<T[P], PasswordConfirmationCodeGroupByOutputType[P]>
        }
      >
    >


  export type PasswordConfirmationCodeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["passwordConfirmationCode"]>

  export type PasswordConfirmationCodeSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type PasswordConfirmationCodeInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $PasswordConfirmationCodePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "PasswordConfirmationCode"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      code: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["passwordConfirmationCode"]>
    composites: {}
  }


  type PasswordConfirmationCodeGetPayload<S extends boolean | null | undefined | PasswordConfirmationCodeDefaultArgs> = $Result.GetResult<Prisma.$PasswordConfirmationCodePayload, S>

  type PasswordConfirmationCodeCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PasswordConfirmationCodeFindManyArgs, 'select' | 'include'> & {
      select?: PasswordConfirmationCodeCountAggregateInputType | true
    }

  export interface PasswordConfirmationCodeDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PasswordConfirmationCode'], meta: { name: 'PasswordConfirmationCode' } }
    /**
     * Find zero or one PasswordConfirmationCode that matches the filter.
     * @param {PasswordConfirmationCodeFindUniqueArgs} args - Arguments to find a PasswordConfirmationCode
     * @example
     * // Get one PasswordConfirmationCode
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PasswordConfirmationCodeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordConfirmationCodeFindUniqueArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PasswordConfirmationCode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PasswordConfirmationCodeFindUniqueOrThrowArgs} args - Arguments to find a PasswordConfirmationCode
     * @example
     * // Get one PasswordConfirmationCode
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PasswordConfirmationCodeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordConfirmationCodeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PasswordConfirmationCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeFindFirstArgs} args - Arguments to find a PasswordConfirmationCode
     * @example
     * // Get one PasswordConfirmationCode
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PasswordConfirmationCodeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordConfirmationCodeFindFirstArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PasswordConfirmationCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeFindFirstOrThrowArgs} args - Arguments to find a PasswordConfirmationCode
     * @example
     * // Get one PasswordConfirmationCode
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PasswordConfirmationCodeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordConfirmationCodeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PasswordConfirmationCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PasswordConfirmationCodes
     * const passwordConfirmationCodes = await prisma.passwordConfirmationCode.findMany()
     * 
     * // Get first 10 PasswordConfirmationCodes
     * const passwordConfirmationCodes = await prisma.passwordConfirmationCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const passwordConfirmationCodeWithIdOnly = await prisma.passwordConfirmationCode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PasswordConfirmationCodeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordConfirmationCodeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PasswordConfirmationCode.
     * @param {PasswordConfirmationCodeCreateArgs} args - Arguments to create a PasswordConfirmationCode.
     * @example
     * // Create one PasswordConfirmationCode
     * const PasswordConfirmationCode = await prisma.passwordConfirmationCode.create({
     *   data: {
     *     // ... data to create a PasswordConfirmationCode
     *   }
     * })
     * 
    **/
    create<T extends PasswordConfirmationCodeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordConfirmationCodeCreateArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PasswordConfirmationCodes.
     *     @param {PasswordConfirmationCodeCreateManyArgs} args - Arguments to create many PasswordConfirmationCodes.
     *     @example
     *     // Create many PasswordConfirmationCodes
     *     const passwordConfirmationCode = await prisma.passwordConfirmationCode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PasswordConfirmationCodeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordConfirmationCodeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PasswordConfirmationCode.
     * @param {PasswordConfirmationCodeDeleteArgs} args - Arguments to delete one PasswordConfirmationCode.
     * @example
     * // Delete one PasswordConfirmationCode
     * const PasswordConfirmationCode = await prisma.passwordConfirmationCode.delete({
     *   where: {
     *     // ... filter to delete one PasswordConfirmationCode
     *   }
     * })
     * 
    **/
    delete<T extends PasswordConfirmationCodeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordConfirmationCodeDeleteArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PasswordConfirmationCode.
     * @param {PasswordConfirmationCodeUpdateArgs} args - Arguments to update one PasswordConfirmationCode.
     * @example
     * // Update one PasswordConfirmationCode
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PasswordConfirmationCodeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordConfirmationCodeUpdateArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PasswordConfirmationCodes.
     * @param {PasswordConfirmationCodeDeleteManyArgs} args - Arguments to filter PasswordConfirmationCodes to delete.
     * @example
     * // Delete a few PasswordConfirmationCodes
     * const { count } = await prisma.passwordConfirmationCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PasswordConfirmationCodeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PasswordConfirmationCodeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PasswordConfirmationCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PasswordConfirmationCodes
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PasswordConfirmationCodeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordConfirmationCodeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PasswordConfirmationCode.
     * @param {PasswordConfirmationCodeUpsertArgs} args - Arguments to update or create a PasswordConfirmationCode.
     * @example
     * // Update or create a PasswordConfirmationCode
     * const passwordConfirmationCode = await prisma.passwordConfirmationCode.upsert({
     *   create: {
     *     // ... data to create a PasswordConfirmationCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PasswordConfirmationCode we want to update
     *   }
     * })
    **/
    upsert<T extends PasswordConfirmationCodeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PasswordConfirmationCodeUpsertArgs<ExtArgs>>
    ): Prisma__PasswordConfirmationCodeClient<$Result.GetResult<Prisma.$PasswordConfirmationCodePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PasswordConfirmationCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeCountArgs} args - Arguments to filter PasswordConfirmationCodes to count.
     * @example
     * // Count the number of PasswordConfirmationCodes
     * const count = await prisma.passwordConfirmationCode.count({
     *   where: {
     *     // ... the filter for the PasswordConfirmationCodes we want to count
     *   }
     * })
    **/
    count<T extends PasswordConfirmationCodeCountArgs>(
      args?: Subset<T, PasswordConfirmationCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PasswordConfirmationCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PasswordConfirmationCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PasswordConfirmationCodeAggregateArgs>(args: Subset<T, PasswordConfirmationCodeAggregateArgs>): Prisma.PrismaPromise<GetPasswordConfirmationCodeAggregateType<T>>

    /**
     * Group by PasswordConfirmationCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PasswordConfirmationCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PasswordConfirmationCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PasswordConfirmationCodeGroupByArgs['orderBy'] }
        : { orderBy?: PasswordConfirmationCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PasswordConfirmationCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPasswordConfirmationCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PasswordConfirmationCode model
   */
  readonly fields: PasswordConfirmationCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PasswordConfirmationCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PasswordConfirmationCodeClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PasswordConfirmationCode model
   */ 
  interface PasswordConfirmationCodeFieldRefs {
    readonly id: FieldRef<"PasswordConfirmationCode", 'String'>
    readonly userId: FieldRef<"PasswordConfirmationCode", 'String'>
    readonly code: FieldRef<"PasswordConfirmationCode", 'String'>
    readonly expiresAt: FieldRef<"PasswordConfirmationCode", 'DateTime'>
    readonly createdAt: FieldRef<"PasswordConfirmationCode", 'DateTime'>
    readonly updatedAt: FieldRef<"PasswordConfirmationCode", 'DateTime'>
    readonly deletedAt: FieldRef<"PasswordConfirmationCode", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * PasswordConfirmationCode findUnique
   */
  export type PasswordConfirmationCodeFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * Filter, which PasswordConfirmationCode to fetch.
     */
    where: PasswordConfirmationCodeWhereUniqueInput
  }


  /**
   * PasswordConfirmationCode findUniqueOrThrow
   */
  export type PasswordConfirmationCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * Filter, which PasswordConfirmationCode to fetch.
     */
    where: PasswordConfirmationCodeWhereUniqueInput
  }


  /**
   * PasswordConfirmationCode findFirst
   */
  export type PasswordConfirmationCodeFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * Filter, which PasswordConfirmationCode to fetch.
     */
    where?: PasswordConfirmationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordConfirmationCodes to fetch.
     */
    orderBy?: PasswordConfirmationCodeOrderByWithRelationInput | PasswordConfirmationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordConfirmationCodes.
     */
    cursor?: PasswordConfirmationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordConfirmationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordConfirmationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordConfirmationCodes.
     */
    distinct?: PasswordConfirmationCodeScalarFieldEnum | PasswordConfirmationCodeScalarFieldEnum[]
  }


  /**
   * PasswordConfirmationCode findFirstOrThrow
   */
  export type PasswordConfirmationCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * Filter, which PasswordConfirmationCode to fetch.
     */
    where?: PasswordConfirmationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordConfirmationCodes to fetch.
     */
    orderBy?: PasswordConfirmationCodeOrderByWithRelationInput | PasswordConfirmationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PasswordConfirmationCodes.
     */
    cursor?: PasswordConfirmationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordConfirmationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordConfirmationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PasswordConfirmationCodes.
     */
    distinct?: PasswordConfirmationCodeScalarFieldEnum | PasswordConfirmationCodeScalarFieldEnum[]
  }


  /**
   * PasswordConfirmationCode findMany
   */
  export type PasswordConfirmationCodeFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * Filter, which PasswordConfirmationCodes to fetch.
     */
    where?: PasswordConfirmationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PasswordConfirmationCodes to fetch.
     */
    orderBy?: PasswordConfirmationCodeOrderByWithRelationInput | PasswordConfirmationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PasswordConfirmationCodes.
     */
    cursor?: PasswordConfirmationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PasswordConfirmationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PasswordConfirmationCodes.
     */
    skip?: number
    distinct?: PasswordConfirmationCodeScalarFieldEnum | PasswordConfirmationCodeScalarFieldEnum[]
  }


  /**
   * PasswordConfirmationCode create
   */
  export type PasswordConfirmationCodeCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a PasswordConfirmationCode.
     */
    data: XOR<PasswordConfirmationCodeCreateInput, PasswordConfirmationCodeUncheckedCreateInput>
  }


  /**
   * PasswordConfirmationCode createMany
   */
  export type PasswordConfirmationCodeCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PasswordConfirmationCodes.
     */
    data: PasswordConfirmationCodeCreateManyInput | PasswordConfirmationCodeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PasswordConfirmationCode update
   */
  export type PasswordConfirmationCodeUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a PasswordConfirmationCode.
     */
    data: XOR<PasswordConfirmationCodeUpdateInput, PasswordConfirmationCodeUncheckedUpdateInput>
    /**
     * Choose, which PasswordConfirmationCode to update.
     */
    where: PasswordConfirmationCodeWhereUniqueInput
  }


  /**
   * PasswordConfirmationCode updateMany
   */
  export type PasswordConfirmationCodeUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PasswordConfirmationCodes.
     */
    data: XOR<PasswordConfirmationCodeUpdateManyMutationInput, PasswordConfirmationCodeUncheckedUpdateManyInput>
    /**
     * Filter which PasswordConfirmationCodes to update
     */
    where?: PasswordConfirmationCodeWhereInput
  }


  /**
   * PasswordConfirmationCode upsert
   */
  export type PasswordConfirmationCodeUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the PasswordConfirmationCode to update in case it exists.
     */
    where: PasswordConfirmationCodeWhereUniqueInput
    /**
     * In case the PasswordConfirmationCode found by the `where` argument doesn't exist, create a new PasswordConfirmationCode with this data.
     */
    create: XOR<PasswordConfirmationCodeCreateInput, PasswordConfirmationCodeUncheckedCreateInput>
    /**
     * In case the PasswordConfirmationCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PasswordConfirmationCodeUpdateInput, PasswordConfirmationCodeUncheckedUpdateInput>
  }


  /**
   * PasswordConfirmationCode delete
   */
  export type PasswordConfirmationCodeDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
    /**
     * Filter which PasswordConfirmationCode to delete.
     */
    where: PasswordConfirmationCodeWhereUniqueInput
  }


  /**
   * PasswordConfirmationCode deleteMany
   */
  export type PasswordConfirmationCodeDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which PasswordConfirmationCodes to delete
     */
    where?: PasswordConfirmationCodeWhereInput
  }


  /**
   * PasswordConfirmationCode without action
   */
  export type PasswordConfirmationCodeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PasswordConfirmationCode
     */
    select?: PasswordConfirmationCodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PasswordConfirmationCodeInclude<ExtArgs> | null
  }



  /**
   * Model MedicalReport
   */

  export type AggregateMedicalReport = {
    _count: MedicalReportCountAggregateOutputType | null
    _min: MedicalReportMinAggregateOutputType | null
    _max: MedicalReportMaxAggregateOutputType | null
  }

  export type MedicalReportMinAggregateOutputType = {
    id: string | null
    institutionId: string | null
    doctorId: string | null
    patientId: string | null
    AppointmentId: string | null
    medicalEvaluation: string | null
    bloodPressure: string | null
    height: string | null
    weight: string | null
    pulse: string | null
    temperature: string | null
    otherPhysicalParams: string | null
    diagnosis: string | null
    treatmentPlan: string | null
    observations: string | null
    symptomsDescription: string | null
    additionalObservation: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type MedicalReportMaxAggregateOutputType = {
    id: string | null
    institutionId: string | null
    doctorId: string | null
    patientId: string | null
    AppointmentId: string | null
    medicalEvaluation: string | null
    bloodPressure: string | null
    height: string | null
    weight: string | null
    pulse: string | null
    temperature: string | null
    otherPhysicalParams: string | null
    diagnosis: string | null
    treatmentPlan: string | null
    observations: string | null
    symptomsDescription: string | null
    additionalObservation: string | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: boolean | null
  }

  export type MedicalReportCountAggregateOutputType = {
    id: number
    institutionId: number
    doctorId: number
    patientId: number
    AppointmentId: number
    medicalEvaluation: number
    bloodPressure: number
    height: number
    weight: number
    pulse: number
    temperature: number
    otherPhysicalParams: number
    diagnosis: number
    treatmentPlan: number
    recommendations: number
    orientations: number
    observations: number
    symptomsDescription: number
    additionalObservation: number
    date: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type MedicalReportMinAggregateInputType = {
    id?: true
    institutionId?: true
    doctorId?: true
    patientId?: true
    AppointmentId?: true
    medicalEvaluation?: true
    bloodPressure?: true
    height?: true
    weight?: true
    pulse?: true
    temperature?: true
    otherPhysicalParams?: true
    diagnosis?: true
    treatmentPlan?: true
    observations?: true
    symptomsDescription?: true
    additionalObservation?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MedicalReportMaxAggregateInputType = {
    id?: true
    institutionId?: true
    doctorId?: true
    patientId?: true
    AppointmentId?: true
    medicalEvaluation?: true
    bloodPressure?: true
    height?: true
    weight?: true
    pulse?: true
    temperature?: true
    otherPhysicalParams?: true
    diagnosis?: true
    treatmentPlan?: true
    observations?: true
    symptomsDescription?: true
    additionalObservation?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MedicalReportCountAggregateInputType = {
    id?: true
    institutionId?: true
    doctorId?: true
    patientId?: true
    AppointmentId?: true
    medicalEvaluation?: true
    bloodPressure?: true
    height?: true
    weight?: true
    pulse?: true
    temperature?: true
    otherPhysicalParams?: true
    diagnosis?: true
    treatmentPlan?: true
    recommendations?: true
    orientations?: true
    observations?: true
    symptomsDescription?: true
    additionalObservation?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type MedicalReportAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalReport to aggregate.
     */
    where?: MedicalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalReports to fetch.
     */
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalReports
    **/
    _count?: true | MedicalReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalReportMaxAggregateInputType
  }

  export type GetMedicalReportAggregateType<T extends MedicalReportAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalReport[P]>
      : GetScalarType<T[P], AggregateMedicalReport[P]>
  }




  export type MedicalReportGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalReportWhereInput
    orderBy?: MedicalReportOrderByWithAggregationInput | MedicalReportOrderByWithAggregationInput[]
    by: MedicalReportScalarFieldEnum[] | MedicalReportScalarFieldEnum
    having?: MedicalReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalReportCountAggregateInputType | true
    _min?: MedicalReportMinAggregateInputType
    _max?: MedicalReportMaxAggregateInputType
  }

  export type MedicalReportGroupByOutputType = {
    id: string
    institutionId: string
    doctorId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation: string | null
    bloodPressure: string | null
    height: string | null
    weight: string | null
    pulse: string | null
    temperature: string | null
    otherPhysicalParams: string | null
    diagnosis: string | null
    treatmentPlan: string | null
    recommendations: string[]
    orientations: string[]
    observations: string | null
    symptomsDescription: string | null
    additionalObservation: string | null
    date: Date
    createdAt: Date
    updatedAt: Date
    deletedAt: boolean
    _count: MedicalReportCountAggregateOutputType | null
    _min: MedicalReportMinAggregateOutputType | null
    _max: MedicalReportMaxAggregateOutputType | null
  }

  type GetMedicalReportGroupByPayload<T extends MedicalReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicalReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalReportGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalReportGroupByOutputType[P]>
        }
      >
    >


  export type MedicalReportSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    institutionId?: boolean
    doctorId?: boolean
    patientId?: boolean
    AppointmentId?: boolean
    medicalEvaluation?: boolean
    bloodPressure?: boolean
    height?: boolean
    weight?: boolean
    pulse?: boolean
    temperature?: boolean
    otherPhysicalParams?: boolean
    diagnosis?: boolean
    treatmentPlan?: boolean
    recommendations?: boolean
    orientations?: boolean
    observations?: boolean
    symptomsDescription?: boolean
    additionalObservation?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicalReport"]>

  export type MedicalReportSelectScalar = {
    id?: boolean
    institutionId?: boolean
    doctorId?: boolean
    patientId?: boolean
    AppointmentId?: boolean
    medicalEvaluation?: boolean
    bloodPressure?: boolean
    height?: boolean
    weight?: boolean
    pulse?: boolean
    temperature?: boolean
    otherPhysicalParams?: boolean
    diagnosis?: boolean
    treatmentPlan?: boolean
    recommendations?: boolean
    orientations?: boolean
    observations?: boolean
    symptomsDescription?: boolean
    additionalObservation?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type MedicalReportInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    institution?: boolean | InstitutionDefaultArgs<ExtArgs>
    doctor?: boolean | DoctorDefaultArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    appointment?: boolean | AppointmentDefaultArgs<ExtArgs>
  }


  export type $MedicalReportPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "MedicalReport"
    objects: {
      institution: Prisma.$InstitutionPayload<ExtArgs>
      doctor: Prisma.$DoctorPayload<ExtArgs>
      patient: Prisma.$PatientPayload<ExtArgs>
      appointment: Prisma.$AppointmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      institutionId: string
      doctorId: string
      patientId: string
      AppointmentId: string
      medicalEvaluation: string | null
      bloodPressure: string | null
      height: string | null
      weight: string | null
      pulse: string | null
      temperature: string | null
      otherPhysicalParams: string | null
      diagnosis: string | null
      treatmentPlan: string | null
      recommendations: string[]
      orientations: string[]
      observations: string | null
      symptomsDescription: string | null
      additionalObservation: string | null
      date: Date
      createdAt: Date
      updatedAt: Date
      deletedAt: boolean
    }, ExtArgs["result"]["medicalReport"]>
    composites: {}
  }


  type MedicalReportGetPayload<S extends boolean | null | undefined | MedicalReportDefaultArgs> = $Result.GetResult<Prisma.$MedicalReportPayload, S>

  type MedicalReportCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MedicalReportFindManyArgs, 'select' | 'include'> & {
      select?: MedicalReportCountAggregateInputType | true
    }

  export interface MedicalReportDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalReport'], meta: { name: 'MedicalReport' } }
    /**
     * Find zero or one MedicalReport that matches the filter.
     * @param {MedicalReportFindUniqueArgs} args - Arguments to find a MedicalReport
     * @example
     * // Get one MedicalReport
     * const medicalReport = await prisma.medicalReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedicalReportFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalReportFindUniqueArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MedicalReport that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MedicalReportFindUniqueOrThrowArgs} args - Arguments to find a MedicalReport
     * @example
     * // Get one MedicalReport
     * const medicalReport = await prisma.medicalReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MedicalReportFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalReportFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MedicalReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportFindFirstArgs} args - Arguments to find a MedicalReport
     * @example
     * // Get one MedicalReport
     * const medicalReport = await prisma.medicalReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedicalReportFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalReportFindFirstArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MedicalReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportFindFirstOrThrowArgs} args - Arguments to find a MedicalReport
     * @example
     * // Get one MedicalReport
     * const medicalReport = await prisma.medicalReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MedicalReportFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalReportFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MedicalReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalReports
     * const medicalReports = await prisma.medicalReport.findMany()
     * 
     * // Get first 10 MedicalReports
     * const medicalReports = await prisma.medicalReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalReportWithIdOnly = await prisma.medicalReport.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MedicalReportFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalReportFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MedicalReport.
     * @param {MedicalReportCreateArgs} args - Arguments to create a MedicalReport.
     * @example
     * // Create one MedicalReport
     * const MedicalReport = await prisma.medicalReport.create({
     *   data: {
     *     // ... data to create a MedicalReport
     *   }
     * })
     * 
    **/
    create<T extends MedicalReportCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalReportCreateArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MedicalReports.
     *     @param {MedicalReportCreateManyArgs} args - Arguments to create many MedicalReports.
     *     @example
     *     // Create many MedicalReports
     *     const medicalReport = await prisma.medicalReport.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedicalReportCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalReportCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MedicalReport.
     * @param {MedicalReportDeleteArgs} args - Arguments to delete one MedicalReport.
     * @example
     * // Delete one MedicalReport
     * const MedicalReport = await prisma.medicalReport.delete({
     *   where: {
     *     // ... filter to delete one MedicalReport
     *   }
     * })
     * 
    **/
    delete<T extends MedicalReportDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalReportDeleteArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MedicalReport.
     * @param {MedicalReportUpdateArgs} args - Arguments to update one MedicalReport.
     * @example
     * // Update one MedicalReport
     * const medicalReport = await prisma.medicalReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedicalReportUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalReportUpdateArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MedicalReports.
     * @param {MedicalReportDeleteManyArgs} args - Arguments to filter MedicalReports to delete.
     * @example
     * // Delete a few MedicalReports
     * const { count } = await prisma.medicalReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedicalReportDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalReportDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalReports
     * const medicalReport = await prisma.medicalReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedicalReportUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalReportUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicalReport.
     * @param {MedicalReportUpsertArgs} args - Arguments to update or create a MedicalReport.
     * @example
     * // Update or create a MedicalReport
     * const medicalReport = await prisma.medicalReport.upsert({
     *   create: {
     *     // ... data to create a MedicalReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalReport we want to update
     *   }
     * })
    **/
    upsert<T extends MedicalReportUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalReportUpsertArgs<ExtArgs>>
    ): Prisma__MedicalReportClient<$Result.GetResult<Prisma.$MedicalReportPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MedicalReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportCountArgs} args - Arguments to filter MedicalReports to count.
     * @example
     * // Count the number of MedicalReports
     * const count = await prisma.medicalReport.count({
     *   where: {
     *     // ... the filter for the MedicalReports we want to count
     *   }
     * })
    **/
    count<T extends MedicalReportCountArgs>(
      args?: Subset<T, MedicalReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalReportAggregateArgs>(args: Subset<T, MedicalReportAggregateArgs>): Prisma.PrismaPromise<GetMedicalReportAggregateType<T>>

    /**
     * Group by MedicalReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalReportGroupByArgs['orderBy'] }
        : { orderBy?: MedicalReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicalReport model
   */
  readonly fields: MedicalReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicalReportClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    institution<T extends InstitutionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstitutionDefaultArgs<ExtArgs>>): Prisma__InstitutionClient<$Result.GetResult<Prisma.$InstitutionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    doctor<T extends DoctorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DoctorDefaultArgs<ExtArgs>>): Prisma__DoctorClient<$Result.GetResult<Prisma.$DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    appointment<T extends AppointmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentDefaultArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MedicalReport model
   */ 
  interface MedicalReportFieldRefs {
    readonly id: FieldRef<"MedicalReport", 'String'>
    readonly institutionId: FieldRef<"MedicalReport", 'String'>
    readonly doctorId: FieldRef<"MedicalReport", 'String'>
    readonly patientId: FieldRef<"MedicalReport", 'String'>
    readonly AppointmentId: FieldRef<"MedicalReport", 'String'>
    readonly medicalEvaluation: FieldRef<"MedicalReport", 'String'>
    readonly bloodPressure: FieldRef<"MedicalReport", 'String'>
    readonly height: FieldRef<"MedicalReport", 'String'>
    readonly weight: FieldRef<"MedicalReport", 'String'>
    readonly pulse: FieldRef<"MedicalReport", 'String'>
    readonly temperature: FieldRef<"MedicalReport", 'String'>
    readonly otherPhysicalParams: FieldRef<"MedicalReport", 'String'>
    readonly diagnosis: FieldRef<"MedicalReport", 'String'>
    readonly treatmentPlan: FieldRef<"MedicalReport", 'String'>
    readonly recommendations: FieldRef<"MedicalReport", 'String[]'>
    readonly orientations: FieldRef<"MedicalReport", 'String[]'>
    readonly observations: FieldRef<"MedicalReport", 'String'>
    readonly symptomsDescription: FieldRef<"MedicalReport", 'String'>
    readonly additionalObservation: FieldRef<"MedicalReport", 'String'>
    readonly date: FieldRef<"MedicalReport", 'DateTime'>
    readonly createdAt: FieldRef<"MedicalReport", 'DateTime'>
    readonly updatedAt: FieldRef<"MedicalReport", 'DateTime'>
    readonly deletedAt: FieldRef<"MedicalReport", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * MedicalReport findUnique
   */
  export type MedicalReportFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * Filter, which MedicalReport to fetch.
     */
    where: MedicalReportWhereUniqueInput
  }


  /**
   * MedicalReport findUniqueOrThrow
   */
  export type MedicalReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * Filter, which MedicalReport to fetch.
     */
    where: MedicalReportWhereUniqueInput
  }


  /**
   * MedicalReport findFirst
   */
  export type MedicalReportFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * Filter, which MedicalReport to fetch.
     */
    where?: MedicalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalReports to fetch.
     */
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalReports.
     */
    cursor?: MedicalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalReports.
     */
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * MedicalReport findFirstOrThrow
   */
  export type MedicalReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * Filter, which MedicalReport to fetch.
     */
    where?: MedicalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalReports to fetch.
     */
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalReports.
     */
    cursor?: MedicalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalReports.
     */
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * MedicalReport findMany
   */
  export type MedicalReportFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * Filter, which MedicalReports to fetch.
     */
    where?: MedicalReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalReports to fetch.
     */
    orderBy?: MedicalReportOrderByWithRelationInput | MedicalReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalReports.
     */
    cursor?: MedicalReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalReports.
     */
    skip?: number
    distinct?: MedicalReportScalarFieldEnum | MedicalReportScalarFieldEnum[]
  }


  /**
   * MedicalReport create
   */
  export type MedicalReportCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalReport.
     */
    data: XOR<MedicalReportCreateInput, MedicalReportUncheckedCreateInput>
  }


  /**
   * MedicalReport createMany
   */
  export type MedicalReportCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalReports.
     */
    data: MedicalReportCreateManyInput | MedicalReportCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MedicalReport update
   */
  export type MedicalReportUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalReport.
     */
    data: XOR<MedicalReportUpdateInput, MedicalReportUncheckedUpdateInput>
    /**
     * Choose, which MedicalReport to update.
     */
    where: MedicalReportWhereUniqueInput
  }


  /**
   * MedicalReport updateMany
   */
  export type MedicalReportUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalReports.
     */
    data: XOR<MedicalReportUpdateManyMutationInput, MedicalReportUncheckedUpdateManyInput>
    /**
     * Filter which MedicalReports to update
     */
    where?: MedicalReportWhereInput
  }


  /**
   * MedicalReport upsert
   */
  export type MedicalReportUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalReport to update in case it exists.
     */
    where: MedicalReportWhereUniqueInput
    /**
     * In case the MedicalReport found by the `where` argument doesn't exist, create a new MedicalReport with this data.
     */
    create: XOR<MedicalReportCreateInput, MedicalReportUncheckedCreateInput>
    /**
     * In case the MedicalReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalReportUpdateInput, MedicalReportUncheckedUpdateInput>
  }


  /**
   * MedicalReport delete
   */
  export type MedicalReportDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
    /**
     * Filter which MedicalReport to delete.
     */
    where: MedicalReportWhereUniqueInput
  }


  /**
   * MedicalReport deleteMany
   */
  export type MedicalReportDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalReports to delete
     */
    where?: MedicalReportWhereInput
  }


  /**
   * MedicalReport without action
   */
  export type MedicalReportDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalReport
     */
    select?: MedicalReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalReportInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FCMTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token'
  };

  export type FCMTokenScalarFieldEnum = (typeof FCMTokenScalarFieldEnum)[keyof typeof FCMTokenScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    nationality: 'nationality',
    Role: 'Role',
    nif: 'nif',
    phone: 'phone',
    birthday: 'birthday',
    FatherName: 'FatherName',
    MotherName: 'MotherName',
    type: 'type',
    gender: 'gender',
    BI: 'BI',
    neigbhod: 'neigbhod',
    city: 'city',
    municipality: 'municipality',
    avatar: 'avatar',
    addressComplement: 'addressComplement',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    doctorId: 'doctorId',
    appoitmentID: 'appoitmentID',
    rate: 'rate',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type RatingScalarFieldEnum = (typeof RatingScalarFieldEnum)[keyof typeof RatingScalarFieldEnum]


  export const ClinicRatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clinicId: 'clinicId',
    rate: 'rate',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ClinicRatingScalarFieldEnum = (typeof ClinicRatingScalarFieldEnum)[keyof typeof ClinicRatingScalarFieldEnum]


  export const ServicesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    institutionId: 'institutionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ServicesScalarFieldEnum = (typeof ServicesScalarFieldEnum)[keyof typeof ServicesScalarFieldEnum]


  export const SpecialityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type SpecialityScalarFieldEnum = (typeof SpecialityScalarFieldEnum)[keyof typeof SpecialityScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissions: 'permissions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    number: 'number',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const PatientCardScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    clinicId: 'clinicId',
    qrCode: 'qrCode',
    cardNumber: 'cardNumber',
    status: 'status',
    issuedOn: 'issuedOn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PatientCardScalarFieldEnum = (typeof PatientCardScalarFieldEnum)[keyof typeof PatientCardScalarFieldEnum]


  export const QrcodeScalarFieldEnum: {
    id: 'id',
    code: 'code',
    patientId: 'patientId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type QrcodeScalarFieldEnum = (typeof QrcodeScalarFieldEnum)[keyof typeof QrcodeScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    specialty: 'specialty',
    bio: 'bio',
    registrationNumber: 'registrationNumber',
    institutionId: 'institutionId',
    isOnVacation: 'isOnVacation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const FavoritesScalarFieldEnum: {
    id: 'id',
    pacientId: 'pacientId',
    doctorId: 'doctorId',
    institutionId: 'institutionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type FavoritesScalarFieldEnum = (typeof FavoritesScalarFieldEnum)[keyof typeof FavoritesScalarFieldEnum]


  export const InstitutionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    clinicLatitude: 'clinicLatitude',
    cliniclongitude: 'cliniclongitude',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type InstitutionScalarFieldEnum = (typeof InstitutionScalarFieldEnum)[keyof typeof InstitutionScalarFieldEnum]


  export const DoctorInstitutionScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    institutionId: 'institutionId'
  };

  export type DoctorInstitutionScalarFieldEnum = (typeof DoctorInstitutionScalarFieldEnum)[keyof typeof DoctorInstitutionScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    institutionId: 'institutionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    institutionId: 'institutionId',
    consultationTypeId: 'consultationTypeId',
    doctorId: 'doctorId',
    symptomDescription: 'symptomDescription',
    isUrgent: 'isUrgent',
    date: 'date',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const ConsultationTypeScalarFieldEnum: {
    id: 'id',
    description: 'description',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type ConsultationTypeScalarFieldEnum = (typeof ConsultationTypeScalarFieldEnum)[keyof typeof ConsultationTypeScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    content: 'content',
    doctor_id: 'doctor_id',
    patient_id: 'patient_id',
    institution_id: 'institution_id',
    appointmentId: 'appointmentId',
    read: 'read',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const WeeklyScheduleScalarFieldEnum: {
    id: 'id',
    doctorId: 'doctorId',
    institutionId: 'institutionId',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime',
    interval: 'interval',
    dailyWorkingHours: 'dailyWorkingHours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WeeklyScheduleScalarFieldEnum = (typeof WeeklyScheduleScalarFieldEnum)[keyof typeof WeeklyScheduleScalarFieldEnum]


  export const MedicalHistoryScalarFieldEnum: {
    id: 'id',
    AppointmentId: 'AppointmentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type MedicalHistoryScalarFieldEnum = (typeof MedicalHistoryScalarFieldEnum)[keyof typeof MedicalHistoryScalarFieldEnum]


  export const PasswordConfirmationCodeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type PasswordConfirmationCodeScalarFieldEnum = (typeof PasswordConfirmationCodeScalarFieldEnum)[keyof typeof PasswordConfirmationCodeScalarFieldEnum]


  export const MedicalReportScalarFieldEnum: {
    id: 'id',
    institutionId: 'institutionId',
    doctorId: 'doctorId',
    patientId: 'patientId',
    AppointmentId: 'AppointmentId',
    medicalEvaluation: 'medicalEvaluation',
    bloodPressure: 'bloodPressure',
    height: 'height',
    weight: 'weight',
    pulse: 'pulse',
    temperature: 'temperature',
    otherPhysicalParams: 'otherPhysicalParams',
    diagnosis: 'diagnosis',
    treatmentPlan: 'treatmentPlan',
    recommendations: 'recommendations',
    orientations: 'orientations',
    observations: 'observations',
    symptomsDescription: 'symptomsDescription',
    additionalObservation: 'additionalObservation',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type MedicalReportScalarFieldEnum = (typeof MedicalReportScalarFieldEnum)[keyof typeof MedicalReportScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'RoleType'
   */
  export type EnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleType'>
    


  /**
   * Reference to a field of type 'RoleType[]'
   */
  export type ListEnumRoleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleType[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'permissions'
   */
  export type EnumpermissionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'permissions'>
    


  /**
   * Reference to a field of type 'permissions[]'
   */
  export type ListEnumpermissionsFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'permissions[]'>
    


  /**
   * Reference to a field of type 'CardStatus'
   */
  export type EnumCardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardStatus'>
    


  /**
   * Reference to a field of type 'CardStatus[]'
   */
  export type ListEnumCardStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CardStatus[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'TypeNotification'
   */
  export type EnumTypeNotificationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeNotification'>
    


  /**
   * Reference to a field of type 'TypeNotification[]'
   */
  export type ListEnumTypeNotificationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeNotification[]'>
    
  /**
   * Deep Input Types
   */


  export type FCMTokenWhereInput = {
    AND?: FCMTokenWhereInput | FCMTokenWhereInput[]
    OR?: FCMTokenWhereInput[]
    NOT?: FCMTokenWhereInput | FCMTokenWhereInput[]
    id?: StringFilter<"FCMToken"> | string
    userId?: StringFilter<"FCMToken"> | string
    token?: StringFilter<"FCMToken"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FCMTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FCMTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FCMTokenWhereInput | FCMTokenWhereInput[]
    OR?: FCMTokenWhereInput[]
    NOT?: FCMTokenWhereInput | FCMTokenWhereInput[]
    userId?: StringFilter<"FCMToken"> | string
    token?: StringFilter<"FCMToken"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FCMTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    _count?: FCMTokenCountOrderByAggregateInput
    _max?: FCMTokenMaxOrderByAggregateInput
    _min?: FCMTokenMinOrderByAggregateInput
  }

  export type FCMTokenScalarWhereWithAggregatesInput = {
    AND?: FCMTokenScalarWhereWithAggregatesInput | FCMTokenScalarWhereWithAggregatesInput[]
    OR?: FCMTokenScalarWhereWithAggregatesInput[]
    NOT?: FCMTokenScalarWhereWithAggregatesInput | FCMTokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FCMToken"> | string
    userId?: StringWithAggregatesFilter<"FCMToken"> | string
    token?: StringWithAggregatesFilter<"FCMToken"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    nationality?: StringNullableFilter<"User"> | string | null
    Role?: EnumRoleTypeFilter<"User"> | $Enums.RoleType
    nif?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    birthday?: DateTimeNullableFilter<"User"> | Date | string | null
    FatherName?: StringNullableFilter<"User"> | string | null
    MotherName?: StringNullableFilter<"User"> | string | null
    type?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    BI?: StringNullableFilter<"User"> | string | null
    neigbhod?: StringFilter<"User"> | string
    city?: StringFilter<"User"> | string
    municipality?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    addressComplement?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: BoolFilter<"User"> | boolean
    UserPermission?: UserPermissionListRelationFilter
    Patient?: PatientListRelationFilter
    Doctor?: DoctorListRelationFilter
    Institution?: InstitutionListRelationFilter
    Admin?: AdminListRelationFilter
    Rating?: RatingListRelationFilter
    ClinicRating?: ClinicRatingListRelationFilter
    PasswordConfirmationCode?: PasswordConfirmationCodeListRelationFilter
    FCMToken?: FCMTokenListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nationality?: SortOrderInput | SortOrder
    Role?: SortOrder
    nif?: SortOrderInput | SortOrder
    phone?: SortOrder
    birthday?: SortOrderInput | SortOrder
    FatherName?: SortOrderInput | SortOrder
    MotherName?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    BI?: SortOrderInput | SortOrder
    neigbhod?: SortOrder
    city?: SortOrder
    municipality?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    addressComplement?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    UserPermission?: UserPermissionOrderByRelationAggregateInput
    Patient?: PatientOrderByRelationAggregateInput
    Doctor?: DoctorOrderByRelationAggregateInput
    Institution?: InstitutionOrderByRelationAggregateInput
    Admin?: AdminOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
    ClinicRating?: ClinicRatingOrderByRelationAggregateInput
    PasswordConfirmationCode?: PasswordConfirmationCodeOrderByRelationAggregateInput
    FCMToken?: FCMTokenOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    nationality?: StringNullableFilter<"User"> | string | null
    Role?: EnumRoleTypeFilter<"User"> | $Enums.RoleType
    nif?: StringNullableFilter<"User"> | string | null
    phone?: StringFilter<"User"> | string
    birthday?: DateTimeNullableFilter<"User"> | Date | string | null
    FatherName?: StringNullableFilter<"User"> | string | null
    MotherName?: StringNullableFilter<"User"> | string | null
    type?: StringNullableFilter<"User"> | string | null
    gender?: StringNullableFilter<"User"> | string | null
    BI?: StringNullableFilter<"User"> | string | null
    neigbhod?: StringFilter<"User"> | string
    city?: StringFilter<"User"> | string
    municipality?: StringNullableFilter<"User"> | string | null
    avatar?: StringNullableFilter<"User"> | string | null
    addressComplement?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    deletedAt?: BoolFilter<"User"> | boolean
    UserPermission?: UserPermissionListRelationFilter
    Patient?: PatientListRelationFilter
    Doctor?: DoctorListRelationFilter
    Institution?: InstitutionListRelationFilter
    Admin?: AdminListRelationFilter
    Rating?: RatingListRelationFilter
    ClinicRating?: ClinicRatingListRelationFilter
    PasswordConfirmationCode?: PasswordConfirmationCodeListRelationFilter
    FCMToken?: FCMTokenListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nationality?: SortOrderInput | SortOrder
    Role?: SortOrder
    nif?: SortOrderInput | SortOrder
    phone?: SortOrder
    birthday?: SortOrderInput | SortOrder
    FatherName?: SortOrderInput | SortOrder
    MotherName?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    BI?: SortOrderInput | SortOrder
    neigbhod?: SortOrder
    city?: SortOrder
    municipality?: SortOrderInput | SortOrder
    avatar?: SortOrderInput | SortOrder
    addressComplement?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    nationality?: StringNullableWithAggregatesFilter<"User"> | string | null
    Role?: EnumRoleTypeWithAggregatesFilter<"User"> | $Enums.RoleType
    nif?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringWithAggregatesFilter<"User"> | string
    birthday?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    FatherName?: StringNullableWithAggregatesFilter<"User"> | string | null
    MotherName?: StringNullableWithAggregatesFilter<"User"> | string | null
    type?: StringNullableWithAggregatesFilter<"User"> | string | null
    gender?: StringNullableWithAggregatesFilter<"User"> | string | null
    BI?: StringNullableWithAggregatesFilter<"User"> | string | null
    neigbhod?: StringWithAggregatesFilter<"User"> | string
    city?: StringWithAggregatesFilter<"User"> | string
    municipality?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    addressComplement?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type RatingWhereInput = {
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    id?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    doctorId?: StringFilter<"Rating"> | string
    appoitmentID?: StringFilter<"Rating"> | string
    rate?: IntFilter<"Rating"> | number
    comment?: StringFilter<"Rating"> | string
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    deletedAt?: BoolFilter<"Rating"> | boolean
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    appoitment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }

  export type RatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    doctorId?: SortOrder
    appoitmentID?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    appoitment?: AppointmentOrderByWithRelationInput
  }

  export type RatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RatingWhereInput | RatingWhereInput[]
    OR?: RatingWhereInput[]
    NOT?: RatingWhereInput | RatingWhereInput[]
    userId?: StringFilter<"Rating"> | string
    doctorId?: StringFilter<"Rating"> | string
    appoitmentID?: StringFilter<"Rating"> | string
    rate?: IntFilter<"Rating"> | number
    comment?: StringFilter<"Rating"> | string
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    deletedAt?: BoolFilter<"Rating"> | boolean
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    appoitment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }, "id">

  export type RatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    doctorId?: SortOrder
    appoitmentID?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: RatingCountOrderByAggregateInput
    _avg?: RatingAvgOrderByAggregateInput
    _max?: RatingMaxOrderByAggregateInput
    _min?: RatingMinOrderByAggregateInput
    _sum?: RatingSumOrderByAggregateInput
  }

  export type RatingScalarWhereWithAggregatesInput = {
    AND?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    OR?: RatingScalarWhereWithAggregatesInput[]
    NOT?: RatingScalarWhereWithAggregatesInput | RatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rating"> | string
    userId?: StringWithAggregatesFilter<"Rating"> | string
    doctorId?: StringWithAggregatesFilter<"Rating"> | string
    appoitmentID?: StringWithAggregatesFilter<"Rating"> | string
    rate?: IntWithAggregatesFilter<"Rating"> | number
    comment?: StringWithAggregatesFilter<"Rating"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Rating"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Rating"> | boolean
  }

  export type ClinicRatingWhereInput = {
    AND?: ClinicRatingWhereInput | ClinicRatingWhereInput[]
    OR?: ClinicRatingWhereInput[]
    NOT?: ClinicRatingWhereInput | ClinicRatingWhereInput[]
    id?: StringFilter<"ClinicRating"> | string
    userId?: StringFilter<"ClinicRating"> | string
    clinicId?: StringFilter<"ClinicRating"> | string
    rate?: IntFilter<"ClinicRating"> | number
    comment?: StringFilter<"ClinicRating"> | string
    createdAt?: DateTimeFilter<"ClinicRating"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicRating"> | Date | string
    deletedAt?: BoolFilter<"ClinicRating"> | boolean
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ClinicRatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    institution?: InstitutionOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ClinicRatingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClinicRatingWhereInput | ClinicRatingWhereInput[]
    OR?: ClinicRatingWhereInput[]
    NOT?: ClinicRatingWhereInput | ClinicRatingWhereInput[]
    userId?: StringFilter<"ClinicRating"> | string
    clinicId?: StringFilter<"ClinicRating"> | string
    rate?: IntFilter<"ClinicRating"> | number
    comment?: StringFilter<"ClinicRating"> | string
    createdAt?: DateTimeFilter<"ClinicRating"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicRating"> | Date | string
    deletedAt?: BoolFilter<"ClinicRating"> | boolean
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ClinicRatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: ClinicRatingCountOrderByAggregateInput
    _avg?: ClinicRatingAvgOrderByAggregateInput
    _max?: ClinicRatingMaxOrderByAggregateInput
    _min?: ClinicRatingMinOrderByAggregateInput
    _sum?: ClinicRatingSumOrderByAggregateInput
  }

  export type ClinicRatingScalarWhereWithAggregatesInput = {
    AND?: ClinicRatingScalarWhereWithAggregatesInput | ClinicRatingScalarWhereWithAggregatesInput[]
    OR?: ClinicRatingScalarWhereWithAggregatesInput[]
    NOT?: ClinicRatingScalarWhereWithAggregatesInput | ClinicRatingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClinicRating"> | string
    userId?: StringWithAggregatesFilter<"ClinicRating"> | string
    clinicId?: StringWithAggregatesFilter<"ClinicRating"> | string
    rate?: IntWithAggregatesFilter<"ClinicRating"> | number
    comment?: StringWithAggregatesFilter<"ClinicRating"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ClinicRating"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClinicRating"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"ClinicRating"> | boolean
  }

  export type ServicesWhereInput = {
    AND?: ServicesWhereInput | ServicesWhereInput[]
    OR?: ServicesWhereInput[]
    NOT?: ServicesWhereInput | ServicesWhereInput[]
    id?: StringFilter<"Services"> | string
    name?: StringFilter<"Services"> | string
    description?: StringFilter<"Services"> | string
    price?: FloatFilter<"Services"> | number
    institutionId?: StringFilter<"Services"> | string
    createdAt?: DateTimeFilter<"Services"> | Date | string
    updatedAt?: DateTimeFilter<"Services"> | Date | string
    deletedAt?: BoolFilter<"Services"> | boolean
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }

  export type ServicesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    institution?: InstitutionOrderByWithRelationInput
  }

  export type ServicesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ServicesWhereInput | ServicesWhereInput[]
    OR?: ServicesWhereInput[]
    NOT?: ServicesWhereInput | ServicesWhereInput[]
    name?: StringFilter<"Services"> | string
    description?: StringFilter<"Services"> | string
    price?: FloatFilter<"Services"> | number
    institutionId?: StringFilter<"Services"> | string
    createdAt?: DateTimeFilter<"Services"> | Date | string
    updatedAt?: DateTimeFilter<"Services"> | Date | string
    deletedAt?: BoolFilter<"Services"> | boolean
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }, "id">

  export type ServicesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: ServicesCountOrderByAggregateInput
    _avg?: ServicesAvgOrderByAggregateInput
    _max?: ServicesMaxOrderByAggregateInput
    _min?: ServicesMinOrderByAggregateInput
    _sum?: ServicesSumOrderByAggregateInput
  }

  export type ServicesScalarWhereWithAggregatesInput = {
    AND?: ServicesScalarWhereWithAggregatesInput | ServicesScalarWhereWithAggregatesInput[]
    OR?: ServicesScalarWhereWithAggregatesInput[]
    NOT?: ServicesScalarWhereWithAggregatesInput | ServicesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Services"> | string
    name?: StringWithAggregatesFilter<"Services"> | string
    description?: StringWithAggregatesFilter<"Services"> | string
    price?: FloatWithAggregatesFilter<"Services"> | number
    institutionId?: StringWithAggregatesFilter<"Services"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Services"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Services"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Services"> | boolean
  }

  export type SpecialityWhereInput = {
    AND?: SpecialityWhereInput | SpecialityWhereInput[]
    OR?: SpecialityWhereInput[]
    NOT?: SpecialityWhereInput | SpecialityWhereInput[]
    id?: StringFilter<"Speciality"> | string
    name?: StringFilter<"Speciality"> | string
    description?: StringFilter<"Speciality"> | string
    createdAt?: DateTimeFilter<"Speciality"> | Date | string
    updatedAt?: DateTimeFilter<"Speciality"> | Date | string
    deletedAt?: BoolFilter<"Speciality"> | boolean
  }

  export type SpecialityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SpecialityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SpecialityWhereInput | SpecialityWhereInput[]
    OR?: SpecialityWhereInput[]
    NOT?: SpecialityWhereInput | SpecialityWhereInput[]
    name?: StringFilter<"Speciality"> | string
    description?: StringFilter<"Speciality"> | string
    createdAt?: DateTimeFilter<"Speciality"> | Date | string
    updatedAt?: DateTimeFilter<"Speciality"> | Date | string
    deletedAt?: BoolFilter<"Speciality"> | boolean
  }, "id">

  export type SpecialityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: SpecialityCountOrderByAggregateInput
    _max?: SpecialityMaxOrderByAggregateInput
    _min?: SpecialityMinOrderByAggregateInput
  }

  export type SpecialityScalarWhereWithAggregatesInput = {
    AND?: SpecialityScalarWhereWithAggregatesInput | SpecialityScalarWhereWithAggregatesInput[]
    OR?: SpecialityScalarWhereWithAggregatesInput[]
    NOT?: SpecialityScalarWhereWithAggregatesInput | SpecialityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Speciality"> | string
    name?: StringWithAggregatesFilter<"Speciality"> | string
    description?: StringWithAggregatesFilter<"Speciality"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Speciality"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Speciality"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Speciality"> | boolean
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permissions?: EnumpermissionsFilter<"UserPermission"> | $Enums.permissions
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    deletedAt?: BoolFilter<"UserPermission"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissions?: EnumpermissionsFilter<"UserPermission"> | $Enums.permissions
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    deletedAt?: BoolFilter<"UserPermission"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPermission"> | string
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permissions?: EnumpermissionsWithAggregatesFilter<"UserPermission"> | $Enums.permissions
    createdAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"UserPermission"> | boolean
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    number?: IntNullableFilter<"Patient"> | number | null
    userId?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    deletedAt?: BoolFilter<"Patient"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    Appointment?: AppointmentListRelationFilter
    Notification?: NotificationListRelationFilter
    Qrcode?: QrcodeListRelationFilter
    Favorites?: FavoritesListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
    patientCard?: PatientCardListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    Appointment?: AppointmentOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
    Qrcode?: QrcodeOrderByRelationAggregateInput
    Favorites?: FavoritesOrderByRelationAggregateInput
    medicalReport?: MedicalReportOrderByRelationAggregateInput
    patientCard?: PatientCardOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    number?: IntNullableFilter<"Patient"> | number | null
    userId?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    deletedAt?: BoolFilter<"Patient"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    Appointment?: AppointmentListRelationFilter
    Notification?: NotificationListRelationFilter
    Qrcode?: QrcodeListRelationFilter
    Favorites?: FavoritesListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
    patientCard?: PatientCardListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    number?: IntNullableWithAggregatesFilter<"Patient"> | number | null
    userId?: StringWithAggregatesFilter<"Patient"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Patient"> | boolean
  }

  export type PatientCardWhereInput = {
    AND?: PatientCardWhereInput | PatientCardWhereInput[]
    OR?: PatientCardWhereInput[]
    NOT?: PatientCardWhereInput | PatientCardWhereInput[]
    id?: StringFilter<"PatientCard"> | string
    patientId?: StringFilter<"PatientCard"> | string
    clinicId?: StringFilter<"PatientCard"> | string
    qrCode?: StringFilter<"PatientCard"> | string
    cardNumber?: StringFilter<"PatientCard"> | string
    status?: EnumCardStatusFilter<"PatientCard"> | $Enums.CardStatus
    issuedOn?: DateTimeNullableFilter<"PatientCard"> | Date | string | null
    createdAt?: DateTimeFilter<"PatientCard"> | Date | string
    updatedAt?: DateTimeFilter<"PatientCard"> | Date | string
    deletedAt?: BoolFilter<"PatientCard"> | boolean
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
  }

  export type PatientCardOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    clinicId?: SortOrder
    qrCode?: SortOrder
    cardNumber?: SortOrder
    status?: SortOrder
    issuedOn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type PatientCardWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    cardNumber?: string
    AND?: PatientCardWhereInput | PatientCardWhereInput[]
    OR?: PatientCardWhereInput[]
    NOT?: PatientCardWhereInput | PatientCardWhereInput[]
    patientId?: StringFilter<"PatientCard"> | string
    clinicId?: StringFilter<"PatientCard"> | string
    qrCode?: StringFilter<"PatientCard"> | string
    status?: EnumCardStatusFilter<"PatientCard"> | $Enums.CardStatus
    issuedOn?: DateTimeNullableFilter<"PatientCard"> | Date | string | null
    createdAt?: DateTimeFilter<"PatientCard"> | Date | string
    updatedAt?: DateTimeFilter<"PatientCard"> | Date | string
    deletedAt?: BoolFilter<"PatientCard"> | boolean
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
  }, "id" | "cardNumber">

  export type PatientCardOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    clinicId?: SortOrder
    qrCode?: SortOrder
    cardNumber?: SortOrder
    status?: SortOrder
    issuedOn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: PatientCardCountOrderByAggregateInput
    _max?: PatientCardMaxOrderByAggregateInput
    _min?: PatientCardMinOrderByAggregateInput
  }

  export type PatientCardScalarWhereWithAggregatesInput = {
    AND?: PatientCardScalarWhereWithAggregatesInput | PatientCardScalarWhereWithAggregatesInput[]
    OR?: PatientCardScalarWhereWithAggregatesInput[]
    NOT?: PatientCardScalarWhereWithAggregatesInput | PatientCardScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientCard"> | string
    patientId?: StringWithAggregatesFilter<"PatientCard"> | string
    clinicId?: StringWithAggregatesFilter<"PatientCard"> | string
    qrCode?: StringWithAggregatesFilter<"PatientCard"> | string
    cardNumber?: StringWithAggregatesFilter<"PatientCard"> | string
    status?: EnumCardStatusWithAggregatesFilter<"PatientCard"> | $Enums.CardStatus
    issuedOn?: DateTimeNullableWithAggregatesFilter<"PatientCard"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientCard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientCard"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"PatientCard"> | boolean
  }

  export type QrcodeWhereInput = {
    AND?: QrcodeWhereInput | QrcodeWhereInput[]
    OR?: QrcodeWhereInput[]
    NOT?: QrcodeWhereInput | QrcodeWhereInput[]
    id?: StringFilter<"Qrcode"> | string
    code?: StringFilter<"Qrcode"> | string
    patientId?: StringFilter<"Qrcode"> | string
    createdAt?: DateTimeFilter<"Qrcode"> | Date | string
    updatedAt?: DateTimeFilter<"Qrcode"> | Date | string
    deletedAt?: BoolFilter<"Qrcode"> | boolean
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
  }

  export type QrcodeOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type QrcodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QrcodeWhereInput | QrcodeWhereInput[]
    OR?: QrcodeWhereInput[]
    NOT?: QrcodeWhereInput | QrcodeWhereInput[]
    code?: StringFilter<"Qrcode"> | string
    patientId?: StringFilter<"Qrcode"> | string
    createdAt?: DateTimeFilter<"Qrcode"> | Date | string
    updatedAt?: DateTimeFilter<"Qrcode"> | Date | string
    deletedAt?: BoolFilter<"Qrcode"> | boolean
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
  }, "id">

  export type QrcodeOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: QrcodeCountOrderByAggregateInput
    _max?: QrcodeMaxOrderByAggregateInput
    _min?: QrcodeMinOrderByAggregateInput
  }

  export type QrcodeScalarWhereWithAggregatesInput = {
    AND?: QrcodeScalarWhereWithAggregatesInput | QrcodeScalarWhereWithAggregatesInput[]
    OR?: QrcodeScalarWhereWithAggregatesInput[]
    NOT?: QrcodeScalarWhereWithAggregatesInput | QrcodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Qrcode"> | string
    code?: StringWithAggregatesFilter<"Qrcode"> | string
    patientId?: StringWithAggregatesFilter<"Qrcode"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Qrcode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Qrcode"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Qrcode"> | boolean
  }

  export type DoctorWhereInput = {
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    id?: StringFilter<"Doctor"> | string
    userId?: StringFilter<"Doctor"> | string
    specialty?: StringFilter<"Doctor"> | string
    bio?: StringFilter<"Doctor"> | string
    registrationNumber?: IntFilter<"Doctor"> | number
    institutionId?: StringFilter<"Doctor"> | string
    isOnVacation?: BoolNullableFilter<"Doctor"> | boolean | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    deletedAt?: BoolFilter<"Doctor"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    WeeklySchedule?: WeeklyScheduleListRelationFilter
    Consultation?: AppointmentListRelationFilter
    rating?: RatingListRelationFilter
    institution?: DoctorInstitutionListRelationFilter
    Notification?: NotificationListRelationFilter
    Favorites?: FavoritesListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    specialty?: SortOrder
    bio?: SortOrder
    registrationNumber?: SortOrder
    institutionId?: SortOrder
    isOnVacation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    WeeklySchedule?: WeeklyScheduleOrderByRelationAggregateInput
    Consultation?: AppointmentOrderByRelationAggregateInput
    rating?: RatingOrderByRelationAggregateInput
    institution?: DoctorInstitutionOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
    Favorites?: FavoritesOrderByRelationAggregateInput
    medicalReport?: MedicalReportOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DoctorWhereInput | DoctorWhereInput[]
    OR?: DoctorWhereInput[]
    NOT?: DoctorWhereInput | DoctorWhereInput[]
    userId?: StringFilter<"Doctor"> | string
    specialty?: StringFilter<"Doctor"> | string
    bio?: StringFilter<"Doctor"> | string
    registrationNumber?: IntFilter<"Doctor"> | number
    institutionId?: StringFilter<"Doctor"> | string
    isOnVacation?: BoolNullableFilter<"Doctor"> | boolean | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    deletedAt?: BoolFilter<"Doctor"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    WeeklySchedule?: WeeklyScheduleListRelationFilter
    Consultation?: AppointmentListRelationFilter
    rating?: RatingListRelationFilter
    institution?: DoctorInstitutionListRelationFilter
    Notification?: NotificationListRelationFilter
    Favorites?: FavoritesListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
  }, "id">

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    specialty?: SortOrder
    bio?: SortOrder
    registrationNumber?: SortOrder
    institutionId?: SortOrder
    isOnVacation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    OR?: DoctorScalarWhereWithAggregatesInput[]
    NOT?: DoctorScalarWhereWithAggregatesInput | DoctorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Doctor"> | string
    userId?: StringWithAggregatesFilter<"Doctor"> | string
    specialty?: StringWithAggregatesFilter<"Doctor"> | string
    bio?: StringWithAggregatesFilter<"Doctor"> | string
    registrationNumber?: IntWithAggregatesFilter<"Doctor"> | number
    institutionId?: StringWithAggregatesFilter<"Doctor"> | string
    isOnVacation?: BoolNullableWithAggregatesFilter<"Doctor"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doctor"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Doctor"> | boolean
  }

  export type FavoritesWhereInput = {
    AND?: FavoritesWhereInput | FavoritesWhereInput[]
    OR?: FavoritesWhereInput[]
    NOT?: FavoritesWhereInput | FavoritesWhereInput[]
    id?: StringFilter<"Favorites"> | string
    pacientId?: StringFilter<"Favorites"> | string
    doctorId?: StringNullableFilter<"Favorites"> | string | null
    institutionId?: StringNullableFilter<"Favorites"> | string | null
    createdAt?: DateTimeFilter<"Favorites"> | Date | string
    updatedAt?: DateTimeFilter<"Favorites"> | Date | string
    deletedAt?: BoolFilter<"Favorites"> | boolean
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    institution?: XOR<InstitutionNullableRelationFilter, InstitutionWhereInput> | null
    pacient?: XOR<PatientRelationFilter, PatientWhereInput>
  }

  export type FavoritesOrderByWithRelationInput = {
    id?: SortOrder
    pacientId?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    institutionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
    pacient?: PatientOrderByWithRelationInput
  }

  export type FavoritesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FavoritesWhereInput | FavoritesWhereInput[]
    OR?: FavoritesWhereInput[]
    NOT?: FavoritesWhereInput | FavoritesWhereInput[]
    pacientId?: StringFilter<"Favorites"> | string
    doctorId?: StringNullableFilter<"Favorites"> | string | null
    institutionId?: StringNullableFilter<"Favorites"> | string | null
    createdAt?: DateTimeFilter<"Favorites"> | Date | string
    updatedAt?: DateTimeFilter<"Favorites"> | Date | string
    deletedAt?: BoolFilter<"Favorites"> | boolean
    doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    institution?: XOR<InstitutionNullableRelationFilter, InstitutionWhereInput> | null
    pacient?: XOR<PatientRelationFilter, PatientWhereInput>
  }, "id">

  export type FavoritesOrderByWithAggregationInput = {
    id?: SortOrder
    pacientId?: SortOrder
    doctorId?: SortOrderInput | SortOrder
    institutionId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: FavoritesCountOrderByAggregateInput
    _max?: FavoritesMaxOrderByAggregateInput
    _min?: FavoritesMinOrderByAggregateInput
  }

  export type FavoritesScalarWhereWithAggregatesInput = {
    AND?: FavoritesScalarWhereWithAggregatesInput | FavoritesScalarWhereWithAggregatesInput[]
    OR?: FavoritesScalarWhereWithAggregatesInput[]
    NOT?: FavoritesScalarWhereWithAggregatesInput | FavoritesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Favorites"> | string
    pacientId?: StringWithAggregatesFilter<"Favorites"> | string
    doctorId?: StringNullableWithAggregatesFilter<"Favorites"> | string | null
    institutionId?: StringNullableWithAggregatesFilter<"Favorites"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Favorites"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Favorites"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Favorites"> | boolean
  }

  export type InstitutionWhereInput = {
    AND?: InstitutionWhereInput | InstitutionWhereInput[]
    OR?: InstitutionWhereInput[]
    NOT?: InstitutionWhereInput | InstitutionWhereInput[]
    id?: StringFilter<"Institution"> | string
    userId?: StringFilter<"Institution"> | string
    clinicLatitude?: StringFilter<"Institution"> | string
    cliniclongitude?: StringFilter<"Institution"> | string
    createdAt?: DateTimeFilter<"Institution"> | Date | string
    updatedAt?: DateTimeFilter<"Institution"> | Date | string
    deletedAt?: BoolFilter<"Institution"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    Admin?: AdminListRelationFilter
    Consultation?: AppointmentListRelationFilter
    service?: ServicesListRelationFilter
    WeeklySchedule?: WeeklyScheduleListRelationFilter
    Doctor?: DoctorInstitutionListRelationFilter
    ClinicRating?: ClinicRatingListRelationFilter
    Notification?: NotificationListRelationFilter
    Favorites?: FavoritesListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
  }

  export type InstitutionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicLatitude?: SortOrder
    cliniclongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    Admin?: AdminOrderByRelationAggregateInput
    Consultation?: AppointmentOrderByRelationAggregateInput
    service?: ServicesOrderByRelationAggregateInput
    WeeklySchedule?: WeeklyScheduleOrderByRelationAggregateInput
    Doctor?: DoctorInstitutionOrderByRelationAggregateInput
    ClinicRating?: ClinicRatingOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
    Favorites?: FavoritesOrderByRelationAggregateInput
    medicalReport?: MedicalReportOrderByRelationAggregateInput
  }

  export type InstitutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InstitutionWhereInput | InstitutionWhereInput[]
    OR?: InstitutionWhereInput[]
    NOT?: InstitutionWhereInput | InstitutionWhereInput[]
    userId?: StringFilter<"Institution"> | string
    clinicLatitude?: StringFilter<"Institution"> | string
    cliniclongitude?: StringFilter<"Institution"> | string
    createdAt?: DateTimeFilter<"Institution"> | Date | string
    updatedAt?: DateTimeFilter<"Institution"> | Date | string
    deletedAt?: BoolFilter<"Institution"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    Admin?: AdminListRelationFilter
    Consultation?: AppointmentListRelationFilter
    service?: ServicesListRelationFilter
    WeeklySchedule?: WeeklyScheduleListRelationFilter
    Doctor?: DoctorInstitutionListRelationFilter
    ClinicRating?: ClinicRatingListRelationFilter
    Notification?: NotificationListRelationFilter
    Favorites?: FavoritesListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
  }, "id">

  export type InstitutionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicLatitude?: SortOrder
    cliniclongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: InstitutionCountOrderByAggregateInput
    _max?: InstitutionMaxOrderByAggregateInput
    _min?: InstitutionMinOrderByAggregateInput
  }

  export type InstitutionScalarWhereWithAggregatesInput = {
    AND?: InstitutionScalarWhereWithAggregatesInput | InstitutionScalarWhereWithAggregatesInput[]
    OR?: InstitutionScalarWhereWithAggregatesInput[]
    NOT?: InstitutionScalarWhereWithAggregatesInput | InstitutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Institution"> | string
    userId?: StringWithAggregatesFilter<"Institution"> | string
    clinicLatitude?: StringWithAggregatesFilter<"Institution"> | string
    cliniclongitude?: StringWithAggregatesFilter<"Institution"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Institution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Institution"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Institution"> | boolean
  }

  export type DoctorInstitutionWhereInput = {
    AND?: DoctorInstitutionWhereInput | DoctorInstitutionWhereInput[]
    OR?: DoctorInstitutionWhereInput[]
    NOT?: DoctorInstitutionWhereInput | DoctorInstitutionWhereInput[]
    id?: StringFilter<"DoctorInstitution"> | string
    doctorId?: StringFilter<"DoctorInstitution"> | string
    institutionId?: StringFilter<"DoctorInstitution"> | string
    Doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }

  export type DoctorInstitutionOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    Doctor?: DoctorOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type DoctorInstitutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    doctorId_institutionId?: DoctorInstitutionDoctorIdInstitutionIdCompoundUniqueInput
    AND?: DoctorInstitutionWhereInput | DoctorInstitutionWhereInput[]
    OR?: DoctorInstitutionWhereInput[]
    NOT?: DoctorInstitutionWhereInput | DoctorInstitutionWhereInput[]
    doctorId?: StringFilter<"DoctorInstitution"> | string
    institutionId?: StringFilter<"DoctorInstitution"> | string
    Doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }, "id" | "doctorId_institutionId">

  export type DoctorInstitutionOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    _count?: DoctorInstitutionCountOrderByAggregateInput
    _max?: DoctorInstitutionMaxOrderByAggregateInput
    _min?: DoctorInstitutionMinOrderByAggregateInput
  }

  export type DoctorInstitutionScalarWhereWithAggregatesInput = {
    AND?: DoctorInstitutionScalarWhereWithAggregatesInput | DoctorInstitutionScalarWhereWithAggregatesInput[]
    OR?: DoctorInstitutionScalarWhereWithAggregatesInput[]
    NOT?: DoctorInstitutionScalarWhereWithAggregatesInput | DoctorInstitutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DoctorInstitution"> | string
    doctorId?: StringWithAggregatesFilter<"DoctorInstitution"> | string
    institutionId?: StringWithAggregatesFilter<"DoctorInstitution"> | string
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    userId?: StringFilter<"Admin"> | string
    institutionId?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    deletedAt?: BoolFilter<"Admin"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    userId?: StringFilter<"Admin"> | string
    institutionId?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    deletedAt?: BoolFilter<"Admin"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }, "id">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    userId?: StringWithAggregatesFilter<"Admin"> | string
    institutionId?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Admin"> | boolean
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    institutionId?: StringFilter<"Appointment"> | string
    consultationTypeId?: StringFilter<"Appointment"> | string
    doctorId?: StringFilter<"Appointment"> | string
    symptomDescription?: StringFilter<"Appointment"> | string
    isUrgent?: BoolNullableFilter<"Appointment"> | boolean | null
    date?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    deletedAt?: BoolFilter<"Appointment"> | boolean
    pacient?: XOR<PatientRelationFilter, PatientWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
    consultationType?: XOR<ConsultationTypeRelationFilter, ConsultationTypeWhereInput>
    Doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    medicalHistories?: MedicalHistoryListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
    Rating?: RatingListRelationFilter
    Notification?: NotificationListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    institutionId?: SortOrder
    consultationTypeId?: SortOrder
    doctorId?: SortOrder
    symptomDescription?: SortOrder
    isUrgent?: SortOrderInput | SortOrder
    date?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    pacient?: PatientOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
    consultationType?: ConsultationTypeOrderByWithRelationInput
    Doctor?: DoctorOrderByWithRelationInput
    medicalHistories?: MedicalHistoryOrderByRelationAggregateInput
    medicalReport?: MedicalReportOrderByRelationAggregateInput
    Rating?: RatingOrderByRelationAggregateInput
    Notification?: NotificationOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    patientId?: StringFilter<"Appointment"> | string
    institutionId?: StringFilter<"Appointment"> | string
    consultationTypeId?: StringFilter<"Appointment"> | string
    doctorId?: StringFilter<"Appointment"> | string
    symptomDescription?: StringFilter<"Appointment"> | string
    isUrgent?: BoolNullableFilter<"Appointment"> | boolean | null
    date?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    deletedAt?: BoolFilter<"Appointment"> | boolean
    pacient?: XOR<PatientRelationFilter, PatientWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
    consultationType?: XOR<ConsultationTypeRelationFilter, ConsultationTypeWhereInput>
    Doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    medicalHistories?: MedicalHistoryListRelationFilter
    medicalReport?: MedicalReportListRelationFilter
    Rating?: RatingListRelationFilter
    Notification?: NotificationListRelationFilter
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    institutionId?: SortOrder
    consultationTypeId?: SortOrder
    doctorId?: SortOrder
    symptomDescription?: SortOrder
    isUrgent?: SortOrderInput | SortOrder
    date?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    patientId?: StringWithAggregatesFilter<"Appointment"> | string
    institutionId?: StringWithAggregatesFilter<"Appointment"> | string
    consultationTypeId?: StringWithAggregatesFilter<"Appointment"> | string
    doctorId?: StringWithAggregatesFilter<"Appointment"> | string
    symptomDescription?: StringWithAggregatesFilter<"Appointment"> | string
    isUrgent?: BoolNullableWithAggregatesFilter<"Appointment"> | boolean | null
    date?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Appointment"> | boolean
  }

  export type ConsultationTypeWhereInput = {
    AND?: ConsultationTypeWhereInput | ConsultationTypeWhereInput[]
    OR?: ConsultationTypeWhereInput[]
    NOT?: ConsultationTypeWhereInput | ConsultationTypeWhereInput[]
    id?: StringFilter<"ConsultationType"> | string
    description?: StringFilter<"ConsultationType"> | string
    name?: StringFilter<"ConsultationType"> | string
    createdAt?: DateTimeFilter<"ConsultationType"> | Date | string
    updatedAt?: DateTimeFilter<"ConsultationType"> | Date | string
    deletedAt?: BoolFilter<"ConsultationType"> | boolean
    Consultation?: AppointmentListRelationFilter
  }

  export type ConsultationTypeOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    Consultation?: AppointmentOrderByRelationAggregateInput
  }

  export type ConsultationTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsultationTypeWhereInput | ConsultationTypeWhereInput[]
    OR?: ConsultationTypeWhereInput[]
    NOT?: ConsultationTypeWhereInput | ConsultationTypeWhereInput[]
    description?: StringFilter<"ConsultationType"> | string
    name?: StringFilter<"ConsultationType"> | string
    createdAt?: DateTimeFilter<"ConsultationType"> | Date | string
    updatedAt?: DateTimeFilter<"ConsultationType"> | Date | string
    deletedAt?: BoolFilter<"ConsultationType"> | boolean
    Consultation?: AppointmentListRelationFilter
  }, "id">

  export type ConsultationTypeOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: ConsultationTypeCountOrderByAggregateInput
    _max?: ConsultationTypeMaxOrderByAggregateInput
    _min?: ConsultationTypeMinOrderByAggregateInput
  }

  export type ConsultationTypeScalarWhereWithAggregatesInput = {
    AND?: ConsultationTypeScalarWhereWithAggregatesInput | ConsultationTypeScalarWhereWithAggregatesInput[]
    OR?: ConsultationTypeScalarWhereWithAggregatesInput[]
    NOT?: ConsultationTypeScalarWhereWithAggregatesInput | ConsultationTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConsultationType"> | string
    description?: StringWithAggregatesFilter<"ConsultationType"> | string
    name?: StringWithAggregatesFilter<"ConsultationType"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ConsultationType"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConsultationType"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"ConsultationType"> | boolean
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    doctor_id?: StringNullableFilter<"Notification"> | string | null
    patient_id?: StringNullableFilter<"Notification"> | string | null
    institution_id?: StringNullableFilter<"Notification"> | string | null
    appointmentId?: StringNullableFilter<"Notification"> | string | null
    read?: BoolFilter<"Notification"> | boolean
    type?: EnumTypeNotificationNullableFilter<"Notification"> | $Enums.TypeNotification | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    deletedAt?: BoolFilter<"Notification"> | boolean
    Doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    Patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    Institution?: XOR<InstitutionNullableRelationFilter, InstitutionWhereInput> | null
    Appointment?: XOR<AppointmentNullableRelationFilter, AppointmentWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    doctor_id?: SortOrderInput | SortOrder
    patient_id?: SortOrderInput | SortOrder
    institution_id?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    read?: SortOrder
    type?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    Doctor?: DoctorOrderByWithRelationInput
    Patient?: PatientOrderByWithRelationInput
    Institution?: InstitutionOrderByWithRelationInput
    Appointment?: AppointmentOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    content?: StringFilter<"Notification"> | string
    doctor_id?: StringNullableFilter<"Notification"> | string | null
    patient_id?: StringNullableFilter<"Notification"> | string | null
    institution_id?: StringNullableFilter<"Notification"> | string | null
    appointmentId?: StringNullableFilter<"Notification"> | string | null
    read?: BoolFilter<"Notification"> | boolean
    type?: EnumTypeNotificationNullableFilter<"Notification"> | $Enums.TypeNotification | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    deletedAt?: BoolFilter<"Notification"> | boolean
    Doctor?: XOR<DoctorNullableRelationFilter, DoctorWhereInput> | null
    Patient?: XOR<PatientNullableRelationFilter, PatientWhereInput> | null
    Institution?: XOR<InstitutionNullableRelationFilter, InstitutionWhereInput> | null
    Appointment?: XOR<AppointmentNullableRelationFilter, AppointmentWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    doctor_id?: SortOrderInput | SortOrder
    patient_id?: SortOrderInput | SortOrder
    institution_id?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    read?: SortOrder
    type?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    content?: StringWithAggregatesFilter<"Notification"> | string
    doctor_id?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    patient_id?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    institution_id?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    appointmentId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    type?: EnumTypeNotificationNullableWithAggregatesFilter<"Notification"> | $Enums.TypeNotification | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"Notification"> | boolean
  }

  export type WeeklyScheduleWhereInput = {
    AND?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    OR?: WeeklyScheduleWhereInput[]
    NOT?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    id?: StringFilter<"WeeklySchedule"> | string
    doctorId?: StringFilter<"WeeklySchedule"> | string
    institutionId?: StringFilter<"WeeklySchedule"> | string
    dayOfWeek?: DateTimeFilter<"WeeklySchedule"> | Date | string
    startTime?: IntFilter<"WeeklySchedule"> | number
    endTime?: IntFilter<"WeeklySchedule"> | number
    interval?: IntFilter<"WeeklySchedule"> | number
    dailyWorkingHours?: IntFilter<"WeeklySchedule"> | number
    createdAt?: DateTimeFilter<"WeeklySchedule"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklySchedule"> | Date | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }

  export type WeeklyScheduleOrderByWithRelationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    institution?: InstitutionOrderByWithRelationInput
  }

  export type WeeklyScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    OR?: WeeklyScheduleWhereInput[]
    NOT?: WeeklyScheduleWhereInput | WeeklyScheduleWhereInput[]
    doctorId?: StringFilter<"WeeklySchedule"> | string
    institutionId?: StringFilter<"WeeklySchedule"> | string
    dayOfWeek?: DateTimeFilter<"WeeklySchedule"> | Date | string
    startTime?: IntFilter<"WeeklySchedule"> | number
    endTime?: IntFilter<"WeeklySchedule"> | number
    interval?: IntFilter<"WeeklySchedule"> | number
    dailyWorkingHours?: IntFilter<"WeeklySchedule"> | number
    createdAt?: DateTimeFilter<"WeeklySchedule"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklySchedule"> | Date | string
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
  }, "id">

  export type WeeklyScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WeeklyScheduleCountOrderByAggregateInput
    _avg?: WeeklyScheduleAvgOrderByAggregateInput
    _max?: WeeklyScheduleMaxOrderByAggregateInput
    _min?: WeeklyScheduleMinOrderByAggregateInput
    _sum?: WeeklyScheduleSumOrderByAggregateInput
  }

  export type WeeklyScheduleScalarWhereWithAggregatesInput = {
    AND?: WeeklyScheduleScalarWhereWithAggregatesInput | WeeklyScheduleScalarWhereWithAggregatesInput[]
    OR?: WeeklyScheduleScalarWhereWithAggregatesInput[]
    NOT?: WeeklyScheduleScalarWhereWithAggregatesInput | WeeklyScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WeeklySchedule"> | string
    doctorId?: StringWithAggregatesFilter<"WeeklySchedule"> | string
    institutionId?: StringWithAggregatesFilter<"WeeklySchedule"> | string
    dayOfWeek?: DateTimeWithAggregatesFilter<"WeeklySchedule"> | Date | string
    startTime?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    endTime?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    interval?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    dailyWorkingHours?: IntWithAggregatesFilter<"WeeklySchedule"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WeeklySchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WeeklySchedule"> | Date | string
  }

  export type MedicalHistoryWhereInput = {
    AND?: MedicalHistoryWhereInput | MedicalHistoryWhereInput[]
    OR?: MedicalHistoryWhereInput[]
    NOT?: MedicalHistoryWhereInput | MedicalHistoryWhereInput[]
    id?: StringFilter<"MedicalHistory"> | string
    AppointmentId?: StringFilter<"MedicalHistory"> | string
    createdAt?: DateTimeFilter<"MedicalHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalHistory"> | Date | string
    deletedAt?: BoolFilter<"MedicalHistory"> | boolean
    Appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }

  export type MedicalHistoryOrderByWithRelationInput = {
    id?: SortOrder
    AppointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    Appointment?: AppointmentOrderByWithRelationInput
  }

  export type MedicalHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicalHistoryWhereInput | MedicalHistoryWhereInput[]
    OR?: MedicalHistoryWhereInput[]
    NOT?: MedicalHistoryWhereInput | MedicalHistoryWhereInput[]
    AppointmentId?: StringFilter<"MedicalHistory"> | string
    createdAt?: DateTimeFilter<"MedicalHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalHistory"> | Date | string
    deletedAt?: BoolFilter<"MedicalHistory"> | boolean
    Appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }, "id">

  export type MedicalHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    AppointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: MedicalHistoryCountOrderByAggregateInput
    _max?: MedicalHistoryMaxOrderByAggregateInput
    _min?: MedicalHistoryMinOrderByAggregateInput
  }

  export type MedicalHistoryScalarWhereWithAggregatesInput = {
    AND?: MedicalHistoryScalarWhereWithAggregatesInput | MedicalHistoryScalarWhereWithAggregatesInput[]
    OR?: MedicalHistoryScalarWhereWithAggregatesInput[]
    NOT?: MedicalHistoryScalarWhereWithAggregatesInput | MedicalHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalHistory"> | string
    AppointmentId?: StringWithAggregatesFilter<"MedicalHistory"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MedicalHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalHistory"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"MedicalHistory"> | boolean
  }

  export type PasswordConfirmationCodeWhereInput = {
    AND?: PasswordConfirmationCodeWhereInput | PasswordConfirmationCodeWhereInput[]
    OR?: PasswordConfirmationCodeWhereInput[]
    NOT?: PasswordConfirmationCodeWhereInput | PasswordConfirmationCodeWhereInput[]
    id?: StringFilter<"PasswordConfirmationCode"> | string
    userId?: StringFilter<"PasswordConfirmationCode"> | string
    code?: StringFilter<"PasswordConfirmationCode"> | string
    expiresAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    createdAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    deletedAt?: BoolFilter<"PasswordConfirmationCode"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PasswordConfirmationCodeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type PasswordConfirmationCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: PasswordConfirmationCodeWhereInput | PasswordConfirmationCodeWhereInput[]
    OR?: PasswordConfirmationCodeWhereInput[]
    NOT?: PasswordConfirmationCodeWhereInput | PasswordConfirmationCodeWhereInput[]
    userId?: StringFilter<"PasswordConfirmationCode"> | string
    expiresAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    createdAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    deletedAt?: BoolFilter<"PasswordConfirmationCode"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "code">

  export type PasswordConfirmationCodeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: PasswordConfirmationCodeCountOrderByAggregateInput
    _max?: PasswordConfirmationCodeMaxOrderByAggregateInput
    _min?: PasswordConfirmationCodeMinOrderByAggregateInput
  }

  export type PasswordConfirmationCodeScalarWhereWithAggregatesInput = {
    AND?: PasswordConfirmationCodeScalarWhereWithAggregatesInput | PasswordConfirmationCodeScalarWhereWithAggregatesInput[]
    OR?: PasswordConfirmationCodeScalarWhereWithAggregatesInput[]
    NOT?: PasswordConfirmationCodeScalarWhereWithAggregatesInput | PasswordConfirmationCodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PasswordConfirmationCode"> | string
    userId?: StringWithAggregatesFilter<"PasswordConfirmationCode"> | string
    code?: StringWithAggregatesFilter<"PasswordConfirmationCode"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"PasswordConfirmationCode"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PasswordConfirmationCode"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PasswordConfirmationCode"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"PasswordConfirmationCode"> | boolean
  }

  export type MedicalReportWhereInput = {
    AND?: MedicalReportWhereInput | MedicalReportWhereInput[]
    OR?: MedicalReportWhereInput[]
    NOT?: MedicalReportWhereInput | MedicalReportWhereInput[]
    id?: StringFilter<"MedicalReport"> | string
    institutionId?: StringFilter<"MedicalReport"> | string
    doctorId?: StringFilter<"MedicalReport"> | string
    patientId?: StringFilter<"MedicalReport"> | string
    AppointmentId?: StringFilter<"MedicalReport"> | string
    medicalEvaluation?: StringNullableFilter<"MedicalReport"> | string | null
    bloodPressure?: StringNullableFilter<"MedicalReport"> | string | null
    height?: StringNullableFilter<"MedicalReport"> | string | null
    weight?: StringNullableFilter<"MedicalReport"> | string | null
    pulse?: StringNullableFilter<"MedicalReport"> | string | null
    temperature?: StringNullableFilter<"MedicalReport"> | string | null
    otherPhysicalParams?: StringNullableFilter<"MedicalReport"> | string | null
    diagnosis?: StringNullableFilter<"MedicalReport"> | string | null
    treatmentPlan?: StringNullableFilter<"MedicalReport"> | string | null
    recommendations?: StringNullableListFilter<"MedicalReport">
    orientations?: StringNullableListFilter<"MedicalReport">
    observations?: StringNullableFilter<"MedicalReport"> | string | null
    symptomsDescription?: StringNullableFilter<"MedicalReport"> | string | null
    additionalObservation?: StringNullableFilter<"MedicalReport"> | string | null
    date?: DateTimeFilter<"MedicalReport"> | Date | string
    createdAt?: DateTimeFilter<"MedicalReport"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalReport"> | Date | string
    deletedAt?: BoolFilter<"MedicalReport"> | boolean
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }

  export type MedicalReportOrderByWithRelationInput = {
    id?: SortOrder
    institutionId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    AppointmentId?: SortOrder
    medicalEvaluation?: SortOrderInput | SortOrder
    bloodPressure?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    pulse?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    otherPhysicalParams?: SortOrderInput | SortOrder
    diagnosis?: SortOrderInput | SortOrder
    treatmentPlan?: SortOrderInput | SortOrder
    recommendations?: SortOrder
    orientations?: SortOrder
    observations?: SortOrderInput | SortOrder
    symptomsDescription?: SortOrderInput | SortOrder
    additionalObservation?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    institution?: InstitutionOrderByWithRelationInput
    doctor?: DoctorOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type MedicalReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicalReportWhereInput | MedicalReportWhereInput[]
    OR?: MedicalReportWhereInput[]
    NOT?: MedicalReportWhereInput | MedicalReportWhereInput[]
    institutionId?: StringFilter<"MedicalReport"> | string
    doctorId?: StringFilter<"MedicalReport"> | string
    patientId?: StringFilter<"MedicalReport"> | string
    AppointmentId?: StringFilter<"MedicalReport"> | string
    medicalEvaluation?: StringNullableFilter<"MedicalReport"> | string | null
    bloodPressure?: StringNullableFilter<"MedicalReport"> | string | null
    height?: StringNullableFilter<"MedicalReport"> | string | null
    weight?: StringNullableFilter<"MedicalReport"> | string | null
    pulse?: StringNullableFilter<"MedicalReport"> | string | null
    temperature?: StringNullableFilter<"MedicalReport"> | string | null
    otherPhysicalParams?: StringNullableFilter<"MedicalReport"> | string | null
    diagnosis?: StringNullableFilter<"MedicalReport"> | string | null
    treatmentPlan?: StringNullableFilter<"MedicalReport"> | string | null
    recommendations?: StringNullableListFilter<"MedicalReport">
    orientations?: StringNullableListFilter<"MedicalReport">
    observations?: StringNullableFilter<"MedicalReport"> | string | null
    symptomsDescription?: StringNullableFilter<"MedicalReport"> | string | null
    additionalObservation?: StringNullableFilter<"MedicalReport"> | string | null
    date?: DateTimeFilter<"MedicalReport"> | Date | string
    createdAt?: DateTimeFilter<"MedicalReport"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalReport"> | Date | string
    deletedAt?: BoolFilter<"MedicalReport"> | boolean
    institution?: XOR<InstitutionRelationFilter, InstitutionWhereInput>
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }, "id">

  export type MedicalReportOrderByWithAggregationInput = {
    id?: SortOrder
    institutionId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    AppointmentId?: SortOrder
    medicalEvaluation?: SortOrderInput | SortOrder
    bloodPressure?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    weight?: SortOrderInput | SortOrder
    pulse?: SortOrderInput | SortOrder
    temperature?: SortOrderInput | SortOrder
    otherPhysicalParams?: SortOrderInput | SortOrder
    diagnosis?: SortOrderInput | SortOrder
    treatmentPlan?: SortOrderInput | SortOrder
    recommendations?: SortOrder
    orientations?: SortOrder
    observations?: SortOrderInput | SortOrder
    symptomsDescription?: SortOrderInput | SortOrder
    additionalObservation?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: MedicalReportCountOrderByAggregateInput
    _max?: MedicalReportMaxOrderByAggregateInput
    _min?: MedicalReportMinOrderByAggregateInput
  }

  export type MedicalReportScalarWhereWithAggregatesInput = {
    AND?: MedicalReportScalarWhereWithAggregatesInput | MedicalReportScalarWhereWithAggregatesInput[]
    OR?: MedicalReportScalarWhereWithAggregatesInput[]
    NOT?: MedicalReportScalarWhereWithAggregatesInput | MedicalReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MedicalReport"> | string
    institutionId?: StringWithAggregatesFilter<"MedicalReport"> | string
    doctorId?: StringWithAggregatesFilter<"MedicalReport"> | string
    patientId?: StringWithAggregatesFilter<"MedicalReport"> | string
    AppointmentId?: StringWithAggregatesFilter<"MedicalReport"> | string
    medicalEvaluation?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    bloodPressure?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    height?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    weight?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    pulse?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    temperature?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    otherPhysicalParams?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    diagnosis?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    treatmentPlan?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    recommendations?: StringNullableListFilter<"MedicalReport">
    orientations?: StringNullableListFilter<"MedicalReport">
    observations?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    symptomsDescription?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    additionalObservation?: StringNullableWithAggregatesFilter<"MedicalReport"> | string | null
    date?: DateTimeWithAggregatesFilter<"MedicalReport"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MedicalReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MedicalReport"> | Date | string
    deletedAt?: BoolWithAggregatesFilter<"MedicalReport"> | boolean
  }

  export type FCMTokenCreateInput = {
    id?: string
    token: string
    user: UserCreateNestedOneWithoutFCMTokenInput
  }

  export type FCMTokenUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
  }

  export type FCMTokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFCMTokenNestedInput
  }

  export type FCMTokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type FCMTokenCreateManyInput = {
    id?: string
    userId: string
    token: string
  }

  export type FCMTokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type FCMTokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingCreateInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor: DoctorCreateNestedOneWithoutRatingInput
    user: UserCreateNestedOneWithoutRatingInput
    appoitment: AppointmentCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateInput = {
    id?: string
    userId: string
    doctorId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneRequiredWithoutRatingNestedInput
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
    appoitment?: AppointmentUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    appoitmentID?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingCreateManyInput = {
    id?: string
    userId: string
    doctorId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    appoitmentID?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClinicRatingCreateInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutClinicRatingInput
    user: UserCreateNestedOneWithoutClinicRatingInput
  }

  export type ClinicRatingUncheckedCreateInput = {
    id?: string
    userId: string
    clinicId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ClinicRatingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutClinicRatingNestedInput
    user?: UserUpdateOneRequiredWithoutClinicRatingNestedInput
  }

  export type ClinicRatingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClinicRatingCreateManyInput = {
    id?: string
    userId: string
    clinicId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ClinicRatingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClinicRatingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServicesCreateInput = {
    id?: string
    name: string
    description: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutServiceInput
  }

  export type ServicesUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    price: number
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ServicesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutServiceNestedInput
  }

  export type ServicesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServicesCreateManyInput = {
    id?: string
    name: string
    description: string
    price: number
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ServicesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServicesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpecialityCreateInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type SpecialityUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type SpecialityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpecialityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpecialityCreateManyInput = {
    id?: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type SpecialityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SpecialityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionCreateInput = {
    id?: string
    permissions: $Enums.permissions
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutUserPermissionInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: string
    userId: string
    permissions: $Enums.permissions
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type UserPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionCreateManyInput = {
    id?: string
    userId: string
    permissions: $Enums.permissions
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type UserPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCreateInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCardCreateInput = {
    id?: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    patient: PatientCreateNestedOneWithoutPatientCardInput
  }

  export type PatientCardUncheckedCreateInput = {
    id?: string
    patientId: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientCardUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutPatientCardNestedInput
  }

  export type PatientCardUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCardCreateManyInput = {
    id?: string
    patientId: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientCardUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCardUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QrcodeCreateInput = {
    id?: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    patient: PatientCreateNestedOneWithoutQrcodeInput
  }

  export type QrcodeUncheckedCreateInput = {
    id?: string
    code: string
    patientId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type QrcodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    patient?: PatientUpdateOneRequiredWithoutQrcodeNestedInput
  }

  export type QrcodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QrcodeCreateManyInput = {
    id?: string
    code: string
    patientId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type QrcodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QrcodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorCreateInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorCreateManyInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type DoctorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor?: DoctorCreateNestedOneWithoutFavoritesInput
    institution?: InstitutionCreateNestedOneWithoutFavoritesInput
    pacient: PatientCreateNestedOneWithoutFavoritesInput
  }

  export type FavoritesUncheckedCreateInput = {
    id?: string
    pacientId: string
    doctorId?: string | null
    institutionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneWithoutFavoritesNestedInput
    institution?: InstitutionUpdateOneWithoutFavoritesNestedInput
    pacient?: PatientUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoritesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacientId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesCreateManyInput = {
    id?: string
    pacientId: string
    doctorId?: string | null
    institutionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacientId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionCreateInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionCreateManyInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type InstitutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorInstitutionCreateInput = {
    id?: string
    Doctor: DoctorCreateNestedOneWithoutInstitutionInput
    institution: InstitutionCreateNestedOneWithoutDoctorInput
  }

  export type DoctorInstitutionUncheckedCreateInput = {
    id?: string
    doctorId: string
    institutionId: string
  }

  export type DoctorInstitutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    Doctor?: DoctorUpdateOneRequiredWithoutInstitutionNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutDoctorNestedInput
  }

  export type DoctorInstitutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorInstitutionCreateManyInput = {
    id?: string
    doctorId: string
    institutionId: string
  }

  export type DoctorInstitutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorInstitutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutAdminInput
    institution: InstitutionCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    userId: string
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminCreateManyInput = {
    id?: string
    userId: string
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentCreateInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultationTypeCreateInput = {
    id?: string
    description: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Consultation?: AppointmentCreateNestedManyWithoutConsultationTypeInput
  }

  export type ConsultationTypeUncheckedCreateInput = {
    id?: string
    description: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutConsultationTypeInput
  }

  export type ConsultationTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Consultation?: AppointmentUpdateManyWithoutConsultationTypeNestedInput
  }

  export type ConsultationTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Consultation?: AppointmentUncheckedUpdateManyWithoutConsultationTypeNestedInput
  }

  export type ConsultationTypeCreateManyInput = {
    id?: string
    description: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ConsultationTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultationTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateInput = {
    id?: string
    content: string
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Doctor?: DoctorCreateNestedOneWithoutNotificationInput
    Patient?: PatientCreateNestedOneWithoutNotificationInput
    Institution?: InstitutionCreateNestedOneWithoutNotificationInput
    Appointment?: AppointmentCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    content: string
    doctor_id?: string | null
    patient_id?: string | null
    institution_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Doctor?: DoctorUpdateOneWithoutNotificationNestedInput
    Patient?: PatientUpdateOneWithoutNotificationNestedInput
    Institution?: InstitutionUpdateOneWithoutNotificationNestedInput
    Appointment?: AppointmentUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateManyInput = {
    id?: string
    content: string
    doctor_id?: string | null
    patient_id?: string | null
    institution_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WeeklyScheduleCreateInput = {
    id?: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutWeeklyScheduleInput
    institution: InstitutionCreateNestedOneWithoutWeeklyScheduleInput
  }

  export type WeeklyScheduleUncheckedCreateInput = {
    id?: string
    doctorId: string
    institutionId: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutWeeklyScheduleNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutWeeklyScheduleNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScheduleCreateManyInput = {
    id?: string
    doctorId: string
    institutionId: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalHistoryCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment: AppointmentCreateNestedOneWithoutMedicalHistoriesInput
  }

  export type MedicalHistoryUncheckedCreateInput = {
    id?: string
    AppointmentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUpdateOneRequiredWithoutMedicalHistoriesNestedInput
  }

  export type MedicalHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalHistoryCreateManyInput = {
    id?: string
    AppointmentId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordConfirmationCodeCreateInput = {
    id?: string
    code: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPasswordConfirmationCodeInput
  }

  export type PasswordConfirmationCodeUncheckedCreateInput = {
    id?: string
    userId: string
    code: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PasswordConfirmationCodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPasswordConfirmationCodeNestedInput
  }

  export type PasswordConfirmationCodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordConfirmationCodeCreateManyInput = {
    id?: string
    userId: string
    code: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PasswordConfirmationCodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordConfirmationCodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportCreateInput = {
    id?: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutMedicalReportInput
    doctor: DoctorCreateNestedOneWithoutMedicalReportInput
    patient: PatientCreateNestedOneWithoutMedicalReportInput
    appointment: AppointmentCreateNestedOneWithoutMedicalReportInput
  }

  export type MedicalReportUncheckedCreateInput = {
    id?: string
    institutionId: string
    doctorId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutMedicalReportNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutMedicalReportNestedInput
    patient?: PatientUpdateOneRequiredWithoutMedicalReportNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutMedicalReportNestedInput
  }

  export type MedicalReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportCreateManyInput = {
    id?: string
    institutionId: string
    doctorId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FCMTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
  }

  export type FCMTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
  }

  export type FCMTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeFilter<$PrismaModel> | $Enums.RoleType
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type DoctorListRelationFilter = {
    every?: DoctorWhereInput
    some?: DoctorWhereInput
    none?: DoctorWhereInput
  }

  export type InstitutionListRelationFilter = {
    every?: InstitutionWhereInput
    some?: InstitutionWhereInput
    none?: InstitutionWhereInput
  }

  export type AdminListRelationFilter = {
    every?: AdminWhereInput
    some?: AdminWhereInput
    none?: AdminWhereInput
  }

  export type RatingListRelationFilter = {
    every?: RatingWhereInput
    some?: RatingWhereInput
    none?: RatingWhereInput
  }

  export type ClinicRatingListRelationFilter = {
    every?: ClinicRatingWhereInput
    some?: ClinicRatingWhereInput
    none?: ClinicRatingWhereInput
  }

  export type PasswordConfirmationCodeListRelationFilter = {
    every?: PasswordConfirmationCodeWhereInput
    some?: PasswordConfirmationCodeWhereInput
    none?: PasswordConfirmationCodeWhereInput
  }

  export type FCMTokenListRelationFilter = {
    every?: FCMTokenWhereInput
    some?: FCMTokenWhereInput
    none?: FCMTokenWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstitutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClinicRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PasswordConfirmationCodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FCMTokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nationality?: SortOrder
    Role?: SortOrder
    nif?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    FatherName?: SortOrder
    MotherName?: SortOrder
    type?: SortOrder
    gender?: SortOrder
    BI?: SortOrder
    neigbhod?: SortOrder
    city?: SortOrder
    municipality?: SortOrder
    avatar?: SortOrder
    addressComplement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nationality?: SortOrder
    Role?: SortOrder
    nif?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    FatherName?: SortOrder
    MotherName?: SortOrder
    type?: SortOrder
    gender?: SortOrder
    BI?: SortOrder
    neigbhod?: SortOrder
    city?: SortOrder
    municipality?: SortOrder
    avatar?: SortOrder
    addressComplement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    nationality?: SortOrder
    Role?: SortOrder
    nif?: SortOrder
    phone?: SortOrder
    birthday?: SortOrder
    FatherName?: SortOrder
    MotherName?: SortOrder
    type?: SortOrder
    gender?: SortOrder
    BI?: SortOrder
    neigbhod?: SortOrder
    city?: SortOrder
    municipality?: SortOrder
    avatar?: SortOrder
    addressComplement?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumRoleTypeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DoctorRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type AppointmentRelationFilter = {
    is?: AppointmentWhereInput
    isNot?: AppointmentWhereInput
  }

  export type RatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    doctorId?: SortOrder
    appoitmentID?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RatingAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type RatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    doctorId?: SortOrder
    appoitmentID?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    doctorId?: SortOrder
    appoitmentID?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type RatingSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type InstitutionRelationFilter = {
    is?: InstitutionWhereInput
    isNot?: InstitutionWhereInput
  }

  export type ClinicRatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ClinicRatingAvgOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type ClinicRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ClinicRatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicId?: SortOrder
    rate?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ClinicRatingSumOrderByAggregateInput = {
    rate?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ServicesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServicesAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ServicesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServicesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServicesSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SpecialityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SpecialityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type SpecialityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumpermissionsFilter<$PrismaModel = never> = {
    equals?: $Enums.permissions | EnumpermissionsFieldRefInput<$PrismaModel>
    in?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    not?: NestedEnumpermissionsFilter<$PrismaModel> | $Enums.permissions
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumpermissionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.permissions | EnumpermissionsFieldRefInput<$PrismaModel>
    in?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    not?: NestedEnumpermissionsWithAggregatesFilter<$PrismaModel> | $Enums.permissions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpermissionsFilter<$PrismaModel>
    _max?: NestedEnumpermissionsFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type QrcodeListRelationFilter = {
    every?: QrcodeWhereInput
    some?: QrcodeWhereInput
    none?: QrcodeWhereInput
  }

  export type FavoritesListRelationFilter = {
    every?: FavoritesWhereInput
    some?: FavoritesWhereInput
    none?: FavoritesWhereInput
  }

  export type MedicalReportListRelationFilter = {
    every?: MedicalReportWhereInput
    some?: MedicalReportWhereInput
    none?: MedicalReportWhereInput
  }

  export type PatientCardListRelationFilter = {
    every?: PatientCardWhereInput
    some?: PatientCardWhereInput
    none?: PatientCardWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QrcodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavoritesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicalReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCardOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumCardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusFilter<$PrismaModel> | $Enums.CardStatus
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type PatientCardCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    clinicId?: SortOrder
    qrCode?: SortOrder
    cardNumber?: SortOrder
    status?: SortOrder
    issuedOn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientCardMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    clinicId?: SortOrder
    qrCode?: SortOrder
    cardNumber?: SortOrder
    status?: SortOrder
    issuedOn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PatientCardMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    clinicId?: SortOrder
    qrCode?: SortOrder
    cardNumber?: SortOrder
    status?: SortOrder
    issuedOn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumCardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusWithAggregatesFilter<$PrismaModel> | $Enums.CardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardStatusFilter<$PrismaModel>
    _max?: NestedEnumCardStatusFilter<$PrismaModel>
  }

  export type QrcodeCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QrcodeMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type QrcodeMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type WeeklyScheduleListRelationFilter = {
    every?: WeeklyScheduleWhereInput
    some?: WeeklyScheduleWhereInput
    none?: WeeklyScheduleWhereInput
  }

  export type DoctorInstitutionListRelationFilter = {
    every?: DoctorInstitutionWhereInput
    some?: DoctorInstitutionWhereInput
    none?: DoctorInstitutionWhereInput
  }

  export type WeeklyScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorInstitutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    specialty?: SortOrder
    bio?: SortOrder
    registrationNumber?: SortOrder
    institutionId?: SortOrder
    isOnVacation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    registrationNumber?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    specialty?: SortOrder
    bio?: SortOrder
    registrationNumber?: SortOrder
    institutionId?: SortOrder
    isOnVacation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    specialty?: SortOrder
    bio?: SortOrder
    registrationNumber?: SortOrder
    institutionId?: SortOrder
    isOnVacation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    registrationNumber?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DoctorNullableRelationFilter = {
    is?: DoctorWhereInput | null
    isNot?: DoctorWhereInput | null
  }

  export type InstitutionNullableRelationFilter = {
    is?: InstitutionWhereInput | null
    isNot?: InstitutionWhereInput | null
  }

  export type FavoritesCountOrderByAggregateInput = {
    id?: SortOrder
    pacientId?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type FavoritesMaxOrderByAggregateInput = {
    id?: SortOrder
    pacientId?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type FavoritesMinOrderByAggregateInput = {
    id?: SortOrder
    pacientId?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ServicesListRelationFilter = {
    every?: ServicesWhereInput
    some?: ServicesWhereInput
    none?: ServicesWhereInput
  }

  export type ServicesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstitutionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicLatitude?: SortOrder
    cliniclongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InstitutionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicLatitude?: SortOrder
    cliniclongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type InstitutionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    clinicLatitude?: SortOrder
    cliniclongitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type DoctorInstitutionDoctorIdInstitutionIdCompoundUniqueInput = {
    doctorId: string
    institutionId: string
  }

  export type DoctorInstitutionCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
  }

  export type DoctorInstitutionMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
  }

  export type DoctorInstitutionMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    institutionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type ConsultationTypeRelationFilter = {
    is?: ConsultationTypeWhereInput
    isNot?: ConsultationTypeWhereInput
  }

  export type MedicalHistoryListRelationFilter = {
    every?: MedicalHistoryWhereInput
    some?: MedicalHistoryWhereInput
    none?: MedicalHistoryWhereInput
  }

  export type MedicalHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    institutionId?: SortOrder
    consultationTypeId?: SortOrder
    doctorId?: SortOrder
    symptomDescription?: SortOrder
    isUrgent?: SortOrder
    date?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    institutionId?: SortOrder
    consultationTypeId?: SortOrder
    doctorId?: SortOrder
    symptomDescription?: SortOrder
    isUrgent?: SortOrder
    date?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    institutionId?: SortOrder
    consultationTypeId?: SortOrder
    doctorId?: SortOrder
    symptomDescription?: SortOrder
    isUrgent?: SortOrder
    date?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type ConsultationTypeCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ConsultationTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ConsultationTypeMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumTypeNotificationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNotificationNullableFilter<$PrismaModel> | $Enums.TypeNotification | null
  }

  export type PatientNullableRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type AppointmentNullableRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    doctor_id?: SortOrder
    patient_id?: SortOrder
    institution_id?: SortOrder
    appointmentId?: SortOrder
    read?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    doctor_id?: SortOrder
    patient_id?: SortOrder
    institution_id?: SortOrder
    appointmentId?: SortOrder
    read?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    doctor_id?: SortOrder
    patient_id?: SortOrder
    institution_id?: SortOrder
    appointmentId?: SortOrder
    read?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumTypeNotificationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNotificationNullableWithAggregatesFilter<$PrismaModel> | $Enums.TypeNotification | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTypeNotificationNullableFilter<$PrismaModel>
    _max?: NestedEnumTypeNotificationNullableFilter<$PrismaModel>
  }

  export type WeeklyScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyScheduleAvgOrderByAggregateInput = {
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
  }

  export type WeeklyScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    doctorId?: SortOrder
    institutionId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WeeklyScheduleSumOrderByAggregateInput = {
    startTime?: SortOrder
    endTime?: SortOrder
    interval?: SortOrder
    dailyWorkingHours?: SortOrder
  }

  export type MedicalHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    AppointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicalHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    AppointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicalHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    AppointmentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PasswordConfirmationCodeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PasswordConfirmationCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type PasswordConfirmationCodeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type MedicalReportCountOrderByAggregateInput = {
    id?: SortOrder
    institutionId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    AppointmentId?: SortOrder
    medicalEvaluation?: SortOrder
    bloodPressure?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    pulse?: SortOrder
    temperature?: SortOrder
    otherPhysicalParams?: SortOrder
    diagnosis?: SortOrder
    treatmentPlan?: SortOrder
    recommendations?: SortOrder
    orientations?: SortOrder
    observations?: SortOrder
    symptomsDescription?: SortOrder
    additionalObservation?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicalReportMaxOrderByAggregateInput = {
    id?: SortOrder
    institutionId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    AppointmentId?: SortOrder
    medicalEvaluation?: SortOrder
    bloodPressure?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    pulse?: SortOrder
    temperature?: SortOrder
    otherPhysicalParams?: SortOrder
    diagnosis?: SortOrder
    treatmentPlan?: SortOrder
    observations?: SortOrder
    symptomsDescription?: SortOrder
    additionalObservation?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicalReportMinOrderByAggregateInput = {
    id?: SortOrder
    institutionId?: SortOrder
    doctorId?: SortOrder
    patientId?: SortOrder
    AppointmentId?: SortOrder
    medicalEvaluation?: SortOrder
    bloodPressure?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    pulse?: SortOrder
    temperature?: SortOrder
    otherPhysicalParams?: SortOrder
    diagnosis?: SortOrder
    treatmentPlan?: SortOrder
    observations?: SortOrder
    symptomsDescription?: SortOrder
    additionalObservation?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserCreateNestedOneWithoutFCMTokenInput = {
    create?: XOR<UserCreateWithoutFCMTokenInput, UserUncheckedCreateWithoutFCMTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutFCMTokenInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutFCMTokenNestedInput = {
    create?: XOR<UserCreateWithoutFCMTokenInput, UserUncheckedCreateWithoutFCMTokenInput>
    connectOrCreate?: UserCreateOrConnectWithoutFCMTokenInput
    upsert?: UserUpsertWithoutFCMTokenInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFCMTokenInput, UserUpdateWithoutFCMTokenInput>, UserUncheckedUpdateWithoutFCMTokenInput>
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type DoctorCreateNestedManyWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput> | DoctorCreateWithoutUserInput[] | DoctorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput | DoctorCreateOrConnectWithoutUserInput[]
    createMany?: DoctorCreateManyUserInputEnvelope
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type InstitutionCreateNestedManyWithoutUserInput = {
    create?: XOR<InstitutionCreateWithoutUserInput, InstitutionUncheckedCreateWithoutUserInput> | InstitutionCreateWithoutUserInput[] | InstitutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutUserInput | InstitutionCreateOrConnectWithoutUserInput[]
    createMany?: InstitutionCreateManyUserInputEnvelope
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type AdminCreateNestedManyWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput> | AdminCreateWithoutUserInput[] | AdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput | AdminCreateOrConnectWithoutUserInput[]
    createMany?: AdminCreateManyUserInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ClinicRatingCreateNestedManyWithoutUserInput = {
    create?: XOR<ClinicRatingCreateWithoutUserInput, ClinicRatingUncheckedCreateWithoutUserInput> | ClinicRatingCreateWithoutUserInput[] | ClinicRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutUserInput | ClinicRatingCreateOrConnectWithoutUserInput[]
    createMany?: ClinicRatingCreateManyUserInputEnvelope
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
  }

  export type PasswordConfirmationCodeCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordConfirmationCodeCreateWithoutUserInput, PasswordConfirmationCodeUncheckedCreateWithoutUserInput> | PasswordConfirmationCodeCreateWithoutUserInput[] | PasswordConfirmationCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordConfirmationCodeCreateOrConnectWithoutUserInput | PasswordConfirmationCodeCreateOrConnectWithoutUserInput[]
    createMany?: PasswordConfirmationCodeCreateManyUserInputEnvelope
    connect?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
  }

  export type FCMTokenCreateNestedManyWithoutUserInput = {
    create?: XOR<FCMTokenCreateWithoutUserInput, FCMTokenUncheckedCreateWithoutUserInput> | FCMTokenCreateWithoutUserInput[] | FCMTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FCMTokenCreateOrConnectWithoutUserInput | FCMTokenCreateOrConnectWithoutUserInput[]
    createMany?: FCMTokenCreateManyUserInputEnvelope
    connect?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type DoctorUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput> | DoctorCreateWithoutUserInput[] | DoctorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput | DoctorCreateOrConnectWithoutUserInput[]
    createMany?: DoctorCreateManyUserInputEnvelope
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
  }

  export type InstitutionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<InstitutionCreateWithoutUserInput, InstitutionUncheckedCreateWithoutUserInput> | InstitutionCreateWithoutUserInput[] | InstitutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutUserInput | InstitutionCreateOrConnectWithoutUserInput[]
    createMany?: InstitutionCreateManyUserInputEnvelope
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput> | AdminCreateWithoutUserInput[] | AdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput | AdminCreateOrConnectWithoutUserInput[]
    createMany?: AdminCreateManyUserInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type ClinicRatingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ClinicRatingCreateWithoutUserInput, ClinicRatingUncheckedCreateWithoutUserInput> | ClinicRatingCreateWithoutUserInput[] | ClinicRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutUserInput | ClinicRatingCreateOrConnectWithoutUserInput[]
    createMany?: ClinicRatingCreateManyUserInputEnvelope
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
  }

  export type PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PasswordConfirmationCodeCreateWithoutUserInput, PasswordConfirmationCodeUncheckedCreateWithoutUserInput> | PasswordConfirmationCodeCreateWithoutUserInput[] | PasswordConfirmationCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordConfirmationCodeCreateOrConnectWithoutUserInput | PasswordConfirmationCodeCreateOrConnectWithoutUserInput[]
    createMany?: PasswordConfirmationCodeCreateManyUserInputEnvelope
    connect?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
  }

  export type FCMTokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FCMTokenCreateWithoutUserInput, FCMTokenUncheckedCreateWithoutUserInput> | FCMTokenCreateWithoutUserInput[] | FCMTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FCMTokenCreateOrConnectWithoutUserInput | FCMTokenCreateOrConnectWithoutUserInput[]
    createMany?: FCMTokenCreateManyUserInputEnvelope
    connect?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleTypeFieldUpdateOperationsInput = {
    set?: $Enums.RoleType
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type DoctorUpdateManyWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput> | DoctorCreateWithoutUserInput[] | DoctorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput | DoctorCreateOrConnectWithoutUserInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutUserInput | DoctorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DoctorCreateManyUserInputEnvelope
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutUserInput | DoctorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutUserInput | DoctorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type InstitutionUpdateManyWithoutUserNestedInput = {
    create?: XOR<InstitutionCreateWithoutUserInput, InstitutionUncheckedCreateWithoutUserInput> | InstitutionCreateWithoutUserInput[] | InstitutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutUserInput | InstitutionCreateOrConnectWithoutUserInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutUserInput | InstitutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InstitutionCreateManyUserInputEnvelope
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutUserInput | InstitutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutUserInput | InstitutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type AdminUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput> | AdminCreateWithoutUserInput[] | AdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput | AdminCreateOrConnectWithoutUserInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutUserInput | AdminUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdminCreateManyUserInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutUserInput | AdminUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutUserInput | AdminUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ClinicRatingUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClinicRatingCreateWithoutUserInput, ClinicRatingUncheckedCreateWithoutUserInput> | ClinicRatingCreateWithoutUserInput[] | ClinicRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutUserInput | ClinicRatingCreateOrConnectWithoutUserInput[]
    upsert?: ClinicRatingUpsertWithWhereUniqueWithoutUserInput | ClinicRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClinicRatingCreateManyUserInputEnvelope
    set?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    disconnect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    delete?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    update?: ClinicRatingUpdateWithWhereUniqueWithoutUserInput | ClinicRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClinicRatingUpdateManyWithWhereWithoutUserInput | ClinicRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClinicRatingScalarWhereInput | ClinicRatingScalarWhereInput[]
  }

  export type PasswordConfirmationCodeUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordConfirmationCodeCreateWithoutUserInput, PasswordConfirmationCodeUncheckedCreateWithoutUserInput> | PasswordConfirmationCodeCreateWithoutUserInput[] | PasswordConfirmationCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordConfirmationCodeCreateOrConnectWithoutUserInput | PasswordConfirmationCodeCreateOrConnectWithoutUserInput[]
    upsert?: PasswordConfirmationCodeUpsertWithWhereUniqueWithoutUserInput | PasswordConfirmationCodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordConfirmationCodeCreateManyUserInputEnvelope
    set?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    disconnect?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    delete?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    connect?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    update?: PasswordConfirmationCodeUpdateWithWhereUniqueWithoutUserInput | PasswordConfirmationCodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordConfirmationCodeUpdateManyWithWhereWithoutUserInput | PasswordConfirmationCodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordConfirmationCodeScalarWhereInput | PasswordConfirmationCodeScalarWhereInput[]
  }

  export type FCMTokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<FCMTokenCreateWithoutUserInput, FCMTokenUncheckedCreateWithoutUserInput> | FCMTokenCreateWithoutUserInput[] | FCMTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FCMTokenCreateOrConnectWithoutUserInput | FCMTokenCreateOrConnectWithoutUserInput[]
    upsert?: FCMTokenUpsertWithWhereUniqueWithoutUserInput | FCMTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FCMTokenCreateManyUserInputEnvelope
    set?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    disconnect?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    delete?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    connect?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    update?: FCMTokenUpdateWithWhereUniqueWithoutUserInput | FCMTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FCMTokenUpdateManyWithWhereWithoutUserInput | FCMTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FCMTokenScalarWhereInput | FCMTokenScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type DoctorUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput> | DoctorCreateWithoutUserInput[] | DoctorUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DoctorCreateOrConnectWithoutUserInput | DoctorCreateOrConnectWithoutUserInput[]
    upsert?: DoctorUpsertWithWhereUniqueWithoutUserInput | DoctorUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DoctorCreateManyUserInputEnvelope
    set?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    disconnect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    delete?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    connect?: DoctorWhereUniqueInput | DoctorWhereUniqueInput[]
    update?: DoctorUpdateWithWhereUniqueWithoutUserInput | DoctorUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DoctorUpdateManyWithWhereWithoutUserInput | DoctorUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
  }

  export type InstitutionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<InstitutionCreateWithoutUserInput, InstitutionUncheckedCreateWithoutUserInput> | InstitutionCreateWithoutUserInput[] | InstitutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: InstitutionCreateOrConnectWithoutUserInput | InstitutionCreateOrConnectWithoutUserInput[]
    upsert?: InstitutionUpsertWithWhereUniqueWithoutUserInput | InstitutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: InstitutionCreateManyUserInputEnvelope
    set?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    disconnect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    delete?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    connect?: InstitutionWhereUniqueInput | InstitutionWhereUniqueInput[]
    update?: InstitutionUpdateWithWhereUniqueWithoutUserInput | InstitutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: InstitutionUpdateManyWithWhereWithoutUserInput | InstitutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
  }

  export type AdminUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput> | AdminCreateWithoutUserInput[] | AdminUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutUserInput | AdminCreateOrConnectWithoutUserInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutUserInput | AdminUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AdminCreateManyUserInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutUserInput | AdminUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutUserInput | AdminUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput> | RatingCreateWithoutUserInput[] | RatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutUserInput | RatingCreateOrConnectWithoutUserInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutUserInput | RatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: RatingCreateManyUserInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutUserInput | RatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutUserInput | RatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type ClinicRatingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ClinicRatingCreateWithoutUserInput, ClinicRatingUncheckedCreateWithoutUserInput> | ClinicRatingCreateWithoutUserInput[] | ClinicRatingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutUserInput | ClinicRatingCreateOrConnectWithoutUserInput[]
    upsert?: ClinicRatingUpsertWithWhereUniqueWithoutUserInput | ClinicRatingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ClinicRatingCreateManyUserInputEnvelope
    set?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    disconnect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    delete?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    update?: ClinicRatingUpdateWithWhereUniqueWithoutUserInput | ClinicRatingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ClinicRatingUpdateManyWithWhereWithoutUserInput | ClinicRatingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ClinicRatingScalarWhereInput | ClinicRatingScalarWhereInput[]
  }

  export type PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PasswordConfirmationCodeCreateWithoutUserInput, PasswordConfirmationCodeUncheckedCreateWithoutUserInput> | PasswordConfirmationCodeCreateWithoutUserInput[] | PasswordConfirmationCodeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PasswordConfirmationCodeCreateOrConnectWithoutUserInput | PasswordConfirmationCodeCreateOrConnectWithoutUserInput[]
    upsert?: PasswordConfirmationCodeUpsertWithWhereUniqueWithoutUserInput | PasswordConfirmationCodeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PasswordConfirmationCodeCreateManyUserInputEnvelope
    set?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    disconnect?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    delete?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    connect?: PasswordConfirmationCodeWhereUniqueInput | PasswordConfirmationCodeWhereUniqueInput[]
    update?: PasswordConfirmationCodeUpdateWithWhereUniqueWithoutUserInput | PasswordConfirmationCodeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PasswordConfirmationCodeUpdateManyWithWhereWithoutUserInput | PasswordConfirmationCodeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PasswordConfirmationCodeScalarWhereInput | PasswordConfirmationCodeScalarWhereInput[]
  }

  export type FCMTokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FCMTokenCreateWithoutUserInput, FCMTokenUncheckedCreateWithoutUserInput> | FCMTokenCreateWithoutUserInput[] | FCMTokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FCMTokenCreateOrConnectWithoutUserInput | FCMTokenCreateOrConnectWithoutUserInput[]
    upsert?: FCMTokenUpsertWithWhereUniqueWithoutUserInput | FCMTokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FCMTokenCreateManyUserInputEnvelope
    set?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    disconnect?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    delete?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    connect?: FCMTokenWhereUniqueInput | FCMTokenWhereUniqueInput[]
    update?: FCMTokenUpdateWithWhereUniqueWithoutUserInput | FCMTokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FCMTokenUpdateManyWithWhereWithoutUserInput | FCMTokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FCMTokenScalarWhereInput | FCMTokenScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutRatingInput = {
    create?: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutRatingInput
    connect?: DoctorWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRatingInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutRatingInput = {
    create?: XOR<AppointmentCreateWithoutRatingInput, AppointmentUncheckedCreateWithoutRatingInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutRatingInput
    connect?: AppointmentWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DoctorUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutRatingInput
    upsert?: DoctorUpsertWithoutRatingInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutRatingInput, DoctorUpdateWithoutRatingInput>, DoctorUncheckedUpdateWithoutRatingInput>
  }

  export type UserUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutRatingInput
    upsert?: UserUpsertWithoutRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRatingInput, UserUpdateWithoutRatingInput>, UserUncheckedUpdateWithoutRatingInput>
  }

  export type AppointmentUpdateOneRequiredWithoutRatingNestedInput = {
    create?: XOR<AppointmentCreateWithoutRatingInput, AppointmentUncheckedCreateWithoutRatingInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutRatingInput
    upsert?: AppointmentUpsertWithoutRatingInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutRatingInput, AppointmentUpdateWithoutRatingInput>, AppointmentUncheckedUpdateWithoutRatingInput>
  }

  export type InstitutionCreateNestedOneWithoutClinicRatingInput = {
    create?: XOR<InstitutionCreateWithoutClinicRatingInput, InstitutionUncheckedCreateWithoutClinicRatingInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutClinicRatingInput
    connect?: InstitutionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutClinicRatingInput = {
    create?: XOR<UserCreateWithoutClinicRatingInput, UserUncheckedCreateWithoutClinicRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutClinicRatingInput
    connect?: UserWhereUniqueInput
  }

  export type InstitutionUpdateOneRequiredWithoutClinicRatingNestedInput = {
    create?: XOR<InstitutionCreateWithoutClinicRatingInput, InstitutionUncheckedCreateWithoutClinicRatingInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutClinicRatingInput
    upsert?: InstitutionUpsertWithoutClinicRatingInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutClinicRatingInput, InstitutionUpdateWithoutClinicRatingInput>, InstitutionUncheckedUpdateWithoutClinicRatingInput>
  }

  export type UserUpdateOneRequiredWithoutClinicRatingNestedInput = {
    create?: XOR<UserCreateWithoutClinicRatingInput, UserUncheckedCreateWithoutClinicRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutClinicRatingInput
    upsert?: UserUpsertWithoutClinicRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutClinicRatingInput, UserUpdateWithoutClinicRatingInput>, UserUncheckedUpdateWithoutClinicRatingInput>
  }

  export type InstitutionCreateNestedOneWithoutServiceInput = {
    create?: XOR<InstitutionCreateWithoutServiceInput, InstitutionUncheckedCreateWithoutServiceInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutServiceInput
    connect?: InstitutionWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type InstitutionUpdateOneRequiredWithoutServiceNestedInput = {
    create?: XOR<InstitutionCreateWithoutServiceInput, InstitutionUncheckedCreateWithoutServiceInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutServiceInput
    upsert?: InstitutionUpsertWithoutServiceInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutServiceInput, InstitutionUpdateWithoutServiceInput>, InstitutionUncheckedUpdateWithoutServiceInput>
  }

  export type UserCreateNestedOneWithoutUserPermissionInput = {
    create?: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type EnumpermissionsFieldUpdateOperationsInput = {
    set?: $Enums.permissions
  }

  export type UserUpdateOneRequiredWithoutUserPermissionNestedInput = {
    create?: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPermissionInput
    upsert?: UserUpsertWithoutUserPermissionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPermissionInput, UserUpdateWithoutUserPermissionInput>, UserUncheckedUpdateWithoutUserPermissionInput>
  }

  export type UserCreateNestedOneWithoutPatientInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutPacientInput = {
    create?: XOR<AppointmentCreateWithoutPacientInput, AppointmentUncheckedCreateWithoutPacientInput> | AppointmentCreateWithoutPacientInput[] | AppointmentUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPacientInput | AppointmentCreateOrConnectWithoutPacientInput[]
    createMany?: AppointmentCreateManyPacientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutPatientInput = {
    create?: XOR<NotificationCreateWithoutPatientInput, NotificationUncheckedCreateWithoutPatientInput> | NotificationCreateWithoutPatientInput[] | NotificationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPatientInput | NotificationCreateOrConnectWithoutPatientInput[]
    createMany?: NotificationCreateManyPatientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type QrcodeCreateNestedManyWithoutPatientInput = {
    create?: XOR<QrcodeCreateWithoutPatientInput, QrcodeUncheckedCreateWithoutPatientInput> | QrcodeCreateWithoutPatientInput[] | QrcodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: QrcodeCreateOrConnectWithoutPatientInput | QrcodeCreateOrConnectWithoutPatientInput[]
    createMany?: QrcodeCreateManyPatientInputEnvelope
    connect?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
  }

  export type FavoritesCreateNestedManyWithoutPacientInput = {
    create?: XOR<FavoritesCreateWithoutPacientInput, FavoritesUncheckedCreateWithoutPacientInput> | FavoritesCreateWithoutPacientInput[] | FavoritesUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutPacientInput | FavoritesCreateOrConnectWithoutPacientInput[]
    createMany?: FavoritesCreateManyPacientInputEnvelope
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
  }

  export type MedicalReportCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalReportCreateWithoutPatientInput, MedicalReportUncheckedCreateWithoutPatientInput> | MedicalReportCreateWithoutPatientInput[] | MedicalReportUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutPatientInput | MedicalReportCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalReportCreateManyPatientInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type PatientCardCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientCardCreateWithoutPatientInput, PatientCardUncheckedCreateWithoutPatientInput> | PatientCardCreateWithoutPatientInput[] | PatientCardUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCardCreateOrConnectWithoutPatientInput | PatientCardCreateOrConnectWithoutPatientInput[]
    createMany?: PatientCardCreateManyPatientInputEnvelope
    connect?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPacientInput = {
    create?: XOR<AppointmentCreateWithoutPacientInput, AppointmentUncheckedCreateWithoutPacientInput> | AppointmentCreateWithoutPacientInput[] | AppointmentUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPacientInput | AppointmentCreateOrConnectWithoutPacientInput[]
    createMany?: AppointmentCreateManyPacientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<NotificationCreateWithoutPatientInput, NotificationUncheckedCreateWithoutPatientInput> | NotificationCreateWithoutPatientInput[] | NotificationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPatientInput | NotificationCreateOrConnectWithoutPatientInput[]
    createMany?: NotificationCreateManyPatientInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type QrcodeUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<QrcodeCreateWithoutPatientInput, QrcodeUncheckedCreateWithoutPatientInput> | QrcodeCreateWithoutPatientInput[] | QrcodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: QrcodeCreateOrConnectWithoutPatientInput | QrcodeCreateOrConnectWithoutPatientInput[]
    createMany?: QrcodeCreateManyPatientInputEnvelope
    connect?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
  }

  export type FavoritesUncheckedCreateNestedManyWithoutPacientInput = {
    create?: XOR<FavoritesCreateWithoutPacientInput, FavoritesUncheckedCreateWithoutPacientInput> | FavoritesCreateWithoutPacientInput[] | FavoritesUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutPacientInput | FavoritesCreateOrConnectWithoutPacientInput[]
    createMany?: FavoritesCreateManyPacientInputEnvelope
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
  }

  export type MedicalReportUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicalReportCreateWithoutPatientInput, MedicalReportUncheckedCreateWithoutPatientInput> | MedicalReportCreateWithoutPatientInput[] | MedicalReportUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutPatientInput | MedicalReportCreateOrConnectWithoutPatientInput[]
    createMany?: MedicalReportCreateManyPatientInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type PatientCardUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientCardCreateWithoutPatientInput, PatientCardUncheckedCreateWithoutPatientInput> | PatientCardCreateWithoutPatientInput[] | PatientCardUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCardCreateOrConnectWithoutPatientInput | PatientCardCreateOrConnectWithoutPatientInput[]
    createMany?: PatientCardCreateManyPatientInputEnvelope
    connect?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPatientNestedInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    upsert?: UserUpsertWithoutPatientInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientInput, UserUpdateWithoutPatientInput>, UserUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithoutPacientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPacientInput, AppointmentUncheckedCreateWithoutPacientInput> | AppointmentCreateWithoutPacientInput[] | AppointmentUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPacientInput | AppointmentCreateOrConnectWithoutPacientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPacientInput | AppointmentUpsertWithWhereUniqueWithoutPacientInput[]
    createMany?: AppointmentCreateManyPacientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPacientInput | AppointmentUpdateWithWhereUniqueWithoutPacientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPacientInput | AppointmentUpdateManyWithWhereWithoutPacientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutPatientNestedInput = {
    create?: XOR<NotificationCreateWithoutPatientInput, NotificationUncheckedCreateWithoutPatientInput> | NotificationCreateWithoutPatientInput[] | NotificationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPatientInput | NotificationCreateOrConnectWithoutPatientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutPatientInput | NotificationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: NotificationCreateManyPatientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutPatientInput | NotificationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutPatientInput | NotificationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type QrcodeUpdateManyWithoutPatientNestedInput = {
    create?: XOR<QrcodeCreateWithoutPatientInput, QrcodeUncheckedCreateWithoutPatientInput> | QrcodeCreateWithoutPatientInput[] | QrcodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: QrcodeCreateOrConnectWithoutPatientInput | QrcodeCreateOrConnectWithoutPatientInput[]
    upsert?: QrcodeUpsertWithWhereUniqueWithoutPatientInput | QrcodeUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: QrcodeCreateManyPatientInputEnvelope
    set?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    disconnect?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    delete?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    connect?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    update?: QrcodeUpdateWithWhereUniqueWithoutPatientInput | QrcodeUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: QrcodeUpdateManyWithWhereWithoutPatientInput | QrcodeUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: QrcodeScalarWhereInput | QrcodeScalarWhereInput[]
  }

  export type FavoritesUpdateManyWithoutPacientNestedInput = {
    create?: XOR<FavoritesCreateWithoutPacientInput, FavoritesUncheckedCreateWithoutPacientInput> | FavoritesCreateWithoutPacientInput[] | FavoritesUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutPacientInput | FavoritesCreateOrConnectWithoutPacientInput[]
    upsert?: FavoritesUpsertWithWhereUniqueWithoutPacientInput | FavoritesUpsertWithWhereUniqueWithoutPacientInput[]
    createMany?: FavoritesCreateManyPacientInputEnvelope
    set?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    disconnect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    delete?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    update?: FavoritesUpdateWithWhereUniqueWithoutPacientInput | FavoritesUpdateWithWhereUniqueWithoutPacientInput[]
    updateMany?: FavoritesUpdateManyWithWhereWithoutPacientInput | FavoritesUpdateManyWithWhereWithoutPacientInput[]
    deleteMany?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
  }

  export type MedicalReportUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalReportCreateWithoutPatientInput, MedicalReportUncheckedCreateWithoutPatientInput> | MedicalReportCreateWithoutPatientInput[] | MedicalReportUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutPatientInput | MedicalReportCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutPatientInput | MedicalReportUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalReportCreateManyPatientInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutPatientInput | MedicalReportUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutPatientInput | MedicalReportUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type PatientCardUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientCardCreateWithoutPatientInput, PatientCardUncheckedCreateWithoutPatientInput> | PatientCardCreateWithoutPatientInput[] | PatientCardUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCardCreateOrConnectWithoutPatientInput | PatientCardCreateOrConnectWithoutPatientInput[]
    upsert?: PatientCardUpsertWithWhereUniqueWithoutPatientInput | PatientCardUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientCardCreateManyPatientInputEnvelope
    set?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    disconnect?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    delete?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    connect?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    update?: PatientCardUpdateWithWhereUniqueWithoutPatientInput | PatientCardUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientCardUpdateManyWithWhereWithoutPatientInput | PatientCardUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientCardScalarWhereInput | PatientCardScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPacientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPacientInput, AppointmentUncheckedCreateWithoutPacientInput> | AppointmentCreateWithoutPacientInput[] | AppointmentUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPacientInput | AppointmentCreateOrConnectWithoutPacientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPacientInput | AppointmentUpsertWithWhereUniqueWithoutPacientInput[]
    createMany?: AppointmentCreateManyPacientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPacientInput | AppointmentUpdateWithWhereUniqueWithoutPacientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPacientInput | AppointmentUpdateManyWithWhereWithoutPacientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<NotificationCreateWithoutPatientInput, NotificationUncheckedCreateWithoutPatientInput> | NotificationCreateWithoutPatientInput[] | NotificationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPatientInput | NotificationCreateOrConnectWithoutPatientInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutPatientInput | NotificationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: NotificationCreateManyPatientInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutPatientInput | NotificationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutPatientInput | NotificationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type QrcodeUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<QrcodeCreateWithoutPatientInput, QrcodeUncheckedCreateWithoutPatientInput> | QrcodeCreateWithoutPatientInput[] | QrcodeUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: QrcodeCreateOrConnectWithoutPatientInput | QrcodeCreateOrConnectWithoutPatientInput[]
    upsert?: QrcodeUpsertWithWhereUniqueWithoutPatientInput | QrcodeUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: QrcodeCreateManyPatientInputEnvelope
    set?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    disconnect?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    delete?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    connect?: QrcodeWhereUniqueInput | QrcodeWhereUniqueInput[]
    update?: QrcodeUpdateWithWhereUniqueWithoutPatientInput | QrcodeUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: QrcodeUpdateManyWithWhereWithoutPatientInput | QrcodeUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: QrcodeScalarWhereInput | QrcodeScalarWhereInput[]
  }

  export type FavoritesUncheckedUpdateManyWithoutPacientNestedInput = {
    create?: XOR<FavoritesCreateWithoutPacientInput, FavoritesUncheckedCreateWithoutPacientInput> | FavoritesCreateWithoutPacientInput[] | FavoritesUncheckedCreateWithoutPacientInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutPacientInput | FavoritesCreateOrConnectWithoutPacientInput[]
    upsert?: FavoritesUpsertWithWhereUniqueWithoutPacientInput | FavoritesUpsertWithWhereUniqueWithoutPacientInput[]
    createMany?: FavoritesCreateManyPacientInputEnvelope
    set?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    disconnect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    delete?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    update?: FavoritesUpdateWithWhereUniqueWithoutPacientInput | FavoritesUpdateWithWhereUniqueWithoutPacientInput[]
    updateMany?: FavoritesUpdateManyWithWhereWithoutPacientInput | FavoritesUpdateManyWithWhereWithoutPacientInput[]
    deleteMany?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
  }

  export type MedicalReportUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicalReportCreateWithoutPatientInput, MedicalReportUncheckedCreateWithoutPatientInput> | MedicalReportCreateWithoutPatientInput[] | MedicalReportUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutPatientInput | MedicalReportCreateOrConnectWithoutPatientInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutPatientInput | MedicalReportUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicalReportCreateManyPatientInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutPatientInput | MedicalReportUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutPatientInput | MedicalReportUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type PatientCardUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientCardCreateWithoutPatientInput, PatientCardUncheckedCreateWithoutPatientInput> | PatientCardCreateWithoutPatientInput[] | PatientCardUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCardCreateOrConnectWithoutPatientInput | PatientCardCreateOrConnectWithoutPatientInput[]
    upsert?: PatientCardUpsertWithWhereUniqueWithoutPatientInput | PatientCardUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientCardCreateManyPatientInputEnvelope
    set?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    disconnect?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    delete?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    connect?: PatientCardWhereUniqueInput | PatientCardWhereUniqueInput[]
    update?: PatientCardUpdateWithWhereUniqueWithoutPatientInput | PatientCardUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientCardUpdateManyWithWhereWithoutPatientInput | PatientCardUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientCardScalarWhereInput | PatientCardScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutPatientCardInput = {
    create?: XOR<PatientCreateWithoutPatientCardInput, PatientUncheckedCreateWithoutPatientCardInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPatientCardInput
    connect?: PatientWhereUniqueInput
  }

  export type EnumCardStatusFieldUpdateOperationsInput = {
    set?: $Enums.CardStatus
  }

  export type PatientUpdateOneRequiredWithoutPatientCardNestedInput = {
    create?: XOR<PatientCreateWithoutPatientCardInput, PatientUncheckedCreateWithoutPatientCardInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPatientCardInput
    upsert?: PatientUpsertWithoutPatientCardInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPatientCardInput, PatientUpdateWithoutPatientCardInput>, PatientUncheckedUpdateWithoutPatientCardInput>
  }

  export type PatientCreateNestedOneWithoutQrcodeInput = {
    create?: XOR<PatientCreateWithoutQrcodeInput, PatientUncheckedCreateWithoutQrcodeInput>
    connectOrCreate?: PatientCreateOrConnectWithoutQrcodeInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutQrcodeNestedInput = {
    create?: XOR<PatientCreateWithoutQrcodeInput, PatientUncheckedCreateWithoutQrcodeInput>
    connectOrCreate?: PatientCreateOrConnectWithoutQrcodeInput
    upsert?: PatientUpsertWithoutQrcodeInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutQrcodeInput, PatientUpdateWithoutQrcodeInput>, PatientUncheckedUpdateWithoutQrcodeInput>
  }

  export type UserCreateNestedOneWithoutDoctorInput = {
    create?: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorInput
    connect?: UserWhereUniqueInput
  }

  export type WeeklyScheduleCreateNestedManyWithoutDoctorInput = {
    create?: XOR<WeeklyScheduleCreateWithoutDoctorInput, WeeklyScheduleUncheckedCreateWithoutDoctorInput> | WeeklyScheduleCreateWithoutDoctorInput[] | WeeklyScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutDoctorInput | WeeklyScheduleCreateOrConnectWithoutDoctorInput[]
    createMany?: WeeklyScheduleCreateManyDoctorInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutDoctorInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type DoctorInstitutionCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorInstitutionCreateWithoutDoctorInput, DoctorInstitutionUncheckedCreateWithoutDoctorInput> | DoctorInstitutionCreateWithoutDoctorInput[] | DoctorInstitutionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutDoctorInput | DoctorInstitutionCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorInstitutionCreateManyDoctorInputEnvelope
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutDoctorInput = {
    create?: XOR<NotificationCreateWithoutDoctorInput, NotificationUncheckedCreateWithoutDoctorInput> | NotificationCreateWithoutDoctorInput[] | NotificationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutDoctorInput | NotificationCreateOrConnectWithoutDoctorInput[]
    createMany?: NotificationCreateManyDoctorInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FavoritesCreateNestedManyWithoutDoctorInput = {
    create?: XOR<FavoritesCreateWithoutDoctorInput, FavoritesUncheckedCreateWithoutDoctorInput> | FavoritesCreateWithoutDoctorInput[] | FavoritesUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutDoctorInput | FavoritesCreateOrConnectWithoutDoctorInput[]
    createMany?: FavoritesCreateManyDoctorInputEnvelope
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
  }

  export type MedicalReportCreateNestedManyWithoutDoctorInput = {
    create?: XOR<MedicalReportCreateWithoutDoctorInput, MedicalReportUncheckedCreateWithoutDoctorInput> | MedicalReportCreateWithoutDoctorInput[] | MedicalReportUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutDoctorInput | MedicalReportCreateOrConnectWithoutDoctorInput[]
    createMany?: MedicalReportCreateManyDoctorInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<WeeklyScheduleCreateWithoutDoctorInput, WeeklyScheduleUncheckedCreateWithoutDoctorInput> | WeeklyScheduleCreateWithoutDoctorInput[] | WeeklyScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutDoctorInput | WeeklyScheduleCreateOrConnectWithoutDoctorInput[]
    createMany?: WeeklyScheduleCreateManyDoctorInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<DoctorInstitutionCreateWithoutDoctorInput, DoctorInstitutionUncheckedCreateWithoutDoctorInput> | DoctorInstitutionCreateWithoutDoctorInput[] | DoctorInstitutionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutDoctorInput | DoctorInstitutionCreateOrConnectWithoutDoctorInput[]
    createMany?: DoctorInstitutionCreateManyDoctorInputEnvelope
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<NotificationCreateWithoutDoctorInput, NotificationUncheckedCreateWithoutDoctorInput> | NotificationCreateWithoutDoctorInput[] | NotificationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutDoctorInput | NotificationCreateOrConnectWithoutDoctorInput[]
    createMany?: NotificationCreateManyDoctorInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FavoritesUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<FavoritesCreateWithoutDoctorInput, FavoritesUncheckedCreateWithoutDoctorInput> | FavoritesCreateWithoutDoctorInput[] | FavoritesUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutDoctorInput | FavoritesCreateOrConnectWithoutDoctorInput[]
    createMany?: FavoritesCreateManyDoctorInputEnvelope
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
  }

  export type MedicalReportUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<MedicalReportCreateWithoutDoctorInput, MedicalReportUncheckedCreateWithoutDoctorInput> | MedicalReportCreateWithoutDoctorInput[] | MedicalReportUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutDoctorInput | MedicalReportCreateOrConnectWithoutDoctorInput[]
    createMany?: MedicalReportCreateManyDoctorInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: UserCreateOrConnectWithoutDoctorInput
    upsert?: UserUpsertWithoutDoctorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDoctorInput, UserUpdateWithoutDoctorInput>, UserUncheckedUpdateWithoutDoctorInput>
  }

  export type WeeklyScheduleUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutDoctorInput, WeeklyScheduleUncheckedCreateWithoutDoctorInput> | WeeklyScheduleCreateWithoutDoctorInput[] | WeeklyScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutDoctorInput | WeeklyScheduleCreateOrConnectWithoutDoctorInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutDoctorInput | WeeklyScheduleUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: WeeklyScheduleCreateManyDoctorInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutDoctorInput | WeeklyScheduleUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutDoctorInput | WeeklyScheduleUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutDoctorInput | AppointmentUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutDoctorInput | AppointmentUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutDoctorInput | AppointmentUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutDoctorInput | RatingUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutDoctorInput | RatingUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutDoctorInput | RatingUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type DoctorInstitutionUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorInstitutionCreateWithoutDoctorInput, DoctorInstitutionUncheckedCreateWithoutDoctorInput> | DoctorInstitutionCreateWithoutDoctorInput[] | DoctorInstitutionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutDoctorInput | DoctorInstitutionCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorInstitutionUpsertWithWhereUniqueWithoutDoctorInput | DoctorInstitutionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorInstitutionCreateManyDoctorInputEnvelope
    set?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    disconnect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    delete?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    update?: DoctorInstitutionUpdateWithWhereUniqueWithoutDoctorInput | DoctorInstitutionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorInstitutionUpdateManyWithWhereWithoutDoctorInput | DoctorInstitutionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorInstitutionScalarWhereInput | DoctorInstitutionScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<NotificationCreateWithoutDoctorInput, NotificationUncheckedCreateWithoutDoctorInput> | NotificationCreateWithoutDoctorInput[] | NotificationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutDoctorInput | NotificationCreateOrConnectWithoutDoctorInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutDoctorInput | NotificationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: NotificationCreateManyDoctorInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutDoctorInput | NotificationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutDoctorInput | NotificationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FavoritesUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<FavoritesCreateWithoutDoctorInput, FavoritesUncheckedCreateWithoutDoctorInput> | FavoritesCreateWithoutDoctorInput[] | FavoritesUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutDoctorInput | FavoritesCreateOrConnectWithoutDoctorInput[]
    upsert?: FavoritesUpsertWithWhereUniqueWithoutDoctorInput | FavoritesUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: FavoritesCreateManyDoctorInputEnvelope
    set?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    disconnect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    delete?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    update?: FavoritesUpdateWithWhereUniqueWithoutDoctorInput | FavoritesUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: FavoritesUpdateManyWithWhereWithoutDoctorInput | FavoritesUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
  }

  export type MedicalReportUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<MedicalReportCreateWithoutDoctorInput, MedicalReportUncheckedCreateWithoutDoctorInput> | MedicalReportCreateWithoutDoctorInput[] | MedicalReportUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutDoctorInput | MedicalReportCreateOrConnectWithoutDoctorInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutDoctorInput | MedicalReportUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: MedicalReportCreateManyDoctorInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutDoctorInput | MedicalReportUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutDoctorInput | MedicalReportUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutDoctorInput, WeeklyScheduleUncheckedCreateWithoutDoctorInput> | WeeklyScheduleCreateWithoutDoctorInput[] | WeeklyScheduleUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutDoctorInput | WeeklyScheduleCreateOrConnectWithoutDoctorInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutDoctorInput | WeeklyScheduleUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: WeeklyScheduleCreateManyDoctorInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutDoctorInput | WeeklyScheduleUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutDoctorInput | WeeklyScheduleUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput> | AppointmentCreateWithoutDoctorInput[] | AppointmentUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorInput | AppointmentCreateOrConnectWithoutDoctorInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutDoctorInput | AppointmentUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutDoctorInput | AppointmentUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutDoctorInput | AppointmentUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput> | RatingCreateWithoutDoctorInput[] | RatingUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutDoctorInput | RatingCreateOrConnectWithoutDoctorInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutDoctorInput | RatingUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: RatingCreateManyDoctorInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutDoctorInput | RatingUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutDoctorInput | RatingUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<DoctorInstitutionCreateWithoutDoctorInput, DoctorInstitutionUncheckedCreateWithoutDoctorInput> | DoctorInstitutionCreateWithoutDoctorInput[] | DoctorInstitutionUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutDoctorInput | DoctorInstitutionCreateOrConnectWithoutDoctorInput[]
    upsert?: DoctorInstitutionUpsertWithWhereUniqueWithoutDoctorInput | DoctorInstitutionUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: DoctorInstitutionCreateManyDoctorInputEnvelope
    set?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    disconnect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    delete?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    update?: DoctorInstitutionUpdateWithWhereUniqueWithoutDoctorInput | DoctorInstitutionUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: DoctorInstitutionUpdateManyWithWhereWithoutDoctorInput | DoctorInstitutionUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: DoctorInstitutionScalarWhereInput | DoctorInstitutionScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<NotificationCreateWithoutDoctorInput, NotificationUncheckedCreateWithoutDoctorInput> | NotificationCreateWithoutDoctorInput[] | NotificationUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutDoctorInput | NotificationCreateOrConnectWithoutDoctorInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutDoctorInput | NotificationUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: NotificationCreateManyDoctorInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutDoctorInput | NotificationUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutDoctorInput | NotificationUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FavoritesUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<FavoritesCreateWithoutDoctorInput, FavoritesUncheckedCreateWithoutDoctorInput> | FavoritesCreateWithoutDoctorInput[] | FavoritesUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutDoctorInput | FavoritesCreateOrConnectWithoutDoctorInput[]
    upsert?: FavoritesUpsertWithWhereUniqueWithoutDoctorInput | FavoritesUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: FavoritesCreateManyDoctorInputEnvelope
    set?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    disconnect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    delete?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    update?: FavoritesUpdateWithWhereUniqueWithoutDoctorInput | FavoritesUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: FavoritesUpdateManyWithWhereWithoutDoctorInput | FavoritesUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
  }

  export type MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<MedicalReportCreateWithoutDoctorInput, MedicalReportUncheckedCreateWithoutDoctorInput> | MedicalReportCreateWithoutDoctorInput[] | MedicalReportUncheckedCreateWithoutDoctorInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutDoctorInput | MedicalReportCreateOrConnectWithoutDoctorInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutDoctorInput | MedicalReportUpsertWithWhereUniqueWithoutDoctorInput[]
    createMany?: MedicalReportCreateManyDoctorInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutDoctorInput | MedicalReportUpdateWithWhereUniqueWithoutDoctorInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutDoctorInput | MedicalReportUpdateManyWithWhereWithoutDoctorInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<DoctorCreateWithoutFavoritesInput, DoctorUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutFavoritesInput
    connect?: DoctorWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<InstitutionCreateWithoutFavoritesInput, InstitutionUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutFavoritesInput
    connect?: InstitutionWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutFavoritesInput = {
    create?: XOR<PatientCreateWithoutFavoritesInput, PatientUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutFavoritesInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorUpdateOneWithoutFavoritesNestedInput = {
    create?: XOR<DoctorCreateWithoutFavoritesInput, DoctorUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutFavoritesInput
    upsert?: DoctorUpsertWithoutFavoritesInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutFavoritesInput, DoctorUpdateWithoutFavoritesInput>, DoctorUncheckedUpdateWithoutFavoritesInput>
  }

  export type InstitutionUpdateOneWithoutFavoritesNestedInput = {
    create?: XOR<InstitutionCreateWithoutFavoritesInput, InstitutionUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutFavoritesInput
    upsert?: InstitutionUpsertWithoutFavoritesInput
    disconnect?: InstitutionWhereInput | boolean
    delete?: InstitutionWhereInput | boolean
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutFavoritesInput, InstitutionUpdateWithoutFavoritesInput>, InstitutionUncheckedUpdateWithoutFavoritesInput>
  }

  export type PatientUpdateOneRequiredWithoutFavoritesNestedInput = {
    create?: XOR<PatientCreateWithoutFavoritesInput, PatientUncheckedCreateWithoutFavoritesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutFavoritesInput
    upsert?: PatientUpsertWithoutFavoritesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutFavoritesInput, PatientUpdateWithoutFavoritesInput>, PatientUncheckedUpdateWithoutFavoritesInput>
  }

  export type UserCreateNestedOneWithoutInstitutionInput = {
    create?: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput>
    connectOrCreate?: UserCreateOrConnectWithoutInstitutionInput
    connect?: UserWhereUniqueInput
  }

  export type AdminCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AdminCreateWithoutInstitutionInput, AdminUncheckedCreateWithoutInstitutionInput> | AdminCreateWithoutInstitutionInput[] | AdminUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutInstitutionInput | AdminCreateOrConnectWithoutInstitutionInput[]
    createMany?: AdminCreateManyInstitutionInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AppointmentCreateWithoutInstitutionInput, AppointmentUncheckedCreateWithoutInstitutionInput> | AppointmentCreateWithoutInstitutionInput[] | AppointmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutInstitutionInput | AppointmentCreateOrConnectWithoutInstitutionInput[]
    createMany?: AppointmentCreateManyInstitutionInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ServicesCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ServicesCreateWithoutInstitutionInput, ServicesUncheckedCreateWithoutInstitutionInput> | ServicesCreateWithoutInstitutionInput[] | ServicesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutInstitutionInput | ServicesCreateOrConnectWithoutInstitutionInput[]
    createMany?: ServicesCreateManyInstitutionInputEnvelope
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
  }

  export type WeeklyScheduleCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<WeeklyScheduleCreateWithoutInstitutionInput, WeeklyScheduleUncheckedCreateWithoutInstitutionInput> | WeeklyScheduleCreateWithoutInstitutionInput[] | WeeklyScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutInstitutionInput | WeeklyScheduleCreateOrConnectWithoutInstitutionInput[]
    createMany?: WeeklyScheduleCreateManyInstitutionInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type DoctorInstitutionCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<DoctorInstitutionCreateWithoutInstitutionInput, DoctorInstitutionUncheckedCreateWithoutInstitutionInput> | DoctorInstitutionCreateWithoutInstitutionInput[] | DoctorInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutInstitutionInput | DoctorInstitutionCreateOrConnectWithoutInstitutionInput[]
    createMany?: DoctorInstitutionCreateManyInstitutionInputEnvelope
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
  }

  export type ClinicRatingCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ClinicRatingCreateWithoutInstitutionInput, ClinicRatingUncheckedCreateWithoutInstitutionInput> | ClinicRatingCreateWithoutInstitutionInput[] | ClinicRatingUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutInstitutionInput | ClinicRatingCreateOrConnectWithoutInstitutionInput[]
    createMany?: ClinicRatingCreateManyInstitutionInputEnvelope
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<NotificationCreateWithoutInstitutionInput, NotificationUncheckedCreateWithoutInstitutionInput> | NotificationCreateWithoutInstitutionInput[] | NotificationUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutInstitutionInput | NotificationCreateOrConnectWithoutInstitutionInput[]
    createMany?: NotificationCreateManyInstitutionInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FavoritesCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<FavoritesCreateWithoutInstitutionInput, FavoritesUncheckedCreateWithoutInstitutionInput> | FavoritesCreateWithoutInstitutionInput[] | FavoritesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutInstitutionInput | FavoritesCreateOrConnectWithoutInstitutionInput[]
    createMany?: FavoritesCreateManyInstitutionInputEnvelope
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
  }

  export type MedicalReportCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<MedicalReportCreateWithoutInstitutionInput, MedicalReportUncheckedCreateWithoutInstitutionInput> | MedicalReportCreateWithoutInstitutionInput[] | MedicalReportUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutInstitutionInput | MedicalReportCreateOrConnectWithoutInstitutionInput[]
    createMany?: MedicalReportCreateManyInstitutionInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type AdminUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AdminCreateWithoutInstitutionInput, AdminUncheckedCreateWithoutInstitutionInput> | AdminCreateWithoutInstitutionInput[] | AdminUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutInstitutionInput | AdminCreateOrConnectWithoutInstitutionInput[]
    createMany?: AdminCreateManyInstitutionInputEnvelope
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<AppointmentCreateWithoutInstitutionInput, AppointmentUncheckedCreateWithoutInstitutionInput> | AppointmentCreateWithoutInstitutionInput[] | AppointmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutInstitutionInput | AppointmentCreateOrConnectWithoutInstitutionInput[]
    createMany?: AppointmentCreateManyInstitutionInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ServicesUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ServicesCreateWithoutInstitutionInput, ServicesUncheckedCreateWithoutInstitutionInput> | ServicesCreateWithoutInstitutionInput[] | ServicesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutInstitutionInput | ServicesCreateOrConnectWithoutInstitutionInput[]
    createMany?: ServicesCreateManyInstitutionInputEnvelope
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
  }

  export type WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<WeeklyScheduleCreateWithoutInstitutionInput, WeeklyScheduleUncheckedCreateWithoutInstitutionInput> | WeeklyScheduleCreateWithoutInstitutionInput[] | WeeklyScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutInstitutionInput | WeeklyScheduleCreateOrConnectWithoutInstitutionInput[]
    createMany?: WeeklyScheduleCreateManyInstitutionInputEnvelope
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
  }

  export type DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<DoctorInstitutionCreateWithoutInstitutionInput, DoctorInstitutionUncheckedCreateWithoutInstitutionInput> | DoctorInstitutionCreateWithoutInstitutionInput[] | DoctorInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutInstitutionInput | DoctorInstitutionCreateOrConnectWithoutInstitutionInput[]
    createMany?: DoctorInstitutionCreateManyInstitutionInputEnvelope
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
  }

  export type ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<ClinicRatingCreateWithoutInstitutionInput, ClinicRatingUncheckedCreateWithoutInstitutionInput> | ClinicRatingCreateWithoutInstitutionInput[] | ClinicRatingUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutInstitutionInput | ClinicRatingCreateOrConnectWithoutInstitutionInput[]
    createMany?: ClinicRatingCreateManyInstitutionInputEnvelope
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<NotificationCreateWithoutInstitutionInput, NotificationUncheckedCreateWithoutInstitutionInput> | NotificationCreateWithoutInstitutionInput[] | NotificationUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutInstitutionInput | NotificationCreateOrConnectWithoutInstitutionInput[]
    createMany?: NotificationCreateManyInstitutionInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type FavoritesUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<FavoritesCreateWithoutInstitutionInput, FavoritesUncheckedCreateWithoutInstitutionInput> | FavoritesCreateWithoutInstitutionInput[] | FavoritesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutInstitutionInput | FavoritesCreateOrConnectWithoutInstitutionInput[]
    createMany?: FavoritesCreateManyInstitutionInputEnvelope
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
  }

  export type MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput = {
    create?: XOR<MedicalReportCreateWithoutInstitutionInput, MedicalReportUncheckedCreateWithoutInstitutionInput> | MedicalReportCreateWithoutInstitutionInput[] | MedicalReportUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutInstitutionInput | MedicalReportCreateOrConnectWithoutInstitutionInput[]
    createMany?: MedicalReportCreateManyInstitutionInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutInstitutionNestedInput = {
    create?: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput>
    connectOrCreate?: UserCreateOrConnectWithoutInstitutionInput
    upsert?: UserUpsertWithoutInstitutionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInstitutionInput, UserUpdateWithoutInstitutionInput>, UserUncheckedUpdateWithoutInstitutionInput>
  }

  export type AdminUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AdminCreateWithoutInstitutionInput, AdminUncheckedCreateWithoutInstitutionInput> | AdminCreateWithoutInstitutionInput[] | AdminUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutInstitutionInput | AdminCreateOrConnectWithoutInstitutionInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutInstitutionInput | AdminUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AdminCreateManyInstitutionInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutInstitutionInput | AdminUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutInstitutionInput | AdminUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AppointmentCreateWithoutInstitutionInput, AppointmentUncheckedCreateWithoutInstitutionInput> | AppointmentCreateWithoutInstitutionInput[] | AppointmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutInstitutionInput | AppointmentCreateOrConnectWithoutInstitutionInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutInstitutionInput | AppointmentUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AppointmentCreateManyInstitutionInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutInstitutionInput | AppointmentUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutInstitutionInput | AppointmentUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ServicesUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ServicesCreateWithoutInstitutionInput, ServicesUncheckedCreateWithoutInstitutionInput> | ServicesCreateWithoutInstitutionInput[] | ServicesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutInstitutionInput | ServicesCreateOrConnectWithoutInstitutionInput[]
    upsert?: ServicesUpsertWithWhereUniqueWithoutInstitutionInput | ServicesUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ServicesCreateManyInstitutionInputEnvelope
    set?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    disconnect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    delete?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    update?: ServicesUpdateWithWhereUniqueWithoutInstitutionInput | ServicesUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ServicesUpdateManyWithWhereWithoutInstitutionInput | ServicesUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
  }

  export type WeeklyScheduleUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutInstitutionInput, WeeklyScheduleUncheckedCreateWithoutInstitutionInput> | WeeklyScheduleCreateWithoutInstitutionInput[] | WeeklyScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutInstitutionInput | WeeklyScheduleCreateOrConnectWithoutInstitutionInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutInstitutionInput | WeeklyScheduleUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: WeeklyScheduleCreateManyInstitutionInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutInstitutionInput | WeeklyScheduleUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutInstitutionInput | WeeklyScheduleUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type DoctorInstitutionUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<DoctorInstitutionCreateWithoutInstitutionInput, DoctorInstitutionUncheckedCreateWithoutInstitutionInput> | DoctorInstitutionCreateWithoutInstitutionInput[] | DoctorInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutInstitutionInput | DoctorInstitutionCreateOrConnectWithoutInstitutionInput[]
    upsert?: DoctorInstitutionUpsertWithWhereUniqueWithoutInstitutionInput | DoctorInstitutionUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: DoctorInstitutionCreateManyInstitutionInputEnvelope
    set?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    disconnect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    delete?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    update?: DoctorInstitutionUpdateWithWhereUniqueWithoutInstitutionInput | DoctorInstitutionUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: DoctorInstitutionUpdateManyWithWhereWithoutInstitutionInput | DoctorInstitutionUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: DoctorInstitutionScalarWhereInput | DoctorInstitutionScalarWhereInput[]
  }

  export type ClinicRatingUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ClinicRatingCreateWithoutInstitutionInput, ClinicRatingUncheckedCreateWithoutInstitutionInput> | ClinicRatingCreateWithoutInstitutionInput[] | ClinicRatingUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutInstitutionInput | ClinicRatingCreateOrConnectWithoutInstitutionInput[]
    upsert?: ClinicRatingUpsertWithWhereUniqueWithoutInstitutionInput | ClinicRatingUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ClinicRatingCreateManyInstitutionInputEnvelope
    set?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    disconnect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    delete?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    update?: ClinicRatingUpdateWithWhereUniqueWithoutInstitutionInput | ClinicRatingUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ClinicRatingUpdateManyWithWhereWithoutInstitutionInput | ClinicRatingUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ClinicRatingScalarWhereInput | ClinicRatingScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<NotificationCreateWithoutInstitutionInput, NotificationUncheckedCreateWithoutInstitutionInput> | NotificationCreateWithoutInstitutionInput[] | NotificationUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutInstitutionInput | NotificationCreateOrConnectWithoutInstitutionInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutInstitutionInput | NotificationUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: NotificationCreateManyInstitutionInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutInstitutionInput | NotificationUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutInstitutionInput | NotificationUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FavoritesUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<FavoritesCreateWithoutInstitutionInput, FavoritesUncheckedCreateWithoutInstitutionInput> | FavoritesCreateWithoutInstitutionInput[] | FavoritesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutInstitutionInput | FavoritesCreateOrConnectWithoutInstitutionInput[]
    upsert?: FavoritesUpsertWithWhereUniqueWithoutInstitutionInput | FavoritesUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: FavoritesCreateManyInstitutionInputEnvelope
    set?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    disconnect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    delete?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    update?: FavoritesUpdateWithWhereUniqueWithoutInstitutionInput | FavoritesUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: FavoritesUpdateManyWithWhereWithoutInstitutionInput | FavoritesUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
  }

  export type MedicalReportUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<MedicalReportCreateWithoutInstitutionInput, MedicalReportUncheckedCreateWithoutInstitutionInput> | MedicalReportCreateWithoutInstitutionInput[] | MedicalReportUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutInstitutionInput | MedicalReportCreateOrConnectWithoutInstitutionInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutInstitutionInput | MedicalReportUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: MedicalReportCreateManyInstitutionInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutInstitutionInput | MedicalReportUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutInstitutionInput | MedicalReportUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type AdminUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AdminCreateWithoutInstitutionInput, AdminUncheckedCreateWithoutInstitutionInput> | AdminCreateWithoutInstitutionInput[] | AdminUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AdminCreateOrConnectWithoutInstitutionInput | AdminCreateOrConnectWithoutInstitutionInput[]
    upsert?: AdminUpsertWithWhereUniqueWithoutInstitutionInput | AdminUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AdminCreateManyInstitutionInputEnvelope
    set?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    disconnect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    delete?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    connect?: AdminWhereUniqueInput | AdminWhereUniqueInput[]
    update?: AdminUpdateWithWhereUniqueWithoutInstitutionInput | AdminUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AdminUpdateManyWithWhereWithoutInstitutionInput | AdminUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AdminScalarWhereInput | AdminScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<AppointmentCreateWithoutInstitutionInput, AppointmentUncheckedCreateWithoutInstitutionInput> | AppointmentCreateWithoutInstitutionInput[] | AppointmentUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutInstitutionInput | AppointmentCreateOrConnectWithoutInstitutionInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutInstitutionInput | AppointmentUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: AppointmentCreateManyInstitutionInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutInstitutionInput | AppointmentUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutInstitutionInput | AppointmentUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ServicesUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ServicesCreateWithoutInstitutionInput, ServicesUncheckedCreateWithoutInstitutionInput> | ServicesCreateWithoutInstitutionInput[] | ServicesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ServicesCreateOrConnectWithoutInstitutionInput | ServicesCreateOrConnectWithoutInstitutionInput[]
    upsert?: ServicesUpsertWithWhereUniqueWithoutInstitutionInput | ServicesUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ServicesCreateManyInstitutionInputEnvelope
    set?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    disconnect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    delete?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    connect?: ServicesWhereUniqueInput | ServicesWhereUniqueInput[]
    update?: ServicesUpdateWithWhereUniqueWithoutInstitutionInput | ServicesUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ServicesUpdateManyWithWhereWithoutInstitutionInput | ServicesUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<WeeklyScheduleCreateWithoutInstitutionInput, WeeklyScheduleUncheckedCreateWithoutInstitutionInput> | WeeklyScheduleCreateWithoutInstitutionInput[] | WeeklyScheduleUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: WeeklyScheduleCreateOrConnectWithoutInstitutionInput | WeeklyScheduleCreateOrConnectWithoutInstitutionInput[]
    upsert?: WeeklyScheduleUpsertWithWhereUniqueWithoutInstitutionInput | WeeklyScheduleUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: WeeklyScheduleCreateManyInstitutionInputEnvelope
    set?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    disconnect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    delete?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    connect?: WeeklyScheduleWhereUniqueInput | WeeklyScheduleWhereUniqueInput[]
    update?: WeeklyScheduleUpdateWithWhereUniqueWithoutInstitutionInput | WeeklyScheduleUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: WeeklyScheduleUpdateManyWithWhereWithoutInstitutionInput | WeeklyScheduleUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
  }

  export type DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<DoctorInstitutionCreateWithoutInstitutionInput, DoctorInstitutionUncheckedCreateWithoutInstitutionInput> | DoctorInstitutionCreateWithoutInstitutionInput[] | DoctorInstitutionUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: DoctorInstitutionCreateOrConnectWithoutInstitutionInput | DoctorInstitutionCreateOrConnectWithoutInstitutionInput[]
    upsert?: DoctorInstitutionUpsertWithWhereUniqueWithoutInstitutionInput | DoctorInstitutionUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: DoctorInstitutionCreateManyInstitutionInputEnvelope
    set?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    disconnect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    delete?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    connect?: DoctorInstitutionWhereUniqueInput | DoctorInstitutionWhereUniqueInput[]
    update?: DoctorInstitutionUpdateWithWhereUniqueWithoutInstitutionInput | DoctorInstitutionUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: DoctorInstitutionUpdateManyWithWhereWithoutInstitutionInput | DoctorInstitutionUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: DoctorInstitutionScalarWhereInput | DoctorInstitutionScalarWhereInput[]
  }

  export type ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<ClinicRatingCreateWithoutInstitutionInput, ClinicRatingUncheckedCreateWithoutInstitutionInput> | ClinicRatingCreateWithoutInstitutionInput[] | ClinicRatingUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: ClinicRatingCreateOrConnectWithoutInstitutionInput | ClinicRatingCreateOrConnectWithoutInstitutionInput[]
    upsert?: ClinicRatingUpsertWithWhereUniqueWithoutInstitutionInput | ClinicRatingUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: ClinicRatingCreateManyInstitutionInputEnvelope
    set?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    disconnect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    delete?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    connect?: ClinicRatingWhereUniqueInput | ClinicRatingWhereUniqueInput[]
    update?: ClinicRatingUpdateWithWhereUniqueWithoutInstitutionInput | ClinicRatingUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: ClinicRatingUpdateManyWithWhereWithoutInstitutionInput | ClinicRatingUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: ClinicRatingScalarWhereInput | ClinicRatingScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<NotificationCreateWithoutInstitutionInput, NotificationUncheckedCreateWithoutInstitutionInput> | NotificationCreateWithoutInstitutionInput[] | NotificationUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutInstitutionInput | NotificationCreateOrConnectWithoutInstitutionInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutInstitutionInput | NotificationUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: NotificationCreateManyInstitutionInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutInstitutionInput | NotificationUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutInstitutionInput | NotificationUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<FavoritesCreateWithoutInstitutionInput, FavoritesUncheckedCreateWithoutInstitutionInput> | FavoritesCreateWithoutInstitutionInput[] | FavoritesUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: FavoritesCreateOrConnectWithoutInstitutionInput | FavoritesCreateOrConnectWithoutInstitutionInput[]
    upsert?: FavoritesUpsertWithWhereUniqueWithoutInstitutionInput | FavoritesUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: FavoritesCreateManyInstitutionInputEnvelope
    set?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    disconnect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    delete?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    connect?: FavoritesWhereUniqueInput | FavoritesWhereUniqueInput[]
    update?: FavoritesUpdateWithWhereUniqueWithoutInstitutionInput | FavoritesUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: FavoritesUpdateManyWithWhereWithoutInstitutionInput | FavoritesUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
  }

  export type MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput = {
    create?: XOR<MedicalReportCreateWithoutInstitutionInput, MedicalReportUncheckedCreateWithoutInstitutionInput> | MedicalReportCreateWithoutInstitutionInput[] | MedicalReportUncheckedCreateWithoutInstitutionInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutInstitutionInput | MedicalReportCreateOrConnectWithoutInstitutionInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutInstitutionInput | MedicalReportUpsertWithWhereUniqueWithoutInstitutionInput[]
    createMany?: MedicalReportCreateManyInstitutionInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutInstitutionInput | MedicalReportUpdateWithWhereUniqueWithoutInstitutionInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutInstitutionInput | MedicalReportUpdateManyWithWhereWithoutInstitutionInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutInstitutionInput = {
    create?: XOR<DoctorCreateWithoutInstitutionInput, DoctorUncheckedCreateWithoutInstitutionInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutInstitutionInput
    connect?: DoctorWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutDoctorInput = {
    create?: XOR<InstitutionCreateWithoutDoctorInput, InstitutionUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutDoctorInput
    connect?: InstitutionWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutInstitutionNestedInput = {
    create?: XOR<DoctorCreateWithoutInstitutionInput, DoctorUncheckedCreateWithoutInstitutionInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutInstitutionInput
    upsert?: DoctorUpsertWithoutInstitutionInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutInstitutionInput, DoctorUpdateWithoutInstitutionInput>, DoctorUncheckedUpdateWithoutInstitutionInput>
  }

  export type InstitutionUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<InstitutionCreateWithoutDoctorInput, InstitutionUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutDoctorInput
    upsert?: InstitutionUpsertWithoutDoctorInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutDoctorInput, InstitutionUpdateWithoutDoctorInput>, InstitutionUncheckedUpdateWithoutDoctorInput>
  }

  export type UserCreateNestedOneWithoutAdminInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    connect?: UserWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutAdminInput = {
    create?: XOR<InstitutionCreateWithoutAdminInput, InstitutionUncheckedCreateWithoutAdminInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutAdminInput
    connect?: InstitutionWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdminInput
    upsert?: UserUpsertWithoutAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdminInput, UserUpdateWithoutAdminInput>, UserUncheckedUpdateWithoutAdminInput>
  }

  export type InstitutionUpdateOneRequiredWithoutAdminNestedInput = {
    create?: XOR<InstitutionCreateWithoutAdminInput, InstitutionUncheckedCreateWithoutAdminInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutAdminInput
    upsert?: InstitutionUpsertWithoutAdminInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutAdminInput, InstitutionUpdateWithoutAdminInput>, InstitutionUncheckedUpdateWithoutAdminInput>
  }

  export type PatientCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentInput
    connect?: PatientWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutConsultationInput = {
    create?: XOR<InstitutionCreateWithoutConsultationInput, InstitutionUncheckedCreateWithoutConsultationInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutConsultationInput
    connect?: InstitutionWhereUniqueInput
  }

  export type ConsultationTypeCreateNestedOneWithoutConsultationInput = {
    create?: XOR<ConsultationTypeCreateWithoutConsultationInput, ConsultationTypeUncheckedCreateWithoutConsultationInput>
    connectOrCreate?: ConsultationTypeCreateOrConnectWithoutConsultationInput
    connect?: ConsultationTypeWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutConsultationInput = {
    create?: XOR<DoctorCreateWithoutConsultationInput, DoctorUncheckedCreateWithoutConsultationInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutConsultationInput
    connect?: DoctorWhereUniqueInput
  }

  export type MedicalHistoryCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<MedicalHistoryCreateWithoutAppointmentInput, MedicalHistoryUncheckedCreateWithoutAppointmentInput> | MedicalHistoryCreateWithoutAppointmentInput[] | MedicalHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalHistoryCreateOrConnectWithoutAppointmentInput | MedicalHistoryCreateOrConnectWithoutAppointmentInput[]
    createMany?: MedicalHistoryCreateManyAppointmentInputEnvelope
    connect?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
  }

  export type MedicalReportCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<MedicalReportCreateWithoutAppointmentInput, MedicalReportUncheckedCreateWithoutAppointmentInput> | MedicalReportCreateWithoutAppointmentInput[] | MedicalReportUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutAppointmentInput | MedicalReportCreateOrConnectWithoutAppointmentInput[]
    createMany?: MedicalReportCreateManyAppointmentInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type RatingCreateNestedManyWithoutAppoitmentInput = {
    create?: XOR<RatingCreateWithoutAppoitmentInput, RatingUncheckedCreateWithoutAppoitmentInput> | RatingCreateWithoutAppoitmentInput[] | RatingUncheckedCreateWithoutAppoitmentInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutAppoitmentInput | RatingCreateOrConnectWithoutAppoitmentInput[]
    createMany?: RatingCreateManyAppoitmentInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<NotificationCreateWithoutAppointmentInput, NotificationUncheckedCreateWithoutAppointmentInput> | NotificationCreateWithoutAppointmentInput[] | NotificationUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAppointmentInput | NotificationCreateOrConnectWithoutAppointmentInput[]
    createMany?: NotificationCreateManyAppointmentInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<MedicalHistoryCreateWithoutAppointmentInput, MedicalHistoryUncheckedCreateWithoutAppointmentInput> | MedicalHistoryCreateWithoutAppointmentInput[] | MedicalHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalHistoryCreateOrConnectWithoutAppointmentInput | MedicalHistoryCreateOrConnectWithoutAppointmentInput[]
    createMany?: MedicalHistoryCreateManyAppointmentInputEnvelope
    connect?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
  }

  export type MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<MedicalReportCreateWithoutAppointmentInput, MedicalReportUncheckedCreateWithoutAppointmentInput> | MedicalReportCreateWithoutAppointmentInput[] | MedicalReportUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutAppointmentInput | MedicalReportCreateOrConnectWithoutAppointmentInput[]
    createMany?: MedicalReportCreateManyAppointmentInputEnvelope
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
  }

  export type RatingUncheckedCreateNestedManyWithoutAppoitmentInput = {
    create?: XOR<RatingCreateWithoutAppoitmentInput, RatingUncheckedCreateWithoutAppoitmentInput> | RatingCreateWithoutAppoitmentInput[] | RatingUncheckedCreateWithoutAppoitmentInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutAppoitmentInput | RatingCreateOrConnectWithoutAppoitmentInput[]
    createMany?: RatingCreateManyAppoitmentInputEnvelope
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<NotificationCreateWithoutAppointmentInput, NotificationUncheckedCreateWithoutAppointmentInput> | NotificationCreateWithoutAppointmentInput[] | NotificationUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAppointmentInput | NotificationCreateOrConnectWithoutAppointmentInput[]
    createMany?: NotificationCreateManyAppointmentInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type PatientUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentInput
    upsert?: PatientUpsertWithoutAppointmentInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAppointmentInput, PatientUpdateWithoutAppointmentInput>, PatientUncheckedUpdateWithoutAppointmentInput>
  }

  export type InstitutionUpdateOneRequiredWithoutConsultationNestedInput = {
    create?: XOR<InstitutionCreateWithoutConsultationInput, InstitutionUncheckedCreateWithoutConsultationInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutConsultationInput
    upsert?: InstitutionUpsertWithoutConsultationInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutConsultationInput, InstitutionUpdateWithoutConsultationInput>, InstitutionUncheckedUpdateWithoutConsultationInput>
  }

  export type ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput = {
    create?: XOR<ConsultationTypeCreateWithoutConsultationInput, ConsultationTypeUncheckedCreateWithoutConsultationInput>
    connectOrCreate?: ConsultationTypeCreateOrConnectWithoutConsultationInput
    upsert?: ConsultationTypeUpsertWithoutConsultationInput
    connect?: ConsultationTypeWhereUniqueInput
    update?: XOR<XOR<ConsultationTypeUpdateToOneWithWhereWithoutConsultationInput, ConsultationTypeUpdateWithoutConsultationInput>, ConsultationTypeUncheckedUpdateWithoutConsultationInput>
  }

  export type DoctorUpdateOneRequiredWithoutConsultationNestedInput = {
    create?: XOR<DoctorCreateWithoutConsultationInput, DoctorUncheckedCreateWithoutConsultationInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutConsultationInput
    upsert?: DoctorUpsertWithoutConsultationInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutConsultationInput, DoctorUpdateWithoutConsultationInput>, DoctorUncheckedUpdateWithoutConsultationInput>
  }

  export type MedicalHistoryUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<MedicalHistoryCreateWithoutAppointmentInput, MedicalHistoryUncheckedCreateWithoutAppointmentInput> | MedicalHistoryCreateWithoutAppointmentInput[] | MedicalHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalHistoryCreateOrConnectWithoutAppointmentInput | MedicalHistoryCreateOrConnectWithoutAppointmentInput[]
    upsert?: MedicalHistoryUpsertWithWhereUniqueWithoutAppointmentInput | MedicalHistoryUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: MedicalHistoryCreateManyAppointmentInputEnvelope
    set?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    disconnect?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    delete?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    connect?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    update?: MedicalHistoryUpdateWithWhereUniqueWithoutAppointmentInput | MedicalHistoryUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: MedicalHistoryUpdateManyWithWhereWithoutAppointmentInput | MedicalHistoryUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: MedicalHistoryScalarWhereInput | MedicalHistoryScalarWhereInput[]
  }

  export type MedicalReportUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<MedicalReportCreateWithoutAppointmentInput, MedicalReportUncheckedCreateWithoutAppointmentInput> | MedicalReportCreateWithoutAppointmentInput[] | MedicalReportUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutAppointmentInput | MedicalReportCreateOrConnectWithoutAppointmentInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutAppointmentInput | MedicalReportUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: MedicalReportCreateManyAppointmentInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutAppointmentInput | MedicalReportUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutAppointmentInput | MedicalReportUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type RatingUpdateManyWithoutAppoitmentNestedInput = {
    create?: XOR<RatingCreateWithoutAppoitmentInput, RatingUncheckedCreateWithoutAppoitmentInput> | RatingCreateWithoutAppoitmentInput[] | RatingUncheckedCreateWithoutAppoitmentInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutAppoitmentInput | RatingCreateOrConnectWithoutAppoitmentInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutAppoitmentInput | RatingUpsertWithWhereUniqueWithoutAppoitmentInput[]
    createMany?: RatingCreateManyAppoitmentInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutAppoitmentInput | RatingUpdateWithWhereUniqueWithoutAppoitmentInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutAppoitmentInput | RatingUpdateManyWithWhereWithoutAppoitmentInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<NotificationCreateWithoutAppointmentInput, NotificationUncheckedCreateWithoutAppointmentInput> | NotificationCreateWithoutAppointmentInput[] | NotificationUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAppointmentInput | NotificationCreateOrConnectWithoutAppointmentInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutAppointmentInput | NotificationUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: NotificationCreateManyAppointmentInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutAppointmentInput | NotificationUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutAppointmentInput | NotificationUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<MedicalHistoryCreateWithoutAppointmentInput, MedicalHistoryUncheckedCreateWithoutAppointmentInput> | MedicalHistoryCreateWithoutAppointmentInput[] | MedicalHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalHistoryCreateOrConnectWithoutAppointmentInput | MedicalHistoryCreateOrConnectWithoutAppointmentInput[]
    upsert?: MedicalHistoryUpsertWithWhereUniqueWithoutAppointmentInput | MedicalHistoryUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: MedicalHistoryCreateManyAppointmentInputEnvelope
    set?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    disconnect?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    delete?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    connect?: MedicalHistoryWhereUniqueInput | MedicalHistoryWhereUniqueInput[]
    update?: MedicalHistoryUpdateWithWhereUniqueWithoutAppointmentInput | MedicalHistoryUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: MedicalHistoryUpdateManyWithWhereWithoutAppointmentInput | MedicalHistoryUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: MedicalHistoryScalarWhereInput | MedicalHistoryScalarWhereInput[]
  }

  export type MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<MedicalReportCreateWithoutAppointmentInput, MedicalReportUncheckedCreateWithoutAppointmentInput> | MedicalReportCreateWithoutAppointmentInput[] | MedicalReportUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: MedicalReportCreateOrConnectWithoutAppointmentInput | MedicalReportCreateOrConnectWithoutAppointmentInput[]
    upsert?: MedicalReportUpsertWithWhereUniqueWithoutAppointmentInput | MedicalReportUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: MedicalReportCreateManyAppointmentInputEnvelope
    set?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    disconnect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    delete?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    connect?: MedicalReportWhereUniqueInput | MedicalReportWhereUniqueInput[]
    update?: MedicalReportUpdateWithWhereUniqueWithoutAppointmentInput | MedicalReportUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: MedicalReportUpdateManyWithWhereWithoutAppointmentInput | MedicalReportUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
  }

  export type RatingUncheckedUpdateManyWithoutAppoitmentNestedInput = {
    create?: XOR<RatingCreateWithoutAppoitmentInput, RatingUncheckedCreateWithoutAppoitmentInput> | RatingCreateWithoutAppoitmentInput[] | RatingUncheckedCreateWithoutAppoitmentInput[]
    connectOrCreate?: RatingCreateOrConnectWithoutAppoitmentInput | RatingCreateOrConnectWithoutAppoitmentInput[]
    upsert?: RatingUpsertWithWhereUniqueWithoutAppoitmentInput | RatingUpsertWithWhereUniqueWithoutAppoitmentInput[]
    createMany?: RatingCreateManyAppoitmentInputEnvelope
    set?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    disconnect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    delete?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    connect?: RatingWhereUniqueInput | RatingWhereUniqueInput[]
    update?: RatingUpdateWithWhereUniqueWithoutAppoitmentInput | RatingUpdateWithWhereUniqueWithoutAppoitmentInput[]
    updateMany?: RatingUpdateManyWithWhereWithoutAppoitmentInput | RatingUpdateManyWithWhereWithoutAppoitmentInput[]
    deleteMany?: RatingScalarWhereInput | RatingScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<NotificationCreateWithoutAppointmentInput, NotificationUncheckedCreateWithoutAppointmentInput> | NotificationCreateWithoutAppointmentInput[] | NotificationUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutAppointmentInput | NotificationCreateOrConnectWithoutAppointmentInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutAppointmentInput | NotificationUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: NotificationCreateManyAppointmentInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutAppointmentInput | NotificationUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutAppointmentInput | NotificationUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AppointmentCreateNestedManyWithoutConsultationTypeInput = {
    create?: XOR<AppointmentCreateWithoutConsultationTypeInput, AppointmentUncheckedCreateWithoutConsultationTypeInput> | AppointmentCreateWithoutConsultationTypeInput[] | AppointmentUncheckedCreateWithoutConsultationTypeInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutConsultationTypeInput | AppointmentCreateOrConnectWithoutConsultationTypeInput[]
    createMany?: AppointmentCreateManyConsultationTypeInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutConsultationTypeInput = {
    create?: XOR<AppointmentCreateWithoutConsultationTypeInput, AppointmentUncheckedCreateWithoutConsultationTypeInput> | AppointmentCreateWithoutConsultationTypeInput[] | AppointmentUncheckedCreateWithoutConsultationTypeInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutConsultationTypeInput | AppointmentCreateOrConnectWithoutConsultationTypeInput[]
    createMany?: AppointmentCreateManyConsultationTypeInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUpdateManyWithoutConsultationTypeNestedInput = {
    create?: XOR<AppointmentCreateWithoutConsultationTypeInput, AppointmentUncheckedCreateWithoutConsultationTypeInput> | AppointmentCreateWithoutConsultationTypeInput[] | AppointmentUncheckedCreateWithoutConsultationTypeInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutConsultationTypeInput | AppointmentCreateOrConnectWithoutConsultationTypeInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutConsultationTypeInput | AppointmentUpsertWithWhereUniqueWithoutConsultationTypeInput[]
    createMany?: AppointmentCreateManyConsultationTypeInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutConsultationTypeInput | AppointmentUpdateWithWhereUniqueWithoutConsultationTypeInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutConsultationTypeInput | AppointmentUpdateManyWithWhereWithoutConsultationTypeInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutConsultationTypeNestedInput = {
    create?: XOR<AppointmentCreateWithoutConsultationTypeInput, AppointmentUncheckedCreateWithoutConsultationTypeInput> | AppointmentCreateWithoutConsultationTypeInput[] | AppointmentUncheckedCreateWithoutConsultationTypeInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutConsultationTypeInput | AppointmentCreateOrConnectWithoutConsultationTypeInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutConsultationTypeInput | AppointmentUpsertWithWhereUniqueWithoutConsultationTypeInput[]
    createMany?: AppointmentCreateManyConsultationTypeInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutConsultationTypeInput | AppointmentUpdateWithWhereUniqueWithoutConsultationTypeInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutConsultationTypeInput | AppointmentUpdateManyWithWhereWithoutConsultationTypeInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type DoctorCreateNestedOneWithoutNotificationInput = {
    create?: XOR<DoctorCreateWithoutNotificationInput, DoctorUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutNotificationInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutNotificationInput = {
    create?: XOR<PatientCreateWithoutNotificationInput, PatientUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNotificationInput
    connect?: PatientWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutNotificationInput = {
    create?: XOR<InstitutionCreateWithoutNotificationInput, InstitutionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutNotificationInput
    connect?: InstitutionWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutNotificationInput = {
    create?: XOR<AppointmentCreateWithoutNotificationInput, AppointmentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutNotificationInput
    connect?: AppointmentWhereUniqueInput
  }

  export type NullableEnumTypeNotificationFieldUpdateOperationsInput = {
    set?: $Enums.TypeNotification | null
  }

  export type DoctorUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<DoctorCreateWithoutNotificationInput, DoctorUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutNotificationInput
    upsert?: DoctorUpsertWithoutNotificationInput
    disconnect?: DoctorWhereInput | boolean
    delete?: DoctorWhereInput | boolean
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutNotificationInput, DoctorUpdateWithoutNotificationInput>, DoctorUncheckedUpdateWithoutNotificationInput>
  }

  export type PatientUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<PatientCreateWithoutNotificationInput, PatientUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: PatientCreateOrConnectWithoutNotificationInput
    upsert?: PatientUpsertWithoutNotificationInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutNotificationInput, PatientUpdateWithoutNotificationInput>, PatientUncheckedUpdateWithoutNotificationInput>
  }

  export type InstitutionUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<InstitutionCreateWithoutNotificationInput, InstitutionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutNotificationInput
    upsert?: InstitutionUpsertWithoutNotificationInput
    disconnect?: InstitutionWhereInput | boolean
    delete?: InstitutionWhereInput | boolean
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutNotificationInput, InstitutionUpdateWithoutNotificationInput>, InstitutionUncheckedUpdateWithoutNotificationInput>
  }

  export type AppointmentUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<AppointmentCreateWithoutNotificationInput, AppointmentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutNotificationInput
    upsert?: AppointmentUpsertWithoutNotificationInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutNotificationInput, AppointmentUpdateWithoutNotificationInput>, AppointmentUncheckedUpdateWithoutNotificationInput>
  }

  export type DoctorCreateNestedOneWithoutWeeklyScheduleInput = {
    create?: XOR<DoctorCreateWithoutWeeklyScheduleInput, DoctorUncheckedCreateWithoutWeeklyScheduleInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutWeeklyScheduleInput
    connect?: DoctorWhereUniqueInput
  }

  export type InstitutionCreateNestedOneWithoutWeeklyScheduleInput = {
    create?: XOR<InstitutionCreateWithoutWeeklyScheduleInput, InstitutionUncheckedCreateWithoutWeeklyScheduleInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutWeeklyScheduleInput
    connect?: InstitutionWhereUniqueInput
  }

  export type DoctorUpdateOneRequiredWithoutWeeklyScheduleNestedInput = {
    create?: XOR<DoctorCreateWithoutWeeklyScheduleInput, DoctorUncheckedCreateWithoutWeeklyScheduleInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutWeeklyScheduleInput
    upsert?: DoctorUpsertWithoutWeeklyScheduleInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutWeeklyScheduleInput, DoctorUpdateWithoutWeeklyScheduleInput>, DoctorUncheckedUpdateWithoutWeeklyScheduleInput>
  }

  export type InstitutionUpdateOneRequiredWithoutWeeklyScheduleNestedInput = {
    create?: XOR<InstitutionCreateWithoutWeeklyScheduleInput, InstitutionUncheckedCreateWithoutWeeklyScheduleInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutWeeklyScheduleInput
    upsert?: InstitutionUpsertWithoutWeeklyScheduleInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutWeeklyScheduleInput, InstitutionUpdateWithoutWeeklyScheduleInput>, InstitutionUncheckedUpdateWithoutWeeklyScheduleInput>
  }

  export type AppointmentCreateNestedOneWithoutMedicalHistoriesInput = {
    create?: XOR<AppointmentCreateWithoutMedicalHistoriesInput, AppointmentUncheckedCreateWithoutMedicalHistoriesInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutMedicalHistoriesInput
    connect?: AppointmentWhereUniqueInput
  }

  export type AppointmentUpdateOneRequiredWithoutMedicalHistoriesNestedInput = {
    create?: XOR<AppointmentCreateWithoutMedicalHistoriesInput, AppointmentUncheckedCreateWithoutMedicalHistoriesInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutMedicalHistoriesInput
    upsert?: AppointmentUpsertWithoutMedicalHistoriesInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutMedicalHistoriesInput, AppointmentUpdateWithoutMedicalHistoriesInput>, AppointmentUncheckedUpdateWithoutMedicalHistoriesInput>
  }

  export type UserCreateNestedOneWithoutPasswordConfirmationCodeInput = {
    create?: XOR<UserCreateWithoutPasswordConfirmationCodeInput, UserUncheckedCreateWithoutPasswordConfirmationCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordConfirmationCodeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPasswordConfirmationCodeNestedInput = {
    create?: XOR<UserCreateWithoutPasswordConfirmationCodeInput, UserUncheckedCreateWithoutPasswordConfirmationCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutPasswordConfirmationCodeInput
    upsert?: UserUpsertWithoutPasswordConfirmationCodeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPasswordConfirmationCodeInput, UserUpdateWithoutPasswordConfirmationCodeInput>, UserUncheckedUpdateWithoutPasswordConfirmationCodeInput>
  }

  export type MedicalReportCreaterecommendationsInput = {
    set: string[]
  }

  export type MedicalReportCreateorientationsInput = {
    set: string[]
  }

  export type InstitutionCreateNestedOneWithoutMedicalReportInput = {
    create?: XOR<InstitutionCreateWithoutMedicalReportInput, InstitutionUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutMedicalReportInput
    connect?: InstitutionWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutMedicalReportInput = {
    create?: XOR<DoctorCreateWithoutMedicalReportInput, DoctorUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalReportInput
    connect?: DoctorWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutMedicalReportInput = {
    create?: XOR<PatientCreateWithoutMedicalReportInput, PatientUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalReportInput
    connect?: PatientWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutMedicalReportInput = {
    create?: XOR<AppointmentCreateWithoutMedicalReportInput, AppointmentUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutMedicalReportInput
    connect?: AppointmentWhereUniqueInput
  }

  export type MedicalReportUpdaterecommendationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type MedicalReportUpdateorientationsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type InstitutionUpdateOneRequiredWithoutMedicalReportNestedInput = {
    create?: XOR<InstitutionCreateWithoutMedicalReportInput, InstitutionUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: InstitutionCreateOrConnectWithoutMedicalReportInput
    upsert?: InstitutionUpsertWithoutMedicalReportInput
    connect?: InstitutionWhereUniqueInput
    update?: XOR<XOR<InstitutionUpdateToOneWithWhereWithoutMedicalReportInput, InstitutionUpdateWithoutMedicalReportInput>, InstitutionUncheckedUpdateWithoutMedicalReportInput>
  }

  export type DoctorUpdateOneRequiredWithoutMedicalReportNestedInput = {
    create?: XOR<DoctorCreateWithoutMedicalReportInput, DoctorUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutMedicalReportInput
    upsert?: DoctorUpsertWithoutMedicalReportInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<XOR<DoctorUpdateToOneWithWhereWithoutMedicalReportInput, DoctorUpdateWithoutMedicalReportInput>, DoctorUncheckedUpdateWithoutMedicalReportInput>
  }

  export type PatientUpdateOneRequiredWithoutMedicalReportNestedInput = {
    create?: XOR<PatientCreateWithoutMedicalReportInput, PatientUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalReportInput
    upsert?: PatientUpsertWithoutMedicalReportInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMedicalReportInput, PatientUpdateWithoutMedicalReportInput>, PatientUncheckedUpdateWithoutMedicalReportInput>
  }

  export type AppointmentUpdateOneRequiredWithoutMedicalReportNestedInput = {
    create?: XOR<AppointmentCreateWithoutMedicalReportInput, AppointmentUncheckedCreateWithoutMedicalReportInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutMedicalReportInput
    upsert?: AppointmentUpsertWithoutMedicalReportInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutMedicalReportInput, AppointmentUpdateWithoutMedicalReportInput>, AppointmentUncheckedUpdateWithoutMedicalReportInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeFilter<$PrismaModel> | $Enums.RoleType
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleType | EnumRoleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleType[] | ListEnumRoleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleTypeWithAggregatesFilter<$PrismaModel> | $Enums.RoleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleTypeFilter<$PrismaModel>
    _max?: NestedEnumRoleTypeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumpermissionsFilter<$PrismaModel = never> = {
    equals?: $Enums.permissions | EnumpermissionsFieldRefInput<$PrismaModel>
    in?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    not?: NestedEnumpermissionsFilter<$PrismaModel> | $Enums.permissions
  }

  export type NestedEnumpermissionsWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.permissions | EnumpermissionsFieldRefInput<$PrismaModel>
    in?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    notIn?: $Enums.permissions[] | ListEnumpermissionsFieldRefInput<$PrismaModel>
    not?: NestedEnumpermissionsWithAggregatesFilter<$PrismaModel> | $Enums.permissions
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpermissionsFilter<$PrismaModel>
    _max?: NestedEnumpermissionsFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCardStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusFilter<$PrismaModel> | $Enums.CardStatus
  }

  export type NestedEnumCardStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CardStatus | EnumCardStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CardStatus[] | ListEnumCardStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCardStatusWithAggregatesFilter<$PrismaModel> | $Enums.CardStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCardStatusFilter<$PrismaModel>
    _max?: NestedEnumCardStatusFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumTypeNotificationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNotificationNullableFilter<$PrismaModel> | $Enums.TypeNotification | null
  }

  export type NestedEnumTypeNotificationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeNotification | EnumTypeNotificationFieldRefInput<$PrismaModel> | null
    in?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.TypeNotification[] | ListEnumTypeNotificationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNotificationNullableWithAggregatesFilter<$PrismaModel> | $Enums.TypeNotification | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTypeNotificationNullableFilter<$PrismaModel>
    _max?: NestedEnumTypeNotificationNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutFCMTokenInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFCMTokenInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFCMTokenInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFCMTokenInput, UserUncheckedCreateWithoutFCMTokenInput>
  }

  export type UserUpsertWithoutFCMTokenInput = {
    update: XOR<UserUpdateWithoutFCMTokenInput, UserUncheckedUpdateWithoutFCMTokenInput>
    create: XOR<UserCreateWithoutFCMTokenInput, UserUncheckedCreateWithoutFCMTokenInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFCMTokenInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFCMTokenInput, UserUncheckedUpdateWithoutFCMTokenInput>
  }

  export type UserUpdateWithoutFCMTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFCMTokenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserPermissionCreateWithoutUserInput = {
    id?: string
    permissions: $Enums.permissions
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: string
    permissions: $Enums.permissions
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutUserInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientCreateManyUserInputEnvelope = {
    data: PatientCreateManyUserInput | PatientCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutUserInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutUserInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutUserInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
  }

  export type DoctorCreateManyUserInputEnvelope = {
    data: DoctorCreateManyUserInput | DoctorCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InstitutionCreateWithoutUserInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutUserInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutUserInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutUserInput, InstitutionUncheckedCreateWithoutUserInput>
  }

  export type InstitutionCreateManyUserInputEnvelope = {
    data: InstitutionCreateManyUserInput | InstitutionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AdminCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutUserInput = {
    id?: string
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AdminCreateOrConnectWithoutUserInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type AdminCreateManyUserInputEnvelope = {
    data: AdminCreateManyUserInput | AdminCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutUserInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor: DoctorCreateNestedOneWithoutRatingInput
    appoitment: AppointmentCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutUserInput = {
    id?: string
    doctorId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingCreateOrConnectWithoutUserInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingCreateManyUserInputEnvelope = {
    data: RatingCreateManyUserInput | RatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ClinicRatingCreateWithoutUserInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutClinicRatingInput
  }

  export type ClinicRatingUncheckedCreateWithoutUserInput = {
    id?: string
    clinicId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ClinicRatingCreateOrConnectWithoutUserInput = {
    where: ClinicRatingWhereUniqueInput
    create: XOR<ClinicRatingCreateWithoutUserInput, ClinicRatingUncheckedCreateWithoutUserInput>
  }

  export type ClinicRatingCreateManyUserInputEnvelope = {
    data: ClinicRatingCreateManyUserInput | ClinicRatingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PasswordConfirmationCodeCreateWithoutUserInput = {
    id?: string
    code: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PasswordConfirmationCodeUncheckedCreateWithoutUserInput = {
    id?: string
    code: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PasswordConfirmationCodeCreateOrConnectWithoutUserInput = {
    where: PasswordConfirmationCodeWhereUniqueInput
    create: XOR<PasswordConfirmationCodeCreateWithoutUserInput, PasswordConfirmationCodeUncheckedCreateWithoutUserInput>
  }

  export type PasswordConfirmationCodeCreateManyUserInputEnvelope = {
    data: PasswordConfirmationCodeCreateManyUserInput | PasswordConfirmationCodeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FCMTokenCreateWithoutUserInput = {
    id?: string
    token: string
  }

  export type FCMTokenUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
  }

  export type FCMTokenCreateOrConnectWithoutUserInput = {
    where: FCMTokenWhereUniqueInput
    create: XOR<FCMTokenCreateWithoutUserInput, FCMTokenUncheckedCreateWithoutUserInput>
  }

  export type FCMTokenCreateManyUserInputEnvelope = {
    data: FCMTokenCreateManyUserInput | FCMTokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permissions?: EnumpermissionsFilter<"UserPermission"> | $Enums.permissions
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    updatedAt?: DateTimeFilter<"UserPermission"> | Date | string
    deletedAt?: BoolFilter<"UserPermission"> | boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateManyWithWhereWithoutUserInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutUserInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: StringFilter<"Patient"> | string
    number?: IntNullableFilter<"Patient"> | number | null
    userId?: StringFilter<"Patient"> | string
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    deletedAt?: BoolFilter<"Patient"> | boolean
  }

  export type DoctorUpsertWithWhereUniqueWithoutUserInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
    create: XOR<DoctorCreateWithoutUserInput, DoctorUncheckedCreateWithoutUserInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutUserInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutUserInput, DoctorUncheckedUpdateWithoutUserInput>
  }

  export type DoctorUpdateManyWithWhereWithoutUserInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutUserInput>
  }

  export type DoctorScalarWhereInput = {
    AND?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    OR?: DoctorScalarWhereInput[]
    NOT?: DoctorScalarWhereInput | DoctorScalarWhereInput[]
    id?: StringFilter<"Doctor"> | string
    userId?: StringFilter<"Doctor"> | string
    specialty?: StringFilter<"Doctor"> | string
    bio?: StringFilter<"Doctor"> | string
    registrationNumber?: IntFilter<"Doctor"> | number
    institutionId?: StringFilter<"Doctor"> | string
    isOnVacation?: BoolNullableFilter<"Doctor"> | boolean | null
    createdAt?: DateTimeFilter<"Doctor"> | Date | string
    updatedAt?: DateTimeFilter<"Doctor"> | Date | string
    deletedAt?: BoolFilter<"Doctor"> | boolean
  }

  export type InstitutionUpsertWithWhereUniqueWithoutUserInput = {
    where: InstitutionWhereUniqueInput
    update: XOR<InstitutionUpdateWithoutUserInput, InstitutionUncheckedUpdateWithoutUserInput>
    create: XOR<InstitutionCreateWithoutUserInput, InstitutionUncheckedCreateWithoutUserInput>
  }

  export type InstitutionUpdateWithWhereUniqueWithoutUserInput = {
    where: InstitutionWhereUniqueInput
    data: XOR<InstitutionUpdateWithoutUserInput, InstitutionUncheckedUpdateWithoutUserInput>
  }

  export type InstitutionUpdateManyWithWhereWithoutUserInput = {
    where: InstitutionScalarWhereInput
    data: XOR<InstitutionUpdateManyMutationInput, InstitutionUncheckedUpdateManyWithoutUserInput>
  }

  export type InstitutionScalarWhereInput = {
    AND?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
    OR?: InstitutionScalarWhereInput[]
    NOT?: InstitutionScalarWhereInput | InstitutionScalarWhereInput[]
    id?: StringFilter<"Institution"> | string
    userId?: StringFilter<"Institution"> | string
    clinicLatitude?: StringFilter<"Institution"> | string
    cliniclongitude?: StringFilter<"Institution"> | string
    createdAt?: DateTimeFilter<"Institution"> | Date | string
    updatedAt?: DateTimeFilter<"Institution"> | Date | string
    deletedAt?: BoolFilter<"Institution"> | boolean
  }

  export type AdminUpsertWithWhereUniqueWithoutUserInput = {
    where: AdminWhereUniqueInput
    update: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
    create: XOR<AdminCreateWithoutUserInput, AdminUncheckedCreateWithoutUserInput>
  }

  export type AdminUpdateWithWhereUniqueWithoutUserInput = {
    where: AdminWhereUniqueInput
    data: XOR<AdminUpdateWithoutUserInput, AdminUncheckedUpdateWithoutUserInput>
  }

  export type AdminUpdateManyWithWhereWithoutUserInput = {
    where: AdminScalarWhereInput
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyWithoutUserInput>
  }

  export type AdminScalarWhereInput = {
    AND?: AdminScalarWhereInput | AdminScalarWhereInput[]
    OR?: AdminScalarWhereInput[]
    NOT?: AdminScalarWhereInput | AdminScalarWhereInput[]
    id?: StringFilter<"Admin"> | string
    userId?: StringFilter<"Admin"> | string
    institutionId?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    updatedAt?: DateTimeFilter<"Admin"> | Date | string
    deletedAt?: BoolFilter<"Admin"> | boolean
  }

  export type RatingUpsertWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
    create: XOR<RatingCreateWithoutUserInput, RatingUncheckedCreateWithoutUserInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutUserInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutUserInput, RatingUncheckedUpdateWithoutUserInput>
  }

  export type RatingUpdateManyWithWhereWithoutUserInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutUserInput>
  }

  export type RatingScalarWhereInput = {
    AND?: RatingScalarWhereInput | RatingScalarWhereInput[]
    OR?: RatingScalarWhereInput[]
    NOT?: RatingScalarWhereInput | RatingScalarWhereInput[]
    id?: StringFilter<"Rating"> | string
    userId?: StringFilter<"Rating"> | string
    doctorId?: StringFilter<"Rating"> | string
    appoitmentID?: StringFilter<"Rating"> | string
    rate?: IntFilter<"Rating"> | number
    comment?: StringFilter<"Rating"> | string
    createdAt?: DateTimeFilter<"Rating"> | Date | string
    updatedAt?: DateTimeFilter<"Rating"> | Date | string
    deletedAt?: BoolFilter<"Rating"> | boolean
  }

  export type ClinicRatingUpsertWithWhereUniqueWithoutUserInput = {
    where: ClinicRatingWhereUniqueInput
    update: XOR<ClinicRatingUpdateWithoutUserInput, ClinicRatingUncheckedUpdateWithoutUserInput>
    create: XOR<ClinicRatingCreateWithoutUserInput, ClinicRatingUncheckedCreateWithoutUserInput>
  }

  export type ClinicRatingUpdateWithWhereUniqueWithoutUserInput = {
    where: ClinicRatingWhereUniqueInput
    data: XOR<ClinicRatingUpdateWithoutUserInput, ClinicRatingUncheckedUpdateWithoutUserInput>
  }

  export type ClinicRatingUpdateManyWithWhereWithoutUserInput = {
    where: ClinicRatingScalarWhereInput
    data: XOR<ClinicRatingUpdateManyMutationInput, ClinicRatingUncheckedUpdateManyWithoutUserInput>
  }

  export type ClinicRatingScalarWhereInput = {
    AND?: ClinicRatingScalarWhereInput | ClinicRatingScalarWhereInput[]
    OR?: ClinicRatingScalarWhereInput[]
    NOT?: ClinicRatingScalarWhereInput | ClinicRatingScalarWhereInput[]
    id?: StringFilter<"ClinicRating"> | string
    userId?: StringFilter<"ClinicRating"> | string
    clinicId?: StringFilter<"ClinicRating"> | string
    rate?: IntFilter<"ClinicRating"> | number
    comment?: StringFilter<"ClinicRating"> | string
    createdAt?: DateTimeFilter<"ClinicRating"> | Date | string
    updatedAt?: DateTimeFilter<"ClinicRating"> | Date | string
    deletedAt?: BoolFilter<"ClinicRating"> | boolean
  }

  export type PasswordConfirmationCodeUpsertWithWhereUniqueWithoutUserInput = {
    where: PasswordConfirmationCodeWhereUniqueInput
    update: XOR<PasswordConfirmationCodeUpdateWithoutUserInput, PasswordConfirmationCodeUncheckedUpdateWithoutUserInput>
    create: XOR<PasswordConfirmationCodeCreateWithoutUserInput, PasswordConfirmationCodeUncheckedCreateWithoutUserInput>
  }

  export type PasswordConfirmationCodeUpdateWithWhereUniqueWithoutUserInput = {
    where: PasswordConfirmationCodeWhereUniqueInput
    data: XOR<PasswordConfirmationCodeUpdateWithoutUserInput, PasswordConfirmationCodeUncheckedUpdateWithoutUserInput>
  }

  export type PasswordConfirmationCodeUpdateManyWithWhereWithoutUserInput = {
    where: PasswordConfirmationCodeScalarWhereInput
    data: XOR<PasswordConfirmationCodeUpdateManyMutationInput, PasswordConfirmationCodeUncheckedUpdateManyWithoutUserInput>
  }

  export type PasswordConfirmationCodeScalarWhereInput = {
    AND?: PasswordConfirmationCodeScalarWhereInput | PasswordConfirmationCodeScalarWhereInput[]
    OR?: PasswordConfirmationCodeScalarWhereInput[]
    NOT?: PasswordConfirmationCodeScalarWhereInput | PasswordConfirmationCodeScalarWhereInput[]
    id?: StringFilter<"PasswordConfirmationCode"> | string
    userId?: StringFilter<"PasswordConfirmationCode"> | string
    code?: StringFilter<"PasswordConfirmationCode"> | string
    expiresAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    createdAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    updatedAt?: DateTimeFilter<"PasswordConfirmationCode"> | Date | string
    deletedAt?: BoolFilter<"PasswordConfirmationCode"> | boolean
  }

  export type FCMTokenUpsertWithWhereUniqueWithoutUserInput = {
    where: FCMTokenWhereUniqueInput
    update: XOR<FCMTokenUpdateWithoutUserInput, FCMTokenUncheckedUpdateWithoutUserInput>
    create: XOR<FCMTokenCreateWithoutUserInput, FCMTokenUncheckedCreateWithoutUserInput>
  }

  export type FCMTokenUpdateWithWhereUniqueWithoutUserInput = {
    where: FCMTokenWhereUniqueInput
    data: XOR<FCMTokenUpdateWithoutUserInput, FCMTokenUncheckedUpdateWithoutUserInput>
  }

  export type FCMTokenUpdateManyWithWhereWithoutUserInput = {
    where: FCMTokenScalarWhereInput
    data: XOR<FCMTokenUpdateManyMutationInput, FCMTokenUncheckedUpdateManyWithoutUserInput>
  }

  export type FCMTokenScalarWhereInput = {
    AND?: FCMTokenScalarWhereInput | FCMTokenScalarWhereInput[]
    OR?: FCMTokenScalarWhereInput[]
    NOT?: FCMTokenScalarWhereInput | FCMTokenScalarWhereInput[]
    id?: StringFilter<"FCMToken"> | string
    userId?: StringFilter<"FCMToken"> | string
    token?: StringFilter<"FCMToken"> | string
  }

  export type DoctorCreateWithoutRatingInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutRatingInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutRatingInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
  }

  export type UserCreateWithoutRatingInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRatingInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
  }

  export type AppointmentCreateWithoutRatingInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutRatingInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutRatingInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRatingInput, AppointmentUncheckedCreateWithoutRatingInput>
  }

  export type DoctorUpsertWithoutRatingInput = {
    update: XOR<DoctorUpdateWithoutRatingInput, DoctorUncheckedUpdateWithoutRatingInput>
    create: XOR<DoctorCreateWithoutRatingInput, DoctorUncheckedCreateWithoutRatingInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutRatingInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutRatingInput, DoctorUncheckedUpdateWithoutRatingInput>
  }

  export type DoctorUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type UserUpsertWithoutRatingInput = {
    update: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
    create: XOR<UserCreateWithoutRatingInput, UserUncheckedCreateWithoutRatingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRatingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRatingInput, UserUncheckedUpdateWithoutRatingInput>
  }

  export type UserUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentUpsertWithoutRatingInput = {
    update: XOR<AppointmentUpdateWithoutRatingInput, AppointmentUncheckedUpdateWithoutRatingInput>
    create: XOR<AppointmentCreateWithoutRatingInput, AppointmentUncheckedCreateWithoutRatingInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutRatingInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutRatingInput, AppointmentUncheckedUpdateWithoutRatingInput>
  }

  export type AppointmentUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type InstitutionCreateWithoutClinicRatingInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutClinicRatingInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutClinicRatingInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutClinicRatingInput, InstitutionUncheckedCreateWithoutClinicRatingInput>
  }

  export type UserCreateWithoutClinicRatingInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutClinicRatingInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutClinicRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutClinicRatingInput, UserUncheckedCreateWithoutClinicRatingInput>
  }

  export type InstitutionUpsertWithoutClinicRatingInput = {
    update: XOR<InstitutionUpdateWithoutClinicRatingInput, InstitutionUncheckedUpdateWithoutClinicRatingInput>
    create: XOR<InstitutionCreateWithoutClinicRatingInput, InstitutionUncheckedCreateWithoutClinicRatingInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutClinicRatingInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutClinicRatingInput, InstitutionUncheckedUpdateWithoutClinicRatingInput>
  }

  export type InstitutionUpdateWithoutClinicRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutClinicRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type UserUpsertWithoutClinicRatingInput = {
    update: XOR<UserUpdateWithoutClinicRatingInput, UserUncheckedUpdateWithoutClinicRatingInput>
    create: XOR<UserCreateWithoutClinicRatingInput, UserUncheckedCreateWithoutClinicRatingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutClinicRatingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutClinicRatingInput, UserUncheckedUpdateWithoutClinicRatingInput>
  }

  export type UserUpdateWithoutClinicRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutClinicRatingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstitutionCreateWithoutServiceInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutServiceInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutServiceInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutServiceInput, InstitutionUncheckedCreateWithoutServiceInput>
  }

  export type InstitutionUpsertWithoutServiceInput = {
    update: XOR<InstitutionUpdateWithoutServiceInput, InstitutionUncheckedUpdateWithoutServiceInput>
    create: XOR<InstitutionCreateWithoutServiceInput, InstitutionUncheckedCreateWithoutServiceInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutServiceInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutServiceInput, InstitutionUncheckedUpdateWithoutServiceInput>
  }

  export type InstitutionUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type UserCreateWithoutUserPermissionInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserPermissionInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
  }

  export type UserUpsertWithoutUserPermissionInput = {
    update: XOR<UserUpdateWithoutUserPermissionInput, UserUncheckedUpdateWithoutUserPermissionInput>
    create: XOR<UserCreateWithoutUserPermissionInput, UserUncheckedCreateWithoutUserPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPermissionInput, UserUncheckedUpdateWithoutUserPermissionInput>
  }

  export type UserUpdateWithoutUserPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPatientInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateWithoutPacientInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPacientInput = {
    id?: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPacientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPacientInput, AppointmentUncheckedCreateWithoutPacientInput>
  }

  export type AppointmentCreateManyPacientInputEnvelope = {
    data: AppointmentCreateManyPacientInput | AppointmentCreateManyPacientInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutPatientInput = {
    id?: string
    content: string
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Doctor?: DoctorCreateNestedOneWithoutNotificationInput
    Institution?: InstitutionCreateNestedOneWithoutNotificationInput
    Appointment?: AppointmentCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutPatientInput = {
    id?: string
    content: string
    doctor_id?: string | null
    institution_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateOrConnectWithoutPatientInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutPatientInput, NotificationUncheckedCreateWithoutPatientInput>
  }

  export type NotificationCreateManyPatientInputEnvelope = {
    data: NotificationCreateManyPatientInput | NotificationCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type QrcodeCreateWithoutPatientInput = {
    id?: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type QrcodeUncheckedCreateWithoutPatientInput = {
    id?: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type QrcodeCreateOrConnectWithoutPatientInput = {
    where: QrcodeWhereUniqueInput
    create: XOR<QrcodeCreateWithoutPatientInput, QrcodeUncheckedCreateWithoutPatientInput>
  }

  export type QrcodeCreateManyPatientInputEnvelope = {
    data: QrcodeCreateManyPatientInput | QrcodeCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type FavoritesCreateWithoutPacientInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor?: DoctorCreateNestedOneWithoutFavoritesInput
    institution?: InstitutionCreateNestedOneWithoutFavoritesInput
  }

  export type FavoritesUncheckedCreateWithoutPacientInput = {
    id?: string
    doctorId?: string | null
    institutionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesCreateOrConnectWithoutPacientInput = {
    where: FavoritesWhereUniqueInput
    create: XOR<FavoritesCreateWithoutPacientInput, FavoritesUncheckedCreateWithoutPacientInput>
  }

  export type FavoritesCreateManyPacientInputEnvelope = {
    data: FavoritesCreateManyPacientInput | FavoritesCreateManyPacientInput[]
    skipDuplicates?: boolean
  }

  export type MedicalReportCreateWithoutPatientInput = {
    id?: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutMedicalReportInput
    doctor: DoctorCreateNestedOneWithoutMedicalReportInput
    appointment: AppointmentCreateNestedOneWithoutMedicalReportInput
  }

  export type MedicalReportUncheckedCreateWithoutPatientInput = {
    id?: string
    institutionId: string
    doctorId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateOrConnectWithoutPatientInput = {
    where: MedicalReportWhereUniqueInput
    create: XOR<MedicalReportCreateWithoutPatientInput, MedicalReportUncheckedCreateWithoutPatientInput>
  }

  export type MedicalReportCreateManyPatientInputEnvelope = {
    data: MedicalReportCreateManyPatientInput | MedicalReportCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientCardCreateWithoutPatientInput = {
    id?: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientCardUncheckedCreateWithoutPatientInput = {
    id?: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientCardCreateOrConnectWithoutPatientInput = {
    where: PatientCardWhereUniqueInput
    create: XOR<PatientCardCreateWithoutPatientInput, PatientCardUncheckedCreateWithoutPatientInput>
  }

  export type PatientCardCreateManyPatientInputEnvelope = {
    data: PatientCardCreateManyPatientInput | PatientCardCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientInput = {
    update: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
  }

  export type UserUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPacientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPacientInput, AppointmentUncheckedUpdateWithoutPacientInput>
    create: XOR<AppointmentCreateWithoutPacientInput, AppointmentUncheckedCreateWithoutPacientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPacientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPacientInput, AppointmentUncheckedUpdateWithoutPacientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPacientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPacientInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    institutionId?: StringFilter<"Appointment"> | string
    consultationTypeId?: StringFilter<"Appointment"> | string
    doctorId?: StringFilter<"Appointment"> | string
    symptomDescription?: StringFilter<"Appointment"> | string
    isUrgent?: BoolNullableFilter<"Appointment"> | boolean | null
    date?: DateTimeFilter<"Appointment"> | Date | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    deletedAt?: BoolFilter<"Appointment"> | boolean
  }

  export type NotificationUpsertWithWhereUniqueWithoutPatientInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutPatientInput, NotificationUncheckedUpdateWithoutPatientInput>
    create: XOR<NotificationCreateWithoutPatientInput, NotificationUncheckedCreateWithoutPatientInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutPatientInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutPatientInput, NotificationUncheckedUpdateWithoutPatientInput>
  }

  export type NotificationUpdateManyWithWhereWithoutPatientInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutPatientInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    content?: StringFilter<"Notification"> | string
    doctor_id?: StringNullableFilter<"Notification"> | string | null
    patient_id?: StringNullableFilter<"Notification"> | string | null
    institution_id?: StringNullableFilter<"Notification"> | string | null
    appointmentId?: StringNullableFilter<"Notification"> | string | null
    read?: BoolFilter<"Notification"> | boolean
    type?: EnumTypeNotificationNullableFilter<"Notification"> | $Enums.TypeNotification | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    deletedAt?: BoolFilter<"Notification"> | boolean
  }

  export type QrcodeUpsertWithWhereUniqueWithoutPatientInput = {
    where: QrcodeWhereUniqueInput
    update: XOR<QrcodeUpdateWithoutPatientInput, QrcodeUncheckedUpdateWithoutPatientInput>
    create: XOR<QrcodeCreateWithoutPatientInput, QrcodeUncheckedCreateWithoutPatientInput>
  }

  export type QrcodeUpdateWithWhereUniqueWithoutPatientInput = {
    where: QrcodeWhereUniqueInput
    data: XOR<QrcodeUpdateWithoutPatientInput, QrcodeUncheckedUpdateWithoutPatientInput>
  }

  export type QrcodeUpdateManyWithWhereWithoutPatientInput = {
    where: QrcodeScalarWhereInput
    data: XOR<QrcodeUpdateManyMutationInput, QrcodeUncheckedUpdateManyWithoutPatientInput>
  }

  export type QrcodeScalarWhereInput = {
    AND?: QrcodeScalarWhereInput | QrcodeScalarWhereInput[]
    OR?: QrcodeScalarWhereInput[]
    NOT?: QrcodeScalarWhereInput | QrcodeScalarWhereInput[]
    id?: StringFilter<"Qrcode"> | string
    code?: StringFilter<"Qrcode"> | string
    patientId?: StringFilter<"Qrcode"> | string
    createdAt?: DateTimeFilter<"Qrcode"> | Date | string
    updatedAt?: DateTimeFilter<"Qrcode"> | Date | string
    deletedAt?: BoolFilter<"Qrcode"> | boolean
  }

  export type FavoritesUpsertWithWhereUniqueWithoutPacientInput = {
    where: FavoritesWhereUniqueInput
    update: XOR<FavoritesUpdateWithoutPacientInput, FavoritesUncheckedUpdateWithoutPacientInput>
    create: XOR<FavoritesCreateWithoutPacientInput, FavoritesUncheckedCreateWithoutPacientInput>
  }

  export type FavoritesUpdateWithWhereUniqueWithoutPacientInput = {
    where: FavoritesWhereUniqueInput
    data: XOR<FavoritesUpdateWithoutPacientInput, FavoritesUncheckedUpdateWithoutPacientInput>
  }

  export type FavoritesUpdateManyWithWhereWithoutPacientInput = {
    where: FavoritesScalarWhereInput
    data: XOR<FavoritesUpdateManyMutationInput, FavoritesUncheckedUpdateManyWithoutPacientInput>
  }

  export type FavoritesScalarWhereInput = {
    AND?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
    OR?: FavoritesScalarWhereInput[]
    NOT?: FavoritesScalarWhereInput | FavoritesScalarWhereInput[]
    id?: StringFilter<"Favorites"> | string
    pacientId?: StringFilter<"Favorites"> | string
    doctorId?: StringNullableFilter<"Favorites"> | string | null
    institutionId?: StringNullableFilter<"Favorites"> | string | null
    createdAt?: DateTimeFilter<"Favorites"> | Date | string
    updatedAt?: DateTimeFilter<"Favorites"> | Date | string
    deletedAt?: BoolFilter<"Favorites"> | boolean
  }

  export type MedicalReportUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicalReportWhereUniqueInput
    update: XOR<MedicalReportUpdateWithoutPatientInput, MedicalReportUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicalReportCreateWithoutPatientInput, MedicalReportUncheckedCreateWithoutPatientInput>
  }

  export type MedicalReportUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicalReportWhereUniqueInput
    data: XOR<MedicalReportUpdateWithoutPatientInput, MedicalReportUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalReportUpdateManyWithWhereWithoutPatientInput = {
    where: MedicalReportScalarWhereInput
    data: XOR<MedicalReportUpdateManyMutationInput, MedicalReportUncheckedUpdateManyWithoutPatientInput>
  }

  export type MedicalReportScalarWhereInput = {
    AND?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
    OR?: MedicalReportScalarWhereInput[]
    NOT?: MedicalReportScalarWhereInput | MedicalReportScalarWhereInput[]
    id?: StringFilter<"MedicalReport"> | string
    institutionId?: StringFilter<"MedicalReport"> | string
    doctorId?: StringFilter<"MedicalReport"> | string
    patientId?: StringFilter<"MedicalReport"> | string
    AppointmentId?: StringFilter<"MedicalReport"> | string
    medicalEvaluation?: StringNullableFilter<"MedicalReport"> | string | null
    bloodPressure?: StringNullableFilter<"MedicalReport"> | string | null
    height?: StringNullableFilter<"MedicalReport"> | string | null
    weight?: StringNullableFilter<"MedicalReport"> | string | null
    pulse?: StringNullableFilter<"MedicalReport"> | string | null
    temperature?: StringNullableFilter<"MedicalReport"> | string | null
    otherPhysicalParams?: StringNullableFilter<"MedicalReport"> | string | null
    diagnosis?: StringNullableFilter<"MedicalReport"> | string | null
    treatmentPlan?: StringNullableFilter<"MedicalReport"> | string | null
    recommendations?: StringNullableListFilter<"MedicalReport">
    orientations?: StringNullableListFilter<"MedicalReport">
    observations?: StringNullableFilter<"MedicalReport"> | string | null
    symptomsDescription?: StringNullableFilter<"MedicalReport"> | string | null
    additionalObservation?: StringNullableFilter<"MedicalReport"> | string | null
    date?: DateTimeFilter<"MedicalReport"> | Date | string
    createdAt?: DateTimeFilter<"MedicalReport"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalReport"> | Date | string
    deletedAt?: BoolFilter<"MedicalReport"> | boolean
  }

  export type PatientCardUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientCardWhereUniqueInput
    update: XOR<PatientCardUpdateWithoutPatientInput, PatientCardUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientCardCreateWithoutPatientInput, PatientCardUncheckedCreateWithoutPatientInput>
  }

  export type PatientCardUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientCardWhereUniqueInput
    data: XOR<PatientCardUpdateWithoutPatientInput, PatientCardUncheckedUpdateWithoutPatientInput>
  }

  export type PatientCardUpdateManyWithWhereWithoutPatientInput = {
    where: PatientCardScalarWhereInput
    data: XOR<PatientCardUpdateManyMutationInput, PatientCardUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCardScalarWhereInput = {
    AND?: PatientCardScalarWhereInput | PatientCardScalarWhereInput[]
    OR?: PatientCardScalarWhereInput[]
    NOT?: PatientCardScalarWhereInput | PatientCardScalarWhereInput[]
    id?: StringFilter<"PatientCard"> | string
    patientId?: StringFilter<"PatientCard"> | string
    clinicId?: StringFilter<"PatientCard"> | string
    qrCode?: StringFilter<"PatientCard"> | string
    cardNumber?: StringFilter<"PatientCard"> | string
    status?: EnumCardStatusFilter<"PatientCard"> | $Enums.CardStatus
    issuedOn?: DateTimeNullableFilter<"PatientCard"> | Date | string | null
    createdAt?: DateTimeFilter<"PatientCard"> | Date | string
    updatedAt?: DateTimeFilter<"PatientCard"> | Date | string
    deletedAt?: BoolFilter<"PatientCard"> | boolean
  }

  export type PatientCreateWithoutPatientCardInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPatientCardInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPatientCardInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPatientCardInput, PatientUncheckedCreateWithoutPatientCardInput>
  }

  export type PatientUpsertWithoutPatientCardInput = {
    update: XOR<PatientUpdateWithoutPatientCardInput, PatientUncheckedUpdateWithoutPatientCardInput>
    create: XOR<PatientCreateWithoutPatientCardInput, PatientUncheckedCreateWithoutPatientCardInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPatientCardInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPatientCardInput, PatientUncheckedUpdateWithoutPatientCardInput>
  }

  export type PatientUpdateWithoutPatientCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPatientCardInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutQrcodeInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutQrcodeInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutQrcodeInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutQrcodeInput, PatientUncheckedCreateWithoutQrcodeInput>
  }

  export type PatientUpsertWithoutQrcodeInput = {
    update: XOR<PatientUpdateWithoutQrcodeInput, PatientUncheckedUpdateWithoutQrcodeInput>
    create: XOR<PatientCreateWithoutQrcodeInput, PatientUncheckedCreateWithoutQrcodeInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutQrcodeInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutQrcodeInput, PatientUncheckedUpdateWithoutQrcodeInput>
  }

  export type PatientUpdateWithoutQrcodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutQrcodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserCreateWithoutDoctorInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDoctorInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDoctorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
  }

  export type WeeklyScheduleCreateWithoutDoctorInput = {
    id?: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    institution: InstitutionCreateNestedOneWithoutWeeklyScheduleInput
  }

  export type WeeklyScheduleUncheckedCreateWithoutDoctorInput = {
    id?: string
    institutionId: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyScheduleCreateOrConnectWithoutDoctorInput = {
    where: WeeklyScheduleWhereUniqueInput
    create: XOR<WeeklyScheduleCreateWithoutDoctorInput, WeeklyScheduleUncheckedCreateWithoutDoctorInput>
  }

  export type WeeklyScheduleCreateManyDoctorInputEnvelope = {
    data: WeeklyScheduleCreateManyDoctorInput | WeeklyScheduleCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutDoctorInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutDoctorInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentCreateManyDoctorInputEnvelope = {
    data: AppointmentCreateManyDoctorInput | AppointmentCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutDoctorInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutRatingInput
    appoitment: AppointmentCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutDoctorInput = {
    id?: string
    userId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingCreateOrConnectWithoutDoctorInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput>
  }

  export type RatingCreateManyDoctorInputEnvelope = {
    data: RatingCreateManyDoctorInput | RatingCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type DoctorInstitutionCreateWithoutDoctorInput = {
    id?: string
    institution: InstitutionCreateNestedOneWithoutDoctorInput
  }

  export type DoctorInstitutionUncheckedCreateWithoutDoctorInput = {
    id?: string
    institutionId: string
  }

  export type DoctorInstitutionCreateOrConnectWithoutDoctorInput = {
    where: DoctorInstitutionWhereUniqueInput
    create: XOR<DoctorInstitutionCreateWithoutDoctorInput, DoctorInstitutionUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorInstitutionCreateManyDoctorInputEnvelope = {
    data: DoctorInstitutionCreateManyDoctorInput | DoctorInstitutionCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutDoctorInput = {
    id?: string
    content: string
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Patient?: PatientCreateNestedOneWithoutNotificationInput
    Institution?: InstitutionCreateNestedOneWithoutNotificationInput
    Appointment?: AppointmentCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutDoctorInput = {
    id?: string
    content: string
    patient_id?: string | null
    institution_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateOrConnectWithoutDoctorInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutDoctorInput, NotificationUncheckedCreateWithoutDoctorInput>
  }

  export type NotificationCreateManyDoctorInputEnvelope = {
    data: NotificationCreateManyDoctorInput | NotificationCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type FavoritesCreateWithoutDoctorInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution?: InstitutionCreateNestedOneWithoutFavoritesInput
    pacient: PatientCreateNestedOneWithoutFavoritesInput
  }

  export type FavoritesUncheckedCreateWithoutDoctorInput = {
    id?: string
    pacientId: string
    institutionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesCreateOrConnectWithoutDoctorInput = {
    where: FavoritesWhereUniqueInput
    create: XOR<FavoritesCreateWithoutDoctorInput, FavoritesUncheckedCreateWithoutDoctorInput>
  }

  export type FavoritesCreateManyDoctorInputEnvelope = {
    data: FavoritesCreateManyDoctorInput | FavoritesCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type MedicalReportCreateWithoutDoctorInput = {
    id?: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutMedicalReportInput
    patient: PatientCreateNestedOneWithoutMedicalReportInput
    appointment: AppointmentCreateNestedOneWithoutMedicalReportInput
  }

  export type MedicalReportUncheckedCreateWithoutDoctorInput = {
    id?: string
    institutionId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateOrConnectWithoutDoctorInput = {
    where: MedicalReportWhereUniqueInput
    create: XOR<MedicalReportCreateWithoutDoctorInput, MedicalReportUncheckedCreateWithoutDoctorInput>
  }

  export type MedicalReportCreateManyDoctorInputEnvelope = {
    data: MedicalReportCreateManyDoctorInput | MedicalReportCreateManyDoctorInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDoctorInput = {
    update: XOR<UserUpdateWithoutDoctorInput, UserUncheckedUpdateWithoutDoctorInput>
    create: XOR<UserCreateWithoutDoctorInput, UserUncheckedCreateWithoutDoctorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDoctorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDoctorInput, UserUncheckedUpdateWithoutDoctorInput>
  }

  export type UserUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WeeklyScheduleUpsertWithWhereUniqueWithoutDoctorInput = {
    where: WeeklyScheduleWhereUniqueInput
    update: XOR<WeeklyScheduleUpdateWithoutDoctorInput, WeeklyScheduleUncheckedUpdateWithoutDoctorInput>
    create: XOR<WeeklyScheduleCreateWithoutDoctorInput, WeeklyScheduleUncheckedCreateWithoutDoctorInput>
  }

  export type WeeklyScheduleUpdateWithWhereUniqueWithoutDoctorInput = {
    where: WeeklyScheduleWhereUniqueInput
    data: XOR<WeeklyScheduleUpdateWithoutDoctorInput, WeeklyScheduleUncheckedUpdateWithoutDoctorInput>
  }

  export type WeeklyScheduleUpdateManyWithWhereWithoutDoctorInput = {
    where: WeeklyScheduleScalarWhereInput
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyWithoutDoctorInput>
  }

  export type WeeklyScheduleScalarWhereInput = {
    AND?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
    OR?: WeeklyScheduleScalarWhereInput[]
    NOT?: WeeklyScheduleScalarWhereInput | WeeklyScheduleScalarWhereInput[]
    id?: StringFilter<"WeeklySchedule"> | string
    doctorId?: StringFilter<"WeeklySchedule"> | string
    institutionId?: StringFilter<"WeeklySchedule"> | string
    dayOfWeek?: DateTimeFilter<"WeeklySchedule"> | Date | string
    startTime?: IntFilter<"WeeklySchedule"> | number
    endTime?: IntFilter<"WeeklySchedule"> | number
    interval?: IntFilter<"WeeklySchedule"> | number
    dailyWorkingHours?: IntFilter<"WeeklySchedule"> | number
    createdAt?: DateTimeFilter<"WeeklySchedule"> | Date | string
    updatedAt?: DateTimeFilter<"WeeklySchedule"> | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutDoctorInput, AppointmentUncheckedUpdateWithoutDoctorInput>
    create: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutDoctorInput, AppointmentUncheckedUpdateWithoutDoctorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutDoctorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutDoctorInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutDoctorInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutDoctorInput, RatingUncheckedUpdateWithoutDoctorInput>
    create: XOR<RatingCreateWithoutDoctorInput, RatingUncheckedCreateWithoutDoctorInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutDoctorInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutDoctorInput, RatingUncheckedUpdateWithoutDoctorInput>
  }

  export type RatingUpdateManyWithWhereWithoutDoctorInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorInstitutionUpsertWithWhereUniqueWithoutDoctorInput = {
    where: DoctorInstitutionWhereUniqueInput
    update: XOR<DoctorInstitutionUpdateWithoutDoctorInput, DoctorInstitutionUncheckedUpdateWithoutDoctorInput>
    create: XOR<DoctorInstitutionCreateWithoutDoctorInput, DoctorInstitutionUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorInstitutionUpdateWithWhereUniqueWithoutDoctorInput = {
    where: DoctorInstitutionWhereUniqueInput
    data: XOR<DoctorInstitutionUpdateWithoutDoctorInput, DoctorInstitutionUncheckedUpdateWithoutDoctorInput>
  }

  export type DoctorInstitutionUpdateManyWithWhereWithoutDoctorInput = {
    where: DoctorInstitutionScalarWhereInput
    data: XOR<DoctorInstitutionUpdateManyMutationInput, DoctorInstitutionUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorInstitutionScalarWhereInput = {
    AND?: DoctorInstitutionScalarWhereInput | DoctorInstitutionScalarWhereInput[]
    OR?: DoctorInstitutionScalarWhereInput[]
    NOT?: DoctorInstitutionScalarWhereInput | DoctorInstitutionScalarWhereInput[]
    id?: StringFilter<"DoctorInstitution"> | string
    doctorId?: StringFilter<"DoctorInstitution"> | string
    institutionId?: StringFilter<"DoctorInstitution"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutDoctorInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutDoctorInput, NotificationUncheckedUpdateWithoutDoctorInput>
    create: XOR<NotificationCreateWithoutDoctorInput, NotificationUncheckedCreateWithoutDoctorInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutDoctorInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutDoctorInput, NotificationUncheckedUpdateWithoutDoctorInput>
  }

  export type NotificationUpdateManyWithWhereWithoutDoctorInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutDoctorInput>
  }

  export type FavoritesUpsertWithWhereUniqueWithoutDoctorInput = {
    where: FavoritesWhereUniqueInput
    update: XOR<FavoritesUpdateWithoutDoctorInput, FavoritesUncheckedUpdateWithoutDoctorInput>
    create: XOR<FavoritesCreateWithoutDoctorInput, FavoritesUncheckedCreateWithoutDoctorInput>
  }

  export type FavoritesUpdateWithWhereUniqueWithoutDoctorInput = {
    where: FavoritesWhereUniqueInput
    data: XOR<FavoritesUpdateWithoutDoctorInput, FavoritesUncheckedUpdateWithoutDoctorInput>
  }

  export type FavoritesUpdateManyWithWhereWithoutDoctorInput = {
    where: FavoritesScalarWhereInput
    data: XOR<FavoritesUpdateManyMutationInput, FavoritesUncheckedUpdateManyWithoutDoctorInput>
  }

  export type MedicalReportUpsertWithWhereUniqueWithoutDoctorInput = {
    where: MedicalReportWhereUniqueInput
    update: XOR<MedicalReportUpdateWithoutDoctorInput, MedicalReportUncheckedUpdateWithoutDoctorInput>
    create: XOR<MedicalReportCreateWithoutDoctorInput, MedicalReportUncheckedCreateWithoutDoctorInput>
  }

  export type MedicalReportUpdateWithWhereUniqueWithoutDoctorInput = {
    where: MedicalReportWhereUniqueInput
    data: XOR<MedicalReportUpdateWithoutDoctorInput, MedicalReportUncheckedUpdateWithoutDoctorInput>
  }

  export type MedicalReportUpdateManyWithWhereWithoutDoctorInput = {
    where: MedicalReportScalarWhereInput
    data: XOR<MedicalReportUpdateManyMutationInput, MedicalReportUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorCreateWithoutFavoritesInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutFavoritesInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutFavoritesInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutFavoritesInput, DoctorUncheckedCreateWithoutFavoritesInput>
  }

  export type InstitutionCreateWithoutFavoritesInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutFavoritesInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutFavoritesInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutFavoritesInput, InstitutionUncheckedCreateWithoutFavoritesInput>
  }

  export type PatientCreateWithoutFavoritesInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutFavoritesInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutFavoritesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutFavoritesInput, PatientUncheckedCreateWithoutFavoritesInput>
  }

  export type DoctorUpsertWithoutFavoritesInput = {
    update: XOR<DoctorUpdateWithoutFavoritesInput, DoctorUncheckedUpdateWithoutFavoritesInput>
    create: XOR<DoctorCreateWithoutFavoritesInput, DoctorUncheckedCreateWithoutFavoritesInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutFavoritesInput, DoctorUncheckedUpdateWithoutFavoritesInput>
  }

  export type DoctorUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type InstitutionUpsertWithoutFavoritesInput = {
    update: XOR<InstitutionUpdateWithoutFavoritesInput, InstitutionUncheckedUpdateWithoutFavoritesInput>
    create: XOR<InstitutionCreateWithoutFavoritesInput, InstitutionUncheckedCreateWithoutFavoritesInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutFavoritesInput, InstitutionUncheckedUpdateWithoutFavoritesInput>
  }

  export type InstitutionUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type PatientUpsertWithoutFavoritesInput = {
    update: XOR<PatientUpdateWithoutFavoritesInput, PatientUncheckedUpdateWithoutFavoritesInput>
    create: XOR<PatientCreateWithoutFavoritesInput, PatientUncheckedCreateWithoutFavoritesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutFavoritesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutFavoritesInput, PatientUncheckedUpdateWithoutFavoritesInput>
  }

  export type PatientUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutFavoritesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserCreateWithoutInstitutionInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInstitutionInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInstitutionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput>
  }

  export type AdminCreateWithoutInstitutionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutInstitutionInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AdminCreateOrConnectWithoutInstitutionInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutInstitutionInput, AdminUncheckedCreateWithoutInstitutionInput>
  }

  export type AdminCreateManyInstitutionInputEnvelope = {
    data: AdminCreateManyInstitutionInput | AdminCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutInstitutionInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutInstitutionInput = {
    id?: string
    patientId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutInstitutionInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutInstitutionInput, AppointmentUncheckedCreateWithoutInstitutionInput>
  }

  export type AppointmentCreateManyInstitutionInputEnvelope = {
    data: AppointmentCreateManyInstitutionInput | AppointmentCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type ServicesCreateWithoutInstitutionInput = {
    id?: string
    name: string
    description: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ServicesUncheckedCreateWithoutInstitutionInput = {
    id?: string
    name: string
    description: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ServicesCreateOrConnectWithoutInstitutionInput = {
    where: ServicesWhereUniqueInput
    create: XOR<ServicesCreateWithoutInstitutionInput, ServicesUncheckedCreateWithoutInstitutionInput>
  }

  export type ServicesCreateManyInstitutionInputEnvelope = {
    data: ServicesCreateManyInstitutionInput | ServicesCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type WeeklyScheduleCreateWithoutInstitutionInput = {
    id?: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    doctor: DoctorCreateNestedOneWithoutWeeklyScheduleInput
  }

  export type WeeklyScheduleUncheckedCreateWithoutInstitutionInput = {
    id?: string
    doctorId: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WeeklyScheduleCreateOrConnectWithoutInstitutionInput = {
    where: WeeklyScheduleWhereUniqueInput
    create: XOR<WeeklyScheduleCreateWithoutInstitutionInput, WeeklyScheduleUncheckedCreateWithoutInstitutionInput>
  }

  export type WeeklyScheduleCreateManyInstitutionInputEnvelope = {
    data: WeeklyScheduleCreateManyInstitutionInput | WeeklyScheduleCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type DoctorInstitutionCreateWithoutInstitutionInput = {
    id?: string
    Doctor: DoctorCreateNestedOneWithoutInstitutionInput
  }

  export type DoctorInstitutionUncheckedCreateWithoutInstitutionInput = {
    id?: string
    doctorId: string
  }

  export type DoctorInstitutionCreateOrConnectWithoutInstitutionInput = {
    where: DoctorInstitutionWhereUniqueInput
    create: XOR<DoctorInstitutionCreateWithoutInstitutionInput, DoctorInstitutionUncheckedCreateWithoutInstitutionInput>
  }

  export type DoctorInstitutionCreateManyInstitutionInputEnvelope = {
    data: DoctorInstitutionCreateManyInstitutionInput | DoctorInstitutionCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type ClinicRatingCreateWithoutInstitutionInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutClinicRatingInput
  }

  export type ClinicRatingUncheckedCreateWithoutInstitutionInput = {
    id?: string
    userId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ClinicRatingCreateOrConnectWithoutInstitutionInput = {
    where: ClinicRatingWhereUniqueInput
    create: XOR<ClinicRatingCreateWithoutInstitutionInput, ClinicRatingUncheckedCreateWithoutInstitutionInput>
  }

  export type ClinicRatingCreateManyInstitutionInputEnvelope = {
    data: ClinicRatingCreateManyInstitutionInput | ClinicRatingCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutInstitutionInput = {
    id?: string
    content: string
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Doctor?: DoctorCreateNestedOneWithoutNotificationInput
    Patient?: PatientCreateNestedOneWithoutNotificationInput
    Appointment?: AppointmentCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutInstitutionInput = {
    id?: string
    content: string
    doctor_id?: string | null
    patient_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateOrConnectWithoutInstitutionInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutInstitutionInput, NotificationUncheckedCreateWithoutInstitutionInput>
  }

  export type NotificationCreateManyInstitutionInputEnvelope = {
    data: NotificationCreateManyInstitutionInput | NotificationCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type FavoritesCreateWithoutInstitutionInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor?: DoctorCreateNestedOneWithoutFavoritesInput
    pacient: PatientCreateNestedOneWithoutFavoritesInput
  }

  export type FavoritesUncheckedCreateWithoutInstitutionInput = {
    id?: string
    pacientId: string
    doctorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesCreateOrConnectWithoutInstitutionInput = {
    where: FavoritesWhereUniqueInput
    create: XOR<FavoritesCreateWithoutInstitutionInput, FavoritesUncheckedCreateWithoutInstitutionInput>
  }

  export type FavoritesCreateManyInstitutionInputEnvelope = {
    data: FavoritesCreateManyInstitutionInput | FavoritesCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type MedicalReportCreateWithoutInstitutionInput = {
    id?: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor: DoctorCreateNestedOneWithoutMedicalReportInput
    patient: PatientCreateNestedOneWithoutMedicalReportInput
    appointment: AppointmentCreateNestedOneWithoutMedicalReportInput
  }

  export type MedicalReportUncheckedCreateWithoutInstitutionInput = {
    id?: string
    doctorId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateOrConnectWithoutInstitutionInput = {
    where: MedicalReportWhereUniqueInput
    create: XOR<MedicalReportCreateWithoutInstitutionInput, MedicalReportUncheckedCreateWithoutInstitutionInput>
  }

  export type MedicalReportCreateManyInstitutionInputEnvelope = {
    data: MedicalReportCreateManyInstitutionInput | MedicalReportCreateManyInstitutionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutInstitutionInput = {
    update: XOR<UserUpdateWithoutInstitutionInput, UserUncheckedUpdateWithoutInstitutionInput>
    create: XOR<UserCreateWithoutInstitutionInput, UserUncheckedCreateWithoutInstitutionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInstitutionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInstitutionInput, UserUncheckedUpdateWithoutInstitutionInput>
  }

  export type UserUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AdminUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: AdminWhereUniqueInput
    update: XOR<AdminUpdateWithoutInstitutionInput, AdminUncheckedUpdateWithoutInstitutionInput>
    create: XOR<AdminCreateWithoutInstitutionInput, AdminUncheckedCreateWithoutInstitutionInput>
  }

  export type AdminUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: AdminWhereUniqueInput
    data: XOR<AdminUpdateWithoutInstitutionInput, AdminUncheckedUpdateWithoutInstitutionInput>
  }

  export type AdminUpdateManyWithWhereWithoutInstitutionInput = {
    where: AdminScalarWhereInput
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutInstitutionInput, AppointmentUncheckedUpdateWithoutInstitutionInput>
    create: XOR<AppointmentCreateWithoutInstitutionInput, AppointmentUncheckedCreateWithoutInstitutionInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutInstitutionInput, AppointmentUncheckedUpdateWithoutInstitutionInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutInstitutionInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type ServicesUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: ServicesWhereUniqueInput
    update: XOR<ServicesUpdateWithoutInstitutionInput, ServicesUncheckedUpdateWithoutInstitutionInput>
    create: XOR<ServicesCreateWithoutInstitutionInput, ServicesUncheckedCreateWithoutInstitutionInput>
  }

  export type ServicesUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: ServicesWhereUniqueInput
    data: XOR<ServicesUpdateWithoutInstitutionInput, ServicesUncheckedUpdateWithoutInstitutionInput>
  }

  export type ServicesUpdateManyWithWhereWithoutInstitutionInput = {
    where: ServicesScalarWhereInput
    data: XOR<ServicesUpdateManyMutationInput, ServicesUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type ServicesScalarWhereInput = {
    AND?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
    OR?: ServicesScalarWhereInput[]
    NOT?: ServicesScalarWhereInput | ServicesScalarWhereInput[]
    id?: StringFilter<"Services"> | string
    name?: StringFilter<"Services"> | string
    description?: StringFilter<"Services"> | string
    price?: FloatFilter<"Services"> | number
    institutionId?: StringFilter<"Services"> | string
    createdAt?: DateTimeFilter<"Services"> | Date | string
    updatedAt?: DateTimeFilter<"Services"> | Date | string
    deletedAt?: BoolFilter<"Services"> | boolean
  }

  export type WeeklyScheduleUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: WeeklyScheduleWhereUniqueInput
    update: XOR<WeeklyScheduleUpdateWithoutInstitutionInput, WeeklyScheduleUncheckedUpdateWithoutInstitutionInput>
    create: XOR<WeeklyScheduleCreateWithoutInstitutionInput, WeeklyScheduleUncheckedCreateWithoutInstitutionInput>
  }

  export type WeeklyScheduleUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: WeeklyScheduleWhereUniqueInput
    data: XOR<WeeklyScheduleUpdateWithoutInstitutionInput, WeeklyScheduleUncheckedUpdateWithoutInstitutionInput>
  }

  export type WeeklyScheduleUpdateManyWithWhereWithoutInstitutionInput = {
    where: WeeklyScheduleScalarWhereInput
    data: XOR<WeeklyScheduleUpdateManyMutationInput, WeeklyScheduleUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type DoctorInstitutionUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: DoctorInstitutionWhereUniqueInput
    update: XOR<DoctorInstitutionUpdateWithoutInstitutionInput, DoctorInstitutionUncheckedUpdateWithoutInstitutionInput>
    create: XOR<DoctorInstitutionCreateWithoutInstitutionInput, DoctorInstitutionUncheckedCreateWithoutInstitutionInput>
  }

  export type DoctorInstitutionUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: DoctorInstitutionWhereUniqueInput
    data: XOR<DoctorInstitutionUpdateWithoutInstitutionInput, DoctorInstitutionUncheckedUpdateWithoutInstitutionInput>
  }

  export type DoctorInstitutionUpdateManyWithWhereWithoutInstitutionInput = {
    where: DoctorInstitutionScalarWhereInput
    data: XOR<DoctorInstitutionUpdateManyMutationInput, DoctorInstitutionUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type ClinicRatingUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: ClinicRatingWhereUniqueInput
    update: XOR<ClinicRatingUpdateWithoutInstitutionInput, ClinicRatingUncheckedUpdateWithoutInstitutionInput>
    create: XOR<ClinicRatingCreateWithoutInstitutionInput, ClinicRatingUncheckedCreateWithoutInstitutionInput>
  }

  export type ClinicRatingUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: ClinicRatingWhereUniqueInput
    data: XOR<ClinicRatingUpdateWithoutInstitutionInput, ClinicRatingUncheckedUpdateWithoutInstitutionInput>
  }

  export type ClinicRatingUpdateManyWithWhereWithoutInstitutionInput = {
    where: ClinicRatingScalarWhereInput
    data: XOR<ClinicRatingUpdateManyMutationInput, ClinicRatingUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutInstitutionInput, NotificationUncheckedUpdateWithoutInstitutionInput>
    create: XOR<NotificationCreateWithoutInstitutionInput, NotificationUncheckedCreateWithoutInstitutionInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutInstitutionInput, NotificationUncheckedUpdateWithoutInstitutionInput>
  }

  export type NotificationUpdateManyWithWhereWithoutInstitutionInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type FavoritesUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: FavoritesWhereUniqueInput
    update: XOR<FavoritesUpdateWithoutInstitutionInput, FavoritesUncheckedUpdateWithoutInstitutionInput>
    create: XOR<FavoritesCreateWithoutInstitutionInput, FavoritesUncheckedCreateWithoutInstitutionInput>
  }

  export type FavoritesUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: FavoritesWhereUniqueInput
    data: XOR<FavoritesUpdateWithoutInstitutionInput, FavoritesUncheckedUpdateWithoutInstitutionInput>
  }

  export type FavoritesUpdateManyWithWhereWithoutInstitutionInput = {
    where: FavoritesScalarWhereInput
    data: XOR<FavoritesUpdateManyMutationInput, FavoritesUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type MedicalReportUpsertWithWhereUniqueWithoutInstitutionInput = {
    where: MedicalReportWhereUniqueInput
    update: XOR<MedicalReportUpdateWithoutInstitutionInput, MedicalReportUncheckedUpdateWithoutInstitutionInput>
    create: XOR<MedicalReportCreateWithoutInstitutionInput, MedicalReportUncheckedCreateWithoutInstitutionInput>
  }

  export type MedicalReportUpdateWithWhereUniqueWithoutInstitutionInput = {
    where: MedicalReportWhereUniqueInput
    data: XOR<MedicalReportUpdateWithoutInstitutionInput, MedicalReportUncheckedUpdateWithoutInstitutionInput>
  }

  export type MedicalReportUpdateManyWithWhereWithoutInstitutionInput = {
    where: MedicalReportScalarWhereInput
    data: XOR<MedicalReportUpdateManyMutationInput, MedicalReportUncheckedUpdateManyWithoutInstitutionInput>
  }

  export type DoctorCreateWithoutInstitutionInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutInstitutionInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutInstitutionInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutInstitutionInput, DoctorUncheckedCreateWithoutInstitutionInput>
  }

  export type InstitutionCreateWithoutDoctorInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutDoctorInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutDoctorInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutDoctorInput, InstitutionUncheckedCreateWithoutDoctorInput>
  }

  export type DoctorUpsertWithoutInstitutionInput = {
    update: XOR<DoctorUpdateWithoutInstitutionInput, DoctorUncheckedUpdateWithoutInstitutionInput>
    create: XOR<DoctorCreateWithoutInstitutionInput, DoctorUncheckedCreateWithoutInstitutionInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutInstitutionInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutInstitutionInput, DoctorUncheckedUpdateWithoutInstitutionInput>
  }

  export type DoctorUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type InstitutionUpsertWithoutDoctorInput = {
    update: XOR<InstitutionUpdateWithoutDoctorInput, InstitutionUncheckedUpdateWithoutDoctorInput>
    create: XOR<InstitutionCreateWithoutDoctorInput, InstitutionUncheckedCreateWithoutDoctorInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutDoctorInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutDoctorInput, InstitutionUncheckedUpdateWithoutDoctorInput>
  }

  export type InstitutionUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type UserCreateWithoutAdminInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdminInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
  }

  export type InstitutionCreateWithoutAdminInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutAdminInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutAdminInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutAdminInput, InstitutionUncheckedCreateWithoutAdminInput>
  }

  export type UserUpsertWithoutAdminInput = {
    update: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
    create: XOR<UserCreateWithoutAdminInput, UserUncheckedCreateWithoutAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdminInput, UserUncheckedUpdateWithoutAdminInput>
  }

  export type UserUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    PasswordConfirmationCode?: PasswordConfirmationCodeUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstitutionUpsertWithoutAdminInput = {
    update: XOR<InstitutionUpdateWithoutAdminInput, InstitutionUncheckedUpdateWithoutAdminInput>
    create: XOR<InstitutionCreateWithoutAdminInput, InstitutionUncheckedCreateWithoutAdminInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutAdminInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutAdminInput, InstitutionUncheckedUpdateWithoutAdminInput>
  }

  export type InstitutionUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type PatientCreateWithoutAppointmentInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAppointmentInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAppointmentInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
  }

  export type InstitutionCreateWithoutConsultationInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutConsultationInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutConsultationInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutConsultationInput, InstitutionUncheckedCreateWithoutConsultationInput>
  }

  export type ConsultationTypeCreateWithoutConsultationInput = {
    id?: string
    description: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ConsultationTypeUncheckedCreateWithoutConsultationInput = {
    id?: string
    description: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ConsultationTypeCreateOrConnectWithoutConsultationInput = {
    where: ConsultationTypeWhereUniqueInput
    create: XOR<ConsultationTypeCreateWithoutConsultationInput, ConsultationTypeUncheckedCreateWithoutConsultationInput>
  }

  export type DoctorCreateWithoutConsultationInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutConsultationInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutConsultationInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutConsultationInput, DoctorUncheckedCreateWithoutConsultationInput>
  }

  export type MedicalHistoryCreateWithoutAppointmentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalHistoryUncheckedCreateWithoutAppointmentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalHistoryCreateOrConnectWithoutAppointmentInput = {
    where: MedicalHistoryWhereUniqueInput
    create: XOR<MedicalHistoryCreateWithoutAppointmentInput, MedicalHistoryUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalHistoryCreateManyAppointmentInputEnvelope = {
    data: MedicalHistoryCreateManyAppointmentInput | MedicalHistoryCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type MedicalReportCreateWithoutAppointmentInput = {
    id?: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    institution: InstitutionCreateNestedOneWithoutMedicalReportInput
    doctor: DoctorCreateNestedOneWithoutMedicalReportInput
    patient: PatientCreateNestedOneWithoutMedicalReportInput
  }

  export type MedicalReportUncheckedCreateWithoutAppointmentInput = {
    id?: string
    institutionId: string
    doctorId: string
    patientId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateOrConnectWithoutAppointmentInput = {
    where: MedicalReportWhereUniqueInput
    create: XOR<MedicalReportCreateWithoutAppointmentInput, MedicalReportUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalReportCreateManyAppointmentInputEnvelope = {
    data: MedicalReportCreateManyAppointmentInput | MedicalReportCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type RatingCreateWithoutAppoitmentInput = {
    id?: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    doctor: DoctorCreateNestedOneWithoutRatingInput
    user: UserCreateNestedOneWithoutRatingInput
  }

  export type RatingUncheckedCreateWithoutAppoitmentInput = {
    id?: string
    userId: string
    doctorId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingCreateOrConnectWithoutAppoitmentInput = {
    where: RatingWhereUniqueInput
    create: XOR<RatingCreateWithoutAppoitmentInput, RatingUncheckedCreateWithoutAppoitmentInput>
  }

  export type RatingCreateManyAppoitmentInputEnvelope = {
    data: RatingCreateManyAppoitmentInput | RatingCreateManyAppoitmentInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutAppointmentInput = {
    id?: string
    content: string
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Doctor?: DoctorCreateNestedOneWithoutNotificationInput
    Patient?: PatientCreateNestedOneWithoutNotificationInput
    Institution?: InstitutionCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutAppointmentInput = {
    id?: string
    content: string
    doctor_id?: string | null
    patient_id?: string | null
    institution_id?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateOrConnectWithoutAppointmentInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutAppointmentInput, NotificationUncheckedCreateWithoutAppointmentInput>
  }

  export type NotificationCreateManyAppointmentInputEnvelope = {
    data: NotificationCreateManyAppointmentInput | NotificationCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutAppointmentInput = {
    update: XOR<PatientUpdateWithoutAppointmentInput, PatientUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAppointmentInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAppointmentInput, PatientUncheckedUpdateWithoutAppointmentInput>
  }

  export type PatientUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type InstitutionUpsertWithoutConsultationInput = {
    update: XOR<InstitutionUpdateWithoutConsultationInput, InstitutionUncheckedUpdateWithoutConsultationInput>
    create: XOR<InstitutionCreateWithoutConsultationInput, InstitutionUncheckedCreateWithoutConsultationInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutConsultationInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutConsultationInput, InstitutionUncheckedUpdateWithoutConsultationInput>
  }

  export type InstitutionUpdateWithoutConsultationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutConsultationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type ConsultationTypeUpsertWithoutConsultationInput = {
    update: XOR<ConsultationTypeUpdateWithoutConsultationInput, ConsultationTypeUncheckedUpdateWithoutConsultationInput>
    create: XOR<ConsultationTypeCreateWithoutConsultationInput, ConsultationTypeUncheckedCreateWithoutConsultationInput>
    where?: ConsultationTypeWhereInput
  }

  export type ConsultationTypeUpdateToOneWithWhereWithoutConsultationInput = {
    where?: ConsultationTypeWhereInput
    data: XOR<ConsultationTypeUpdateWithoutConsultationInput, ConsultationTypeUncheckedUpdateWithoutConsultationInput>
  }

  export type ConsultationTypeUpdateWithoutConsultationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ConsultationTypeUncheckedUpdateWithoutConsultationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorUpsertWithoutConsultationInput = {
    update: XOR<DoctorUpdateWithoutConsultationInput, DoctorUncheckedUpdateWithoutConsultationInput>
    create: XOR<DoctorCreateWithoutConsultationInput, DoctorUncheckedCreateWithoutConsultationInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutConsultationInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutConsultationInput, DoctorUncheckedUpdateWithoutConsultationInput>
  }

  export type DoctorUpdateWithoutConsultationInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutConsultationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type MedicalHistoryUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: MedicalHistoryWhereUniqueInput
    update: XOR<MedicalHistoryUpdateWithoutAppointmentInput, MedicalHistoryUncheckedUpdateWithoutAppointmentInput>
    create: XOR<MedicalHistoryCreateWithoutAppointmentInput, MedicalHistoryUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalHistoryUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: MedicalHistoryWhereUniqueInput
    data: XOR<MedicalHistoryUpdateWithoutAppointmentInput, MedicalHistoryUncheckedUpdateWithoutAppointmentInput>
  }

  export type MedicalHistoryUpdateManyWithWhereWithoutAppointmentInput = {
    where: MedicalHistoryScalarWhereInput
    data: XOR<MedicalHistoryUpdateManyMutationInput, MedicalHistoryUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type MedicalHistoryScalarWhereInput = {
    AND?: MedicalHistoryScalarWhereInput | MedicalHistoryScalarWhereInput[]
    OR?: MedicalHistoryScalarWhereInput[]
    NOT?: MedicalHistoryScalarWhereInput | MedicalHistoryScalarWhereInput[]
    id?: StringFilter<"MedicalHistory"> | string
    AppointmentId?: StringFilter<"MedicalHistory"> | string
    createdAt?: DateTimeFilter<"MedicalHistory"> | Date | string
    updatedAt?: DateTimeFilter<"MedicalHistory"> | Date | string
    deletedAt?: BoolFilter<"MedicalHistory"> | boolean
  }

  export type MedicalReportUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: MedicalReportWhereUniqueInput
    update: XOR<MedicalReportUpdateWithoutAppointmentInput, MedicalReportUncheckedUpdateWithoutAppointmentInput>
    create: XOR<MedicalReportCreateWithoutAppointmentInput, MedicalReportUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalReportUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: MedicalReportWhereUniqueInput
    data: XOR<MedicalReportUpdateWithoutAppointmentInput, MedicalReportUncheckedUpdateWithoutAppointmentInput>
  }

  export type MedicalReportUpdateManyWithWhereWithoutAppointmentInput = {
    where: MedicalReportScalarWhereInput
    data: XOR<MedicalReportUpdateManyMutationInput, MedicalReportUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type RatingUpsertWithWhereUniqueWithoutAppoitmentInput = {
    where: RatingWhereUniqueInput
    update: XOR<RatingUpdateWithoutAppoitmentInput, RatingUncheckedUpdateWithoutAppoitmentInput>
    create: XOR<RatingCreateWithoutAppoitmentInput, RatingUncheckedCreateWithoutAppoitmentInput>
  }

  export type RatingUpdateWithWhereUniqueWithoutAppoitmentInput = {
    where: RatingWhereUniqueInput
    data: XOR<RatingUpdateWithoutAppoitmentInput, RatingUncheckedUpdateWithoutAppoitmentInput>
  }

  export type RatingUpdateManyWithWhereWithoutAppoitmentInput = {
    where: RatingScalarWhereInput
    data: XOR<RatingUpdateManyMutationInput, RatingUncheckedUpdateManyWithoutAppoitmentInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutAppointmentInput, NotificationUncheckedUpdateWithoutAppointmentInput>
    create: XOR<NotificationCreateWithoutAppointmentInput, NotificationUncheckedCreateWithoutAppointmentInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutAppointmentInput, NotificationUncheckedUpdateWithoutAppointmentInput>
  }

  export type NotificationUpdateManyWithWhereWithoutAppointmentInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type AppointmentCreateWithoutConsultationTypeInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutConsultationTypeInput = {
    id?: string
    patientId: string
    institutionId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutConsultationTypeInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutConsultationTypeInput, AppointmentUncheckedCreateWithoutConsultationTypeInput>
  }

  export type AppointmentCreateManyConsultationTypeInputEnvelope = {
    data: AppointmentCreateManyConsultationTypeInput | AppointmentCreateManyConsultationTypeInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutConsultationTypeInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutConsultationTypeInput, AppointmentUncheckedUpdateWithoutConsultationTypeInput>
    create: XOR<AppointmentCreateWithoutConsultationTypeInput, AppointmentUncheckedCreateWithoutConsultationTypeInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutConsultationTypeInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutConsultationTypeInput, AppointmentUncheckedUpdateWithoutConsultationTypeInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutConsultationTypeInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutConsultationTypeInput>
  }

  export type DoctorCreateWithoutNotificationInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutNotificationInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutNotificationInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutNotificationInput, DoctorUncheckedCreateWithoutNotificationInput>
  }

  export type PatientCreateWithoutNotificationInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutNotificationInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutPatientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutNotificationInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutNotificationInput, PatientUncheckedCreateWithoutNotificationInput>
  }

  export type InstitutionCreateWithoutNotificationInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutNotificationInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutNotificationInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutNotificationInput, InstitutionUncheckedCreateWithoutNotificationInput>
  }

  export type AppointmentCreateWithoutNotificationInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
  }

  export type AppointmentUncheckedCreateWithoutNotificationInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
  }

  export type AppointmentCreateOrConnectWithoutNotificationInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutNotificationInput, AppointmentUncheckedCreateWithoutNotificationInput>
  }

  export type DoctorUpsertWithoutNotificationInput = {
    update: XOR<DoctorUpdateWithoutNotificationInput, DoctorUncheckedUpdateWithoutNotificationInput>
    create: XOR<DoctorCreateWithoutNotificationInput, DoctorUncheckedCreateWithoutNotificationInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutNotificationInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutNotificationInput, DoctorUncheckedUpdateWithoutNotificationInput>
  }

  export type DoctorUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientUpsertWithoutNotificationInput = {
    update: XOR<PatientUpdateWithoutNotificationInput, PatientUncheckedUpdateWithoutNotificationInput>
    create: XOR<PatientCreateWithoutNotificationInput, PatientUncheckedCreateWithoutNotificationInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutNotificationInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutNotificationInput, PatientUncheckedUpdateWithoutNotificationInput>
  }

  export type PatientUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type InstitutionUpsertWithoutNotificationInput = {
    update: XOR<InstitutionUpdateWithoutNotificationInput, InstitutionUncheckedUpdateWithoutNotificationInput>
    create: XOR<InstitutionCreateWithoutNotificationInput, InstitutionUncheckedCreateWithoutNotificationInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutNotificationInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutNotificationInput, InstitutionUncheckedUpdateWithoutNotificationInput>
  }

  export type InstitutionUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type AppointmentUpsertWithoutNotificationInput = {
    update: XOR<AppointmentUpdateWithoutNotificationInput, AppointmentUncheckedUpdateWithoutNotificationInput>
    create: XOR<AppointmentCreateWithoutNotificationInput, AppointmentUncheckedCreateWithoutNotificationInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutNotificationInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutNotificationInput, AppointmentUncheckedUpdateWithoutNotificationInput>
  }

  export type AppointmentUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
  }

  export type DoctorCreateWithoutWeeklyScheduleInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutWeeklyScheduleInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutWeeklyScheduleInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutWeeklyScheduleInput, DoctorUncheckedCreateWithoutWeeklyScheduleInput>
  }

  export type InstitutionCreateWithoutWeeklyScheduleInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutWeeklyScheduleInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutWeeklyScheduleInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutWeeklyScheduleInput, InstitutionUncheckedCreateWithoutWeeklyScheduleInput>
  }

  export type DoctorUpsertWithoutWeeklyScheduleInput = {
    update: XOR<DoctorUpdateWithoutWeeklyScheduleInput, DoctorUncheckedUpdateWithoutWeeklyScheduleInput>
    create: XOR<DoctorCreateWithoutWeeklyScheduleInput, DoctorUncheckedCreateWithoutWeeklyScheduleInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutWeeklyScheduleInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutWeeklyScheduleInput, DoctorUncheckedUpdateWithoutWeeklyScheduleInput>
  }

  export type DoctorUpdateWithoutWeeklyScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutWeeklyScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type InstitutionUpsertWithoutWeeklyScheduleInput = {
    update: XOR<InstitutionUpdateWithoutWeeklyScheduleInput, InstitutionUncheckedUpdateWithoutWeeklyScheduleInput>
    create: XOR<InstitutionCreateWithoutWeeklyScheduleInput, InstitutionUncheckedCreateWithoutWeeklyScheduleInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutWeeklyScheduleInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutWeeklyScheduleInput, InstitutionUncheckedUpdateWithoutWeeklyScheduleInput>
  }

  export type InstitutionUpdateWithoutWeeklyScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutWeeklyScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type AppointmentCreateWithoutMedicalHistoriesInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalReport?: MedicalReportCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutMedicalHistoriesInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalReport?: MedicalReportUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutMedicalHistoriesInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutMedicalHistoriesInput, AppointmentUncheckedCreateWithoutMedicalHistoriesInput>
  }

  export type AppointmentUpsertWithoutMedicalHistoriesInput = {
    update: XOR<AppointmentUpdateWithoutMedicalHistoriesInput, AppointmentUncheckedUpdateWithoutMedicalHistoriesInput>
    create: XOR<AppointmentCreateWithoutMedicalHistoriesInput, AppointmentUncheckedCreateWithoutMedicalHistoriesInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutMedicalHistoriesInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutMedicalHistoriesInput, AppointmentUncheckedUpdateWithoutMedicalHistoriesInput>
  }

  export type AppointmentUpdateWithoutMedicalHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutMedicalHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type UserCreateWithoutPasswordConfirmationCodeInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionCreateNestedManyWithoutUserInput
    Patient?: PatientCreateNestedManyWithoutUserInput
    Doctor?: DoctorCreateNestedManyWithoutUserInput
    Institution?: InstitutionCreateNestedManyWithoutUserInput
    Admin?: AdminCreateNestedManyWithoutUserInput
    Rating?: RatingCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPasswordConfirmationCodeInput = {
    id?: string
    name: string
    email: string
    password: string
    nationality?: string | null
    Role: $Enums.RoleType
    nif?: string | null
    phone: string
    birthday?: Date | string | null
    FatherName?: string | null
    MotherName?: string | null
    type?: string | null
    gender?: string | null
    BI?: string | null
    neigbhod: string
    city: string
    municipality?: string | null
    avatar?: string | null
    addressComplement?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    UserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    Patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutUserInput
    Institution?: InstitutionUncheckedCreateNestedManyWithoutUserInput
    Admin?: AdminUncheckedCreateNestedManyWithoutUserInput
    Rating?: RatingUncheckedCreateNestedManyWithoutUserInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutUserInput
    FCMToken?: FCMTokenUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPasswordConfirmationCodeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPasswordConfirmationCodeInput, UserUncheckedCreateWithoutPasswordConfirmationCodeInput>
  }

  export type UserUpsertWithoutPasswordConfirmationCodeInput = {
    update: XOR<UserUpdateWithoutPasswordConfirmationCodeInput, UserUncheckedUpdateWithoutPasswordConfirmationCodeInput>
    create: XOR<UserCreateWithoutPasswordConfirmationCodeInput, UserUncheckedCreateWithoutPasswordConfirmationCodeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPasswordConfirmationCodeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPasswordConfirmationCodeInput, UserUncheckedUpdateWithoutPasswordConfirmationCodeInput>
  }

  export type UserUpdateWithoutPasswordConfirmationCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUpdateManyWithoutUserNestedInput
    Patient?: PatientUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUpdateManyWithoutUserNestedInput
    Admin?: AdminUpdateManyWithoutUserNestedInput
    Rating?: RatingUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPasswordConfirmationCodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    nationality?: NullableStringFieldUpdateOperationsInput | string | null
    Role?: EnumRoleTypeFieldUpdateOperationsInput | $Enums.RoleType
    nif?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    birthday?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    FatherName?: NullableStringFieldUpdateOperationsInput | string | null
    MotherName?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    BI?: NullableStringFieldUpdateOperationsInput | string | null
    neigbhod?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    municipality?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    addressComplement?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    UserPermission?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    Patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutUserNestedInput
    Institution?: InstitutionUncheckedUpdateManyWithoutUserNestedInput
    Admin?: AdminUncheckedUpdateManyWithoutUserNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutUserNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutUserNestedInput
    FCMToken?: FCMTokenUncheckedUpdateManyWithoutUserNestedInput
  }

  export type InstitutionCreateWithoutMedicalReportInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutInstitutionInput
    Admin?: AdminCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentCreateNestedManyWithoutInstitutionInput
    service?: ServicesCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionUncheckedCreateWithoutMedicalReportInput = {
    id?: string
    userId: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Admin?: AdminUncheckedCreateNestedManyWithoutInstitutionInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutInstitutionInput
    service?: ServicesUncheckedCreateNestedManyWithoutInstitutionInput
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutInstitutionInput
    Doctor?: DoctorInstitutionUncheckedCreateNestedManyWithoutInstitutionInput
    ClinicRating?: ClinicRatingUncheckedCreateNestedManyWithoutInstitutionInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutInstitutionInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutInstitutionInput
  }

  export type InstitutionCreateOrConnectWithoutMedicalReportInput = {
    where: InstitutionWhereUniqueInput
    create: XOR<InstitutionCreateWithoutMedicalReportInput, InstitutionUncheckedCreateWithoutMedicalReportInput>
  }

  export type DoctorCreateWithoutMedicalReportInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutDoctorInput
    WeeklySchedule?: WeeklyScheduleCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentCreateNestedManyWithoutDoctorInput
    rating?: RatingCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionCreateNestedManyWithoutDoctorInput
    Notification?: NotificationCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutMedicalReportInput = {
    id?: string
    userId: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    WeeklySchedule?: WeeklyScheduleUncheckedCreateNestedManyWithoutDoctorInput
    Consultation?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
    rating?: RatingUncheckedCreateNestedManyWithoutDoctorInput
    institution?: DoctorInstitutionUncheckedCreateNestedManyWithoutDoctorInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutDoctorInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutMedicalReportInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutMedicalReportInput, DoctorUncheckedCreateWithoutMedicalReportInput>
  }

  export type PatientCreateWithoutMedicalReportInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    user: UserCreateNestedOneWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPacientInput
    Notification?: NotificationCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesCreateNestedManyWithoutPacientInput
    patientCard?: PatientCardCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMedicalReportInput = {
    id?: string
    number?: number | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPacientInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutPatientInput
    Qrcode?: QrcodeUncheckedCreateNestedManyWithoutPatientInput
    Favorites?: FavoritesUncheckedCreateNestedManyWithoutPacientInput
    patientCard?: PatientCardUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMedicalReportInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMedicalReportInput, PatientUncheckedCreateWithoutMedicalReportInput>
  }

  export type AppointmentCreateWithoutMedicalReportInput = {
    id?: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    pacient: PatientCreateNestedOneWithoutAppointmentInput
    institution: InstitutionCreateNestedOneWithoutConsultationInput
    consultationType: ConsultationTypeCreateNestedOneWithoutConsultationInput
    Doctor: DoctorCreateNestedOneWithoutConsultationInput
    medicalHistories?: MedicalHistoryCreateNestedManyWithoutAppointmentInput
    Rating?: RatingCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutMedicalReportInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
    medicalHistories?: MedicalHistoryUncheckedCreateNestedManyWithoutAppointmentInput
    Rating?: RatingUncheckedCreateNestedManyWithoutAppoitmentInput
    Notification?: NotificationUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutMedicalReportInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutMedicalReportInput, AppointmentUncheckedCreateWithoutMedicalReportInput>
  }

  export type InstitutionUpsertWithoutMedicalReportInput = {
    update: XOR<InstitutionUpdateWithoutMedicalReportInput, InstitutionUncheckedUpdateWithoutMedicalReportInput>
    create: XOR<InstitutionCreateWithoutMedicalReportInput, InstitutionUncheckedCreateWithoutMedicalReportInput>
    where?: InstitutionWhereInput
  }

  export type InstitutionUpdateToOneWithWhereWithoutMedicalReportInput = {
    where?: InstitutionWhereInput
    data: XOR<InstitutionUpdateWithoutMedicalReportInput, InstitutionUncheckedUpdateWithoutMedicalReportInput>
  }

  export type InstitutionUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutInstitutionNestedInput
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type DoctorUpsertWithoutMedicalReportInput = {
    update: XOR<DoctorUpdateWithoutMedicalReportInput, DoctorUncheckedUpdateWithoutMedicalReportInput>
    create: XOR<DoctorCreateWithoutMedicalReportInput, DoctorUncheckedCreateWithoutMedicalReportInput>
    where?: DoctorWhereInput
  }

  export type DoctorUpdateToOneWithWhereWithoutMedicalReportInput = {
    where?: DoctorWhereInput
    data: XOR<DoctorUpdateWithoutMedicalReportInput, DoctorUncheckedUpdateWithoutMedicalReportInput>
  }

  export type DoctorUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDoctorNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type PatientUpsertWithoutMedicalReportInput = {
    update: XOR<PatientUpdateWithoutMedicalReportInput, PatientUncheckedUpdateWithoutMedicalReportInput>
    create: XOR<PatientCreateWithoutMedicalReportInput, PatientUncheckedCreateWithoutMedicalReportInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMedicalReportInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMedicalReportInput, PatientUncheckedUpdateWithoutMedicalReportInput>
  }

  export type PatientUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type AppointmentUpsertWithoutMedicalReportInput = {
    update: XOR<AppointmentUpdateWithoutMedicalReportInput, AppointmentUncheckedUpdateWithoutMedicalReportInput>
    create: XOR<AppointmentCreateWithoutMedicalReportInput, AppointmentUncheckedCreateWithoutMedicalReportInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutMedicalReportInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutMedicalReportInput, AppointmentUncheckedUpdateWithoutMedicalReportInput>
  }

  export type AppointmentUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutMedicalReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type UserPermissionCreateManyUserInput = {
    id?: string
    permissions: $Enums.permissions
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientCreateManyUserInput = {
    id?: string
    number?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type DoctorCreateManyUserInput = {
    id?: string
    specialty: string
    bio: string
    registrationNumber: number
    institutionId: string
    isOnVacation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type InstitutionCreateManyUserInput = {
    id?: string
    clinicLatitude: string
    cliniclongitude: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AdminCreateManyUserInput = {
    id?: string
    institutionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingCreateManyUserInput = {
    id?: string
    doctorId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ClinicRatingCreateManyUserInput = {
    id?: string
    clinicId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PasswordConfirmationCodeCreateManyUserInput = {
    id?: string
    code: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FCMTokenCreateManyUserInput = {
    id?: string
    token: string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissions?: EnumpermissionsFieldUpdateOperationsInput | $Enums.permissions
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Appointment?: AppointmentUncheckedUpdateManyWithoutPacientNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutPatientNestedInput
    Qrcode?: QrcodeUncheckedUpdateManyWithoutPatientNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutPacientNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutPatientNestedInput
    patientCard?: PatientCardUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUpdateManyWithoutDoctorNestedInput
    rating?: RatingUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutDoctorNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
    rating?: RatingUncheckedUpdateManyWithoutDoctorNestedInput
    institution?: DoctorInstitutionUncheckedUpdateManyWithoutDoctorNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutDoctorNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutDoctorNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    registrationNumber?: IntFieldUpdateOperationsInput | number
    institutionId?: StringFieldUpdateOperationsInput | string
    isOnVacation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InstitutionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Admin?: AdminUncheckedUpdateManyWithoutInstitutionNestedInput
    Consultation?: AppointmentUncheckedUpdateManyWithoutInstitutionNestedInput
    service?: ServicesUncheckedUpdateManyWithoutInstitutionNestedInput
    WeeklySchedule?: WeeklyScheduleUncheckedUpdateManyWithoutInstitutionNestedInput
    Doctor?: DoctorInstitutionUncheckedUpdateManyWithoutInstitutionNestedInput
    ClinicRating?: ClinicRatingUncheckedUpdateManyWithoutInstitutionNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutInstitutionNestedInput
    Favorites?: FavoritesUncheckedUpdateManyWithoutInstitutionNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutInstitutionNestedInput
  }

  export type InstitutionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicLatitude?: StringFieldUpdateOperationsInput | string
    cliniclongitude?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneRequiredWithoutRatingNestedInput
    appoitment?: AppointmentUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    appoitmentID?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    appoitmentID?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClinicRatingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutClinicRatingNestedInput
  }

  export type ClinicRatingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClinicRatingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordConfirmationCodeUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordConfirmationCodeUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PasswordConfirmationCodeUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FCMTokenUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type FCMTokenUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type FCMTokenUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentCreateManyPacientInput = {
    id?: string
    institutionId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateManyPatientInput = {
    id?: string
    content: string
    doctor_id?: string | null
    institution_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type QrcodeCreateManyPatientInput = {
    id?: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesCreateManyPacientInput = {
    id?: string
    doctorId?: string | null
    institutionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateManyPatientInput = {
    id?: string
    institutionId: string
    doctorId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type PatientCardCreateManyPatientInput = {
    id?: string
    clinicId: string
    qrCode: string
    cardNumber: string
    status: $Enums.CardStatus
    issuedOn?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AppointmentUpdateWithoutPacientInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPacientInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPacientInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Doctor?: DoctorUpdateOneWithoutNotificationNestedInput
    Institution?: InstitutionUpdateOneWithoutNotificationNestedInput
    Appointment?: AppointmentUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QrcodeUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QrcodeUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type QrcodeUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUpdateWithoutPacientInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneWithoutFavoritesNestedInput
    institution?: InstitutionUpdateOneWithoutFavoritesNestedInput
  }

  export type FavoritesUncheckedUpdateWithoutPacientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUncheckedUpdateManyWithoutPacientInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutMedicalReportNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutMedicalReportNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutMedicalReportNestedInput
  }

  export type MedicalReportUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCardUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCardUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PatientCardUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    clinicId?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    cardNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumCardStatusFieldUpdateOperationsInput | $Enums.CardStatus
    issuedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WeeklyScheduleCreateManyDoctorInput = {
    id?: string
    institutionId: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyDoctorInput = {
    id?: string
    patientId: string
    institutionId: string
    consultationTypeId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingCreateManyDoctorInput = {
    id?: string
    userId: string
    appoitmentID: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type DoctorInstitutionCreateManyDoctorInput = {
    id?: string
    institutionId: string
  }

  export type NotificationCreateManyDoctorInput = {
    id?: string
    content: string
    patient_id?: string | null
    institution_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesCreateManyDoctorInput = {
    id?: string
    pacientId: string
    institutionId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateManyDoctorInput = {
    id?: string
    institutionId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type WeeklyScheduleUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    institution?: InstitutionUpdateOneRequiredWithoutWeeklyScheduleNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
    appoitment?: AppointmentUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    appoitmentID?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    appoitmentID?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoctorInstitutionUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: InstitutionUpdateOneRequiredWithoutDoctorNestedInput
  }

  export type DoctorInstitutionUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorInstitutionUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Patient?: PatientUpdateOneWithoutNotificationNestedInput
    Institution?: InstitutionUpdateOneWithoutNotificationNestedInput
    Appointment?: AppointmentUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneWithoutFavoritesNestedInput
    pacient?: PatientUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoritesUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacientId?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacientId?: StringFieldUpdateOperationsInput | string
    institutionId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutMedicalReportNestedInput
    patient?: PatientUpdateOneRequiredWithoutMedicalReportNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutMedicalReportNestedInput
  }

  export type MedicalReportUncheckedUpdateWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUncheckedUpdateManyWithoutDoctorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminCreateManyInstitutionInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AppointmentCreateManyInstitutionInput = {
    id?: string
    patientId: string
    consultationTypeId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type ServicesCreateManyInstitutionInput = {
    id?: string
    name: string
    description: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type WeeklyScheduleCreateManyInstitutionInput = {
    id?: string
    doctorId: string
    dayOfWeek: Date | string
    startTime: number
    endTime: number
    interval: number
    dailyWorkingHours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoctorInstitutionCreateManyInstitutionInput = {
    id?: string
    doctorId: string
  }

  export type ClinicRatingCreateManyInstitutionInput = {
    id?: string
    userId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateManyInstitutionInput = {
    id?: string
    content: string
    doctor_id?: string | null
    patient_id?: string | null
    appointmentId?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type FavoritesCreateManyInstitutionInput = {
    id?: string
    pacientId: string
    doctorId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateManyInstitutionInput = {
    id?: string
    doctorId: string
    patientId: string
    AppointmentId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AdminUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AdminUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    consultationType?: ConsultationTypeUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    consultationTypeId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServicesUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServicesUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ServicesUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WeeklyScheduleUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    doctor?: DoctorUpdateOneRequiredWithoutWeeklyScheduleNestedInput
  }

  export type WeeklyScheduleUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WeeklyScheduleUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: IntFieldUpdateOperationsInput | number
    endTime?: IntFieldUpdateOperationsInput | number
    interval?: IntFieldUpdateOperationsInput | number
    dailyWorkingHours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorInstitutionUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    Doctor?: DoctorUpdateOneRequiredWithoutInstitutionNestedInput
  }

  export type DoctorInstitutionUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorInstitutionUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
  }

  export type ClinicRatingUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutClinicRatingNestedInput
  }

  export type ClinicRatingUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClinicRatingUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Doctor?: DoctorUpdateOneWithoutNotificationNestedInput
    Patient?: PatientUpdateOneWithoutNotificationNestedInput
    Appointment?: AppointmentUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneWithoutFavoritesNestedInput
    pacient?: PatientUpdateOneRequiredWithoutFavoritesNestedInput
  }

  export type FavoritesUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacientId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FavoritesUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    pacientId?: StringFieldUpdateOperationsInput | string
    doctorId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneRequiredWithoutMedicalReportNestedInput
    patient?: PatientUpdateOneRequiredWithoutMedicalReportNestedInput
    appointment?: AppointmentUpdateOneRequiredWithoutMedicalReportNestedInput
  }

  export type MedicalReportUncheckedUpdateWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUncheckedUpdateManyWithoutInstitutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    AppointmentId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalHistoryCreateManyAppointmentInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalReportCreateManyAppointmentInput = {
    id?: string
    institutionId: string
    doctorId: string
    patientId: string
    medicalEvaluation?: string | null
    bloodPressure?: string | null
    height?: string | null
    weight?: string | null
    pulse?: string | null
    temperature?: string | null
    otherPhysicalParams?: string | null
    diagnosis?: string | null
    treatmentPlan?: string | null
    recommendations?: MedicalReportCreaterecommendationsInput | string[]
    orientations?: MedicalReportCreateorientationsInput | string[]
    observations?: string | null
    symptomsDescription?: string | null
    additionalObservation?: string | null
    date?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type RatingCreateManyAppoitmentInput = {
    id?: string
    userId: string
    doctorId: string
    rate: number
    comment: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type NotificationCreateManyAppointmentInput = {
    id?: string
    content: string
    doctor_id?: string | null
    patient_id?: string | null
    institution_id?: string | null
    read?: boolean
    type?: $Enums.TypeNotification | null
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type MedicalHistoryUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalHistoryUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalHistoryUncheckedUpdateManyWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    institution?: InstitutionUpdateOneRequiredWithoutMedicalReportNestedInput
    doctor?: DoctorUpdateOneRequiredWithoutMedicalReportNestedInput
    patient?: PatientUpdateOneRequiredWithoutMedicalReportNestedInput
  }

  export type MedicalReportUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicalReportUncheckedUpdateManyWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    medicalEvaluation?: NullableStringFieldUpdateOperationsInput | string | null
    bloodPressure?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    pulse?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: NullableStringFieldUpdateOperationsInput | string | null
    otherPhysicalParams?: NullableStringFieldUpdateOperationsInput | string | null
    diagnosis?: NullableStringFieldUpdateOperationsInput | string | null
    treatmentPlan?: NullableStringFieldUpdateOperationsInput | string | null
    recommendations?: MedicalReportUpdaterecommendationsInput | string[]
    orientations?: MedicalReportUpdateorientationsInput | string[]
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    symptomsDescription?: NullableStringFieldUpdateOperationsInput | string | null
    additionalObservation?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUpdateWithoutAppoitmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    doctor?: DoctorUpdateOneRequiredWithoutRatingNestedInput
    user?: UserUpdateOneRequiredWithoutRatingNestedInput
  }

  export type RatingUncheckedUpdateWithoutAppoitmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RatingUncheckedUpdateManyWithoutAppoitmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    rate?: IntFieldUpdateOperationsInput | number
    comment?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    Doctor?: DoctorUpdateOneWithoutNotificationNestedInput
    Patient?: PatientUpdateOneWithoutNotificationNestedInput
    Institution?: InstitutionUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    doctor_id?: NullableStringFieldUpdateOperationsInput | string | null
    patient_id?: NullableStringFieldUpdateOperationsInput | string | null
    institution_id?: NullableStringFieldUpdateOperationsInput | string | null
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: NullableEnumTypeNotificationFieldUpdateOperationsInput | $Enums.TypeNotification | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AppointmentCreateManyConsultationTypeInput = {
    id?: string
    patientId: string
    institutionId: string
    doctorId: string
    symptomDescription: string
    isUrgent?: boolean | null
    date: Date | string
    status: $Enums.AppointmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: boolean
  }

  export type AppointmentUpdateWithoutConsultationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    pacient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    institution?: InstitutionUpdateOneRequiredWithoutConsultationNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutConsultationNestedInput
    medicalHistories?: MedicalHistoryUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutConsultationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
    medicalHistories?: MedicalHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
    medicalReport?: MedicalReportUncheckedUpdateManyWithoutAppointmentNestedInput
    Rating?: RatingUncheckedUpdateManyWithoutAppoitmentNestedInput
    Notification?: NotificationUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutConsultationTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    institutionId?: StringFieldUpdateOperationsInput | string
    doctorId?: StringFieldUpdateOperationsInput | string
    symptomDescription?: StringFieldUpdateOperationsInput | string
    isUrgent?: NullableBoolFieldUpdateOperationsInput | boolean | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientCountOutputTypeDefaultArgs instead
     */
    export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PatientCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorCountOutputTypeDefaultArgs instead
     */
    export type DoctorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DoctorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstitutionCountOutputTypeDefaultArgs instead
     */
    export type InstitutionCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = InstitutionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentCountOutputTypeDefaultArgs instead
     */
    export type AppointmentCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AppointmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsultationTypeCountOutputTypeDefaultArgs instead
     */
    export type ConsultationTypeCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ConsultationTypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FCMTokenDefaultArgs instead
     */
    export type FCMTokenArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FCMTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RatingDefaultArgs instead
     */
    export type RatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClinicRatingDefaultArgs instead
     */
    export type ClinicRatingArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ClinicRatingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ServicesDefaultArgs instead
     */
    export type ServicesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ServicesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SpecialityDefaultArgs instead
     */
    export type SpecialityArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SpecialityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPermissionDefaultArgs instead
     */
    export type UserPermissionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserPermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientDefaultArgs instead
     */
    export type PatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PatientDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PatientCardDefaultArgs instead
     */
    export type PatientCardArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PatientCardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QrcodeDefaultArgs instead
     */
    export type QrcodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = QrcodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorDefaultArgs instead
     */
    export type DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DoctorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavoritesDefaultArgs instead
     */
    export type FavoritesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FavoritesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InstitutionDefaultArgs instead
     */
    export type InstitutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = InstitutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoctorInstitutionDefaultArgs instead
     */
    export type DoctorInstitutionArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = DoctorInstitutionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AppointmentDefaultArgs instead
     */
    export type AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AppointmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ConsultationTypeDefaultArgs instead
     */
    export type ConsultationTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ConsultationTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WeeklyScheduleDefaultArgs instead
     */
    export type WeeklyScheduleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = WeeklyScheduleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicalHistoryDefaultArgs instead
     */
    export type MedicalHistoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MedicalHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PasswordConfirmationCodeDefaultArgs instead
     */
    export type PasswordConfirmationCodeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PasswordConfirmationCodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicalReportDefaultArgs instead
     */
    export type MedicalReportArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MedicalReportDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}